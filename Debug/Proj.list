
Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053ac  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff8  080054c0  080054c0  000064c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064b8  080064b8  00008070  2**0
                  CONTENTS
  4 .ARM          00000000  080064b8  080064b8  00008070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064b8  080064b8  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064b8  080064b8  000074b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064bc  080064bc  000074bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080064c0  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  20000070  08006530  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08006530  000083a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000071ba  00000000  00000000  00008099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b24  00000000  00000000  0000f253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  00010d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005bc  00000000  00000000  00011528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ee3  00000000  00000000  00011ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000093fa  00000000  00000000  000289c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081e9c  00000000  00000000  00031dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3c5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000237c  00000000  00000000  000b3ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000b601c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080054a4 	.word	0x080054a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080054a4 	.word	0x080054a4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <Button>:
#include <math.h>

extern uint32_t X[32];
extern uint32_t O[32];

int Button(void){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIO_CLICK_PORT, GPIO_CLICK_PIN) == 0){
 8000a7c:	2180      	movs	r1, #128	@ 0x80
 8000a7e:	4842      	ldr	r0, [pc, #264]	@ (8000b88 <Button+0x110>)
 8000a80:	f002 fe20 	bl	80036c4 <HAL_GPIO_ReadPin>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d112      	bne.n	8000ab0 <Button+0x38>
		HAL_Delay(20);
 8000a8a:	2014      	movs	r0, #20
 8000a8c:	f002 f98c 	bl	8002da8 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIO_CLICK_PORT, GPIO_CLICK_PIN) == 0){
 8000a90:	2180      	movs	r1, #128	@ 0x80
 8000a92:	483d      	ldr	r0, [pc, #244]	@ (8000b88 <Button+0x110>)
 8000a94:	f002 fe16 	bl	80036c4 <HAL_GPIO_ReadPin>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d108      	bne.n	8000ab0 <Button+0x38>
			while(1){
			if(HAL_GPIO_ReadPin(GPIO_CLICK_PORT, GPIO_CLICK_PIN) == 1)
 8000a9e:	2180      	movs	r1, #128	@ 0x80
 8000aa0:	4839      	ldr	r0, [pc, #228]	@ (8000b88 <Button+0x110>)
 8000aa2:	f002 fe0f 	bl	80036c4 <HAL_GPIO_ReadPin>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d1f8      	bne.n	8000a9e <Button+0x26>
			return CLICK;
 8000aac:	2301      	movs	r3, #1
 8000aae:	e068      	b.n	8000b82 <Button+0x10a>
			}
		}
	}
	if(HAL_GPIO_ReadPin(GPIO_UP_PORT, GPIO_UP_PIN) == 0){
 8000ab0:	2140      	movs	r1, #64	@ 0x40
 8000ab2:	4835      	ldr	r0, [pc, #212]	@ (8000b88 <Button+0x110>)
 8000ab4:	f002 fe06 	bl	80036c4 <HAL_GPIO_ReadPin>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d112      	bne.n	8000ae4 <Button+0x6c>
			HAL_Delay(20);
 8000abe:	2014      	movs	r0, #20
 8000ac0:	f002 f972 	bl	8002da8 <HAL_Delay>
			if(HAL_GPIO_ReadPin(GPIO_UP_PORT, GPIO_UP_PIN) == 0){
 8000ac4:	2140      	movs	r1, #64	@ 0x40
 8000ac6:	4830      	ldr	r0, [pc, #192]	@ (8000b88 <Button+0x110>)
 8000ac8:	f002 fdfc 	bl	80036c4 <HAL_GPIO_ReadPin>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d108      	bne.n	8000ae4 <Button+0x6c>
				while(1){
					if(HAL_GPIO_ReadPin(GPIO_UP_PORT, GPIO_UP_PIN) == 1)
 8000ad2:	2140      	movs	r1, #64	@ 0x40
 8000ad4:	482c      	ldr	r0, [pc, #176]	@ (8000b88 <Button+0x110>)
 8000ad6:	f002 fdf5 	bl	80036c4 <HAL_GPIO_ReadPin>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d1f8      	bne.n	8000ad2 <Button+0x5a>
					return UP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	e04e      	b.n	8000b82 <Button+0x10a>
				}
			}
		}
	if(HAL_GPIO_ReadPin(GPIO_DOWN_PORT, GPIO_DOWN_PIN) == 0){
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	4828      	ldr	r0, [pc, #160]	@ (8000b88 <Button+0x110>)
 8000ae8:	f002 fdec 	bl	80036c4 <HAL_GPIO_ReadPin>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d112      	bne.n	8000b18 <Button+0xa0>
			HAL_Delay(20);
 8000af2:	2014      	movs	r0, #20
 8000af4:	f002 f958 	bl	8002da8 <HAL_Delay>
			if(HAL_GPIO_ReadPin(GPIO_DOWN_PORT, GPIO_DOWN_PIN) == 0){
 8000af8:	2120      	movs	r1, #32
 8000afa:	4823      	ldr	r0, [pc, #140]	@ (8000b88 <Button+0x110>)
 8000afc:	f002 fde2 	bl	80036c4 <HAL_GPIO_ReadPin>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d108      	bne.n	8000b18 <Button+0xa0>
				while(1){
					if(HAL_GPIO_ReadPin(GPIO_DOWN_PORT, GPIO_DOWN_PIN) == 1)
 8000b06:	2120      	movs	r1, #32
 8000b08:	481f      	ldr	r0, [pc, #124]	@ (8000b88 <Button+0x110>)
 8000b0a:	f002 fddb 	bl	80036c4 <HAL_GPIO_ReadPin>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d1f8      	bne.n	8000b06 <Button+0x8e>
					return DOWN;
 8000b14:	2303      	movs	r3, #3
 8000b16:	e034      	b.n	8000b82 <Button+0x10a>
				}
			}
		}
	if(HAL_GPIO_ReadPin(GPIO_RIGHT_PORT, GPIO_RIGHT_PIN) == 0){
 8000b18:	2110      	movs	r1, #16
 8000b1a:	481b      	ldr	r0, [pc, #108]	@ (8000b88 <Button+0x110>)
 8000b1c:	f002 fdd2 	bl	80036c4 <HAL_GPIO_ReadPin>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d112      	bne.n	8000b4c <Button+0xd4>
			HAL_Delay(20);
 8000b26:	2014      	movs	r0, #20
 8000b28:	f002 f93e 	bl	8002da8 <HAL_Delay>
			if(HAL_GPIO_ReadPin(GPIO_RIGHT_PORT, GPIO_RIGHT_PIN) == 0){
 8000b2c:	2110      	movs	r1, #16
 8000b2e:	4816      	ldr	r0, [pc, #88]	@ (8000b88 <Button+0x110>)
 8000b30:	f002 fdc8 	bl	80036c4 <HAL_GPIO_ReadPin>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d108      	bne.n	8000b4c <Button+0xd4>
				while(1){
					if(HAL_GPIO_ReadPin(GPIO_RIGHT_PORT, GPIO_RIGHT_PIN) == 1)
 8000b3a:	2110      	movs	r1, #16
 8000b3c:	4812      	ldr	r0, [pc, #72]	@ (8000b88 <Button+0x110>)
 8000b3e:	f002 fdc1 	bl	80036c4 <HAL_GPIO_ReadPin>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d1f8      	bne.n	8000b3a <Button+0xc2>
					return RIGHT;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	e01a      	b.n	8000b82 <Button+0x10a>
				}
			}
		}
	if(HAL_GPIO_ReadPin(GPIO_LEFT_PORT, GPIO_LEFT_PIN) == 0){
 8000b4c:	2108      	movs	r1, #8
 8000b4e:	480e      	ldr	r0, [pc, #56]	@ (8000b88 <Button+0x110>)
 8000b50:	f002 fdb8 	bl	80036c4 <HAL_GPIO_ReadPin>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d112      	bne.n	8000b80 <Button+0x108>
			HAL_Delay(20);
 8000b5a:	2014      	movs	r0, #20
 8000b5c:	f002 f924 	bl	8002da8 <HAL_Delay>
			if(HAL_GPIO_ReadPin(GPIO_LEFT_PORT, GPIO_LEFT_PIN) == 0)
 8000b60:	2108      	movs	r1, #8
 8000b62:	4809      	ldr	r0, [pc, #36]	@ (8000b88 <Button+0x110>)
 8000b64:	f002 fdae 	bl	80036c4 <HAL_GPIO_ReadPin>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d108      	bne.n	8000b80 <Button+0x108>
				while(1){
					if(HAL_GPIO_ReadPin(GPIO_LEFT_PORT, GPIO_LEFT_PIN) == 1)
 8000b6e:	2108      	movs	r1, #8
 8000b70:	4805      	ldr	r0, [pc, #20]	@ (8000b88 <Button+0x110>)
 8000b72:	f002 fda7 	bl	80036c4 <HAL_GPIO_ReadPin>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d1f8      	bne.n	8000b6e <Button+0xf6>
					return LEFT;
 8000b7c:	2305      	movs	r3, #5
 8000b7e:	e000      	b.n	8000b82 <Button+0x10a>
				}
		}
		return 0;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40010c00 	.word	0x40010c00

08000b8c <BackGround>:


void BackGround(void){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af02      	add	r7, sp, #8
	St7735s_FillScreen(ST7735_CYAN);
 8000b92:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8000b96:	f001 fca7 	bl	80024e8 <St7735s_FillScreen>
	St7735s_WriteString(29, 5, "CO CARO 3X3", Font7x10, ST7735_RED, ST7735_BLACK);
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	9301      	str	r3, [sp, #4]
 8000b9e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <BackGround+0x3c>)
 8000ba6:	4a09      	ldr	r2, [pc, #36]	@ (8000bcc <BackGround+0x40>)
 8000ba8:	2105      	movs	r1, #5
 8000baa:	201d      	movs	r0, #29
 8000bac:	f001 fbf9 	bl	80023a2 <St7735s_WriteString>
	St7735s_FillRectangle(4, 20, BOARD_WIDTH, BOARD_HEIGHT, ST7735_YELLOW);
 8000bb0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	2378      	movs	r3, #120	@ 0x78
 8000bb8:	2278      	movs	r2, #120	@ 0x78
 8000bba:	2114      	movs	r1, #20
 8000bbc:	2004      	movs	r0, #4
 8000bbe:	f001 fc2c 	bl	800241a <St7735s_FillRectangle>
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	08005510 	.word	0x08005510
 8000bcc:	080054c0 	.word	0x080054c0

08000bd0 <DrawBoard>:

void DrawBoard(void){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af02      	add	r7, sp, #8
	St7735s_FillRectangle(4, 20, BOARD_WIDTH, BOARD_HEIGHT, ST7735_BLACK);
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	2378      	movs	r3, #120	@ 0x78
 8000bdc:	2278      	movs	r2, #120	@ 0x78
 8000bde:	2114      	movs	r1, #20
 8000be0:	2004      	movs	r0, #4
 8000be2:	f001 fc1a 	bl	800241a <St7735s_FillRectangle>
	for (int i = 0; i < N; i++){
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	e024      	b.n	8000c36 <DrawBoard+0x66>
		for (int j = 0; j < N; j++){
 8000bec:	2300      	movs	r3, #0
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	e01b      	b.n	8000c2a <DrawBoard+0x5a>
			St7735s_FillRectangle(6 + ((BOARD_WIDTH/N) *i), 22 +((BOARD_HEIGHT/N)*j) , 36, 36, ST7735_YELLOW);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	0092      	lsls	r2, r2, #2
 8000bfa:	4413      	add	r3, r2
 8000bfc:	00db      	lsls	r3, r3, #3
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	3306      	adds	r3, #6
 8000c02:	b298      	uxth	r0, r3
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	461a      	mov	r2, r3
 8000c0a:	0092      	lsls	r2, r2, #2
 8000c0c:	4413      	add	r3, r2
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	3316      	adds	r3, #22
 8000c14:	b299      	uxth	r1, r3
 8000c16:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	2324      	movs	r3, #36	@ 0x24
 8000c1e:	2224      	movs	r2, #36	@ 0x24
 8000c20:	f001 fbfb 	bl	800241a <St7735s_FillRectangle>
		for (int j = 0; j < N; j++){
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	3301      	adds	r3, #1
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	dde0      	ble.n	8000bf2 <DrawBoard+0x22>
	for (int i = 0; i < N; i++){
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3301      	adds	r3, #1
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	ddd7      	ble.n	8000bec <DrawBoard+0x1c>
		}
	}
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <CreateX>:

void CreateX(uint32_t X[]) {
 8000c48:	b480      	push	{r7}
 8000c4a:	b087      	sub	sp, #28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
    X[0] = 0xC0000003;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a1e      	ldr	r2, [pc, #120]	@ (8000ccc <CreateX+0x84>)
 8000c54:	601a      	str	r2, [r3, #0]
    uint32_t a = 0xE0000000;
 8000c56:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c5a:	617b      	str	r3, [r7, #20]
    uint32_t b = 0x00000007;
 8000c5c:	2307      	movs	r3, #7
 8000c5e:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < 16; i++) {
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	e014      	b.n	8000c90 <CreateX+0x48>
        if (i != 0) {
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d005      	beq.n	8000c78 <CreateX+0x30>
            a = a >> 1;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	085b      	lsrs	r3, r3, #1
 8000c70:	617b      	str	r3, [r7, #20]
            b = b << 1;
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	613b      	str	r3, [r7, #16]
        }
        X[i + 1] = a | b;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	6979      	ldr	r1, [r7, #20]
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	430a      	orrs	r2, r1
 8000c88:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 16; i++) {
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2b0f      	cmp	r3, #15
 8000c94:	dde7      	ble.n	8000c66 <CreateX+0x1e>
    }
    for (int i = 0; i < 16; i++) {
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	e00e      	b.n	8000cba <CreateX+0x72>
        X[31 - i] = X[i];
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	441a      	add	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	f1c3 031f 	rsb	r3, r3, #31
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	6879      	ldr	r1, [r7, #4]
 8000cae:	440b      	add	r3, r1
 8000cb0:	6812      	ldr	r2, [r2, #0]
 8000cb2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 16; i++) {
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	dded      	ble.n	8000c9c <CreateX+0x54>
    }
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	371c      	adds	r7, #28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	c0000003 	.word	0xc0000003

08000cd0 <CreateO>:

void CreateO(uint32_t O[]) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	@ 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
    uint32_t a = 0x00000007;
 8000cd8:	2307      	movs	r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
    uint32_t b = 0xE0000000;
 8000cdc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ce0:	61bb      	str	r3, [r7, #24]
    uint32_t a1;
    uint32_t a2;
    for (int i = 0; i < 32; i++) {
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ce6:	e039      	b.n	8000d5c <CreateO+0x8c>
        int c = sqrt(pow(16, 2) - pow((16 - i), 2));
 8000ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cea:	f1c3 0310 	rsb	r3, r3, #16
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fb80 	bl	80003f4 <__aeabi_i2d>
 8000cf4:	f04f 0200 	mov.w	r2, #0
 8000cf8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cfc:	f003 fca0 	bl	8004640 <pow>
 8000d00:	4602      	mov	r2, r0
 8000d02:	460b      	mov	r3, r1
 8000d04:	f04f 0000 	mov.w	r0, #0
 8000d08:	4923      	ldr	r1, [pc, #140]	@ (8000d98 <CreateO+0xc8>)
 8000d0a:	f7ff fa25 	bl	8000158 <__aeabi_dsub>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	460b      	mov	r3, r1
 8000d12:	4610      	mov	r0, r2
 8000d14:	4619      	mov	r1, r3
 8000d16:	f003 fcfb 	bl	8004710 <sqrt>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	4610      	mov	r0, r2
 8000d20:	4619      	mov	r1, r3
 8000d22:	f7ff fe81 	bl	8000a28 <__aeabi_d2iz>
 8000d26:	4603      	mov	r3, r0
 8000d28:	617b      	str	r3, [r7, #20]
        a1 = a << (16 - c);
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	f1c3 0310 	rsb	r3, r3, #16
 8000d30:	69fa      	ldr	r2, [r7, #28]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	613b      	str	r3, [r7, #16]
        a2 = b >> (16 - c);
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	f1c3 0310 	rsb	r3, r3, #16
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	fa22 f303 	lsr.w	r3, r2, r3
 8000d44:	60fb      	str	r3, [r7, #12]
        O[i] = a1 | a2;
 8000d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	6939      	ldr	r1, [r7, #16]
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	430a      	orrs	r2, r1
 8000d54:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 32; i++) {
 8000d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d58:	3301      	adds	r3, #1
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d5e:	2b1f      	cmp	r3, #31
 8000d60:	ddc2      	ble.n	8000ce8 <CreateO+0x18>
    }
    for (int i = 0; i < 16; i++) {
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
 8000d66:	e00e      	b.n	8000d86 <CreateO+0xb6>
        O[31 - i] = O[i];
 8000d68:	6a3b      	ldr	r3, [r7, #32]
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	441a      	add	r2, r3
 8000d70:	6a3b      	ldr	r3, [r7, #32]
 8000d72:	f1c3 031f 	rsb	r3, r3, #31
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	6879      	ldr	r1, [r7, #4]
 8000d7a:	440b      	add	r3, r1
 8000d7c:	6812      	ldr	r2, [r2, #0]
 8000d7e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 16; i++) {
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	3301      	adds	r3, #1
 8000d84:	623b      	str	r3, [r7, #32]
 8000d86:	6a3b      	ldr	r3, [r7, #32]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	dded      	ble.n	8000d68 <CreateO+0x98>
    }
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	@ 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40700000 	.word	0x40700000

08000d9c <DrawXO>:

void DrawXO(uint32_t X[], uint16_t x, uint16_t y, uint16_t color, uint16_t bgcolor){
 8000d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000da0:	b08b      	sub	sp, #44	@ 0x2c
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	60f8      	str	r0, [r7, #12]
 8000da6:	4608      	mov	r0, r1
 8000da8:	4611      	mov	r1, r2
 8000daa:	461a      	mov	r2, r3
 8000dac:	4603      	mov	r3, r0
 8000dae:	817b      	strh	r3, [r7, #10]
 8000db0:	460b      	mov	r3, r1
 8000db2:	813b      	strh	r3, [r7, #8]
 8000db4:	4613      	mov	r3, r2
 8000db6:	80fb      	strh	r3, [r7, #6]
    St7735s_Select();
 8000db8:	f001 f98c 	bl	80020d4 <St7735s_Select>
	uint32_t i, j;
    St7735s_SetAddressWindow(x, y, x+W-1, y+H-1);
 8000dbc:	897b      	ldrh	r3, [r7, #10]
 8000dbe:	b2d8      	uxtb	r0, r3
 8000dc0:	893b      	ldrh	r3, [r7, #8]
 8000dc2:	b2d9      	uxtb	r1, r3
 8000dc4:	897b      	ldrh	r3, [r7, #10]
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	331f      	adds	r3, #31
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	893b      	ldrh	r3, [r7, #8]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	331f      	adds	r3, #31
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	f001 fa4e 	bl	8002274 <St7735s_SetAddressWindow>
    for(i = 0; i < H; i++) {
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ddc:	e04c      	b.n	8000e78 <DrawXO+0xdc>
    	uint64_t b = X[i];
 8000dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	4413      	add	r3, r2
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2200      	movs	r2, #0
 8000dea:	469a      	mov	sl, r3
 8000dec:	4693      	mov	fp, r2
 8000dee:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        for(j = 0; j < W; j++) {
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
 8000df6:	e039      	b.n	8000e6c <DrawXO+0xd0>
            if((b << j) & 0x80000000)  {
 8000df8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000dfc:	6a39      	ldr	r1, [r7, #32]
 8000dfe:	f1a1 0620 	sub.w	r6, r1, #32
 8000e02:	f1c1 0020 	rsb	r0, r1, #32
 8000e06:	fa03 f501 	lsl.w	r5, r3, r1
 8000e0a:	fa02 f606 	lsl.w	r6, r2, r6
 8000e0e:	4335      	orrs	r5, r6
 8000e10:	fa22 f000 	lsr.w	r0, r2, r0
 8000e14:	4305      	orrs	r5, r0
 8000e16:	fa02 f401 	lsl.w	r4, r2, r1
 8000e1a:	f004 4800 	and.w	r8, r4, #2147483648	@ 0x80000000
 8000e1e:	f04f 0900 	mov.w	r9, #0
 8000e22:	ea58 0309 	orrs.w	r3, r8, r9
 8000e26:	d00e      	beq.n	8000e46 <DrawXO+0xaa>
                uint8_t data[2] = { color >> 8, color & 0xFF };
 8000e28:	88fb      	ldrh	r3, [r7, #6]
 8000e2a:	0a1b      	lsrs	r3, r3, #8
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	753b      	strb	r3, [r7, #20]
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	757b      	strb	r3, [r7, #21]
                St7735s_WriteData(data, 2);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 f9a0 	bl	8002184 <St7735s_WriteData>
 8000e44:	e00f      	b.n	8000e66 <DrawXO+0xca>
            } else {
                uint8_t data[2] = { bgcolor >> 8, bgcolor & 0xFF };
 8000e46:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8000e4a:	0a1b      	lsrs	r3, r3, #8
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	743b      	strb	r3, [r7, #16]
 8000e52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	747b      	strb	r3, [r7, #17]
                St7735s_WriteData(data, 2);
 8000e5a:	f107 0310 	add.w	r3, r7, #16
 8000e5e:	2102      	movs	r1, #2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f001 f98f 	bl	8002184 <St7735s_WriteData>
        for(j = 0; j < W; j++) {
 8000e66:	6a3b      	ldr	r3, [r7, #32]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	623b      	str	r3, [r7, #32]
 8000e6c:	6a3b      	ldr	r3, [r7, #32]
 8000e6e:	2b1f      	cmp	r3, #31
 8000e70:	d9c2      	bls.n	8000df8 <DrawXO+0x5c>
    for(i = 0; i < H; i++) {
 8000e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e74:	3301      	adds	r3, #1
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7a:	2b1f      	cmp	r3, #31
 8000e7c:	d9af      	bls.n	8000dde <DrawXO+0x42>
            }
        }
    }
    St7735s_UnSelect();
 8000e7e:	f001 f935 	bl	80020ec <St7735s_UnSelect>
}
 8000e82:	bf00      	nop
 8000e84:	372c      	adds	r7, #44	@ 0x2c
 8000e86:	46bd      	mov	sp, r7
 8000e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e8c <NewGame>:

void NewGame(Game* game){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	  CreateX(X);
 8000e94:	481a      	ldr	r0, [pc, #104]	@ (8000f00 <NewGame+0x74>)
 8000e96:	f7ff fed7 	bl	8000c48 <CreateX>
	  CreateO(O);
 8000e9a:	481a      	ldr	r0, [pc, #104]	@ (8000f04 <NewGame+0x78>)
 8000e9c:	f7ff ff18 	bl	8000cd0 <CreateO>
	  game->cur.first = 0;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	631a      	str	r2, [r3, #48]	@ 0x30
	  game->cur.second = 0;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	635a      	str	r2, [r3, #52]	@ 0x34
	  for(int i = 0; i < N; i++){
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	e015      	b.n	8000ede <NewGame+0x52>
		  for(int j = 0; j < N; j++){
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	e00c      	b.n	8000ed2 <NewGame+0x46>
			  game->board[i][j] = 0;
 8000eb8:	6879      	ldr	r1, [r7, #4]
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for(int j = 0; j < N; j++){
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	ddef      	ble.n	8000eb8 <NewGame+0x2c>
	  for(int i = 0; i < N; i++){
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	3301      	adds	r3, #1
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	dde6      	ble.n	8000eb2 <NewGame+0x26>
		  }
	  }
	  game->state = MENU;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	629a      	str	r2, [r3, #40]	@ 0x28
	  game->player = MENU;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2204      	movs	r2, #4
 8000eee:	625a      	str	r2, [r3, #36]	@ 0x24
	  game->mode = MENU;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000168 	.word	0x20000168
 8000f04:	200001e8 	.word	0x200001e8

08000f08 <GameMenu>:

void GameMenu(void){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af02      	add	r7, sp, #8
	BackGround();
 8000f0e:	f7ff fe3d 	bl	8000b8c <BackGround>
	St7735s_WriteString(36, 40, "Hai nguoi", Font7x10, ST7735_RED, ST7735_WHITE);
 8000f12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f16:	9301      	str	r3, [sp, #4]
 8000f18:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <GameMenu+0x40>)
 8000f20:	4a0a      	ldr	r2, [pc, #40]	@ (8000f4c <GameMenu+0x44>)
 8000f22:	2128      	movs	r1, #40	@ 0x28
 8000f24:	2024      	movs	r0, #36	@ 0x24
 8000f26:	f001 fa3c 	bl	80023a2 <St7735s_WriteString>
	St7735s_WriteString(36, 90, "Mot nguoi", Font7x10, ST7735_RED, ST7735_BLACK);
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	4b04      	ldr	r3, [pc, #16]	@ (8000f48 <GameMenu+0x40>)
 8000f36:	4a06      	ldr	r2, [pc, #24]	@ (8000f50 <GameMenu+0x48>)
 8000f38:	215a      	movs	r1, #90	@ 0x5a
 8000f3a:	2024      	movs	r0, #36	@ 0x24
 8000f3c:	f001 fa31 	bl	80023a2 <St7735s_WriteString>
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	08005510 	.word	0x08005510
 8000f4c:	080054cc 	.word	0x080054cc
 8000f50:	080054d8 	.word	0x080054d8

08000f54 <MoveCur>:

void MoveCur(Game* game, int button){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
	St7735s_FillRectangle(6 + ((BOARD_WIDTH/N) * game->cur.first),
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	461a      	mov	r2, r3
 8000f66:	0092      	lsls	r2, r2, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	3306      	adds	r3, #6
 8000f70:	b298      	uxth	r0, r3
	22 + ((BOARD_HEIGHT/N) * game->cur.second), 36, 36, ST7735_YELLOW);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
	St7735s_FillRectangle(6 + ((BOARD_WIDTH/N) * game->cur.first),
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	461a      	mov	r2, r3
 8000f7a:	0092      	lsls	r2, r2, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	3316      	adds	r3, #22
 8000f84:	b299      	uxth	r1, r3
 8000f86:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2324      	movs	r3, #36	@ 0x24
 8000f8e:	2224      	movs	r2, #36	@ 0x24
 8000f90:	f001 fa43 	bl	800241a <St7735s_FillRectangle>
	switch(button){
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	3b02      	subs	r3, #2
 8000f98:	2b03      	cmp	r3, #3
 8000f9a:	f200 8331 	bhi.w	8001600 <MoveCur+0x6ac>
 8000f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8000fa4 <MoveCur+0x50>)
 8000fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa4:	08000fb5 	.word	0x08000fb5
 8000fa8:	08001141 	.word	0x08001141
 8000fac:	080012d5 	.word	0x080012d5
 8000fb0:	08001461 	.word	0x08001461
	case UP:
		if(game->board[game->cur.first][game->cur.second] == _X)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4403      	add	r3, r0
 8000fc6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d11c      	bne.n	8001008 <MoveCur+0xb4>
			DrawXO(X, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	0092      	lsls	r2, r2, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	3308      	adds	r3, #8
 8000fe0:	b299      	uxth	r1, r3
			24 +((BOARD_HEIGHT/N) * game->cur.second), ST7735_RED, ST7735_YELLOW);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
			DrawXO(X, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	461a      	mov	r2, r3
 8000fea:	0092      	lsls	r2, r2, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	3318      	adds	r3, #24
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001000:	489d      	ldr	r0, [pc, #628]	@ (8001278 <MoveCur+0x324>)
 8001002:	f7ff fecb 	bl	8000d9c <DrawXO>
 8001006:	e027      	b.n	8001058 <MoveCur+0x104>
		else if(game->board[game->cur.first][game->cur.second] == _O)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4413      	add	r3, r2
 8001018:	4403      	add	r3, r0
 800101a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800101e:	2b02      	cmp	r3, #2
 8001020:	d11a      	bne.n	8001058 <MoveCur+0x104>
			DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	b29b      	uxth	r3, r3
 8001028:	461a      	mov	r2, r3
 800102a:	0092      	lsls	r2, r2, #2
 800102c:	4413      	add	r3, r2
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	b29b      	uxth	r3, r3
 8001032:	3308      	adds	r3, #8
 8001034:	b299      	uxth	r1, r3
			24 +((BOARD_HEIGHT/N) * game->cur.second), ST7735_BLUE, ST7735_YELLOW);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
			DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 800103a:	b29b      	uxth	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	0092      	lsls	r2, r2, #2
 8001040:	4413      	add	r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	b29b      	uxth	r3, r3
 8001046:	3318      	adds	r3, #24
 8001048:	b29a      	uxth	r2, r3
 800104a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	231f      	movs	r3, #31
 8001052:	488a      	ldr	r0, [pc, #552]	@ (800127c <MoveCur+0x328>)
 8001054:	f7ff fea2 	bl	8000d9c <DrawXO>
		game->cur.second = game->cur.second - 1;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800105c:	1e5a      	subs	r2, r3, #1
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	635a      	str	r2, [r3, #52]	@ 0x34
		St7735s_FillRectangle(6 + ((BOARD_WIDTH/N) * game->cur.first),
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	b29b      	uxth	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	0092      	lsls	r2, r2, #2
 800106c:	4413      	add	r3, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	b29b      	uxth	r3, r3
 8001072:	3306      	adds	r3, #6
 8001074:	b298      	uxth	r0, r3
		22 + ((BOARD_HEIGHT/N) * game->cur.second), 36, 36, ST7735_WHITE);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
		St7735s_FillRectangle(6 + ((BOARD_WIDTH/N) * game->cur.first),
 800107a:	b29b      	uxth	r3, r3
 800107c:	461a      	mov	r2, r3
 800107e:	0092      	lsls	r2, r2, #2
 8001080:	4413      	add	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	b29b      	uxth	r3, r3
 8001086:	3316      	adds	r3, #22
 8001088:	b299      	uxth	r1, r3
 800108a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2324      	movs	r3, #36	@ 0x24
 8001092:	2224      	movs	r2, #36	@ 0x24
 8001094:	f001 f9c1 	bl	800241a <St7735s_FillRectangle>
		if(game->board[game->cur.first][game->cur.second] == _X)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	4403      	add	r3, r0
 80010aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d11c      	bne.n	80010ec <MoveCur+0x198>
			DrawXO(X, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	461a      	mov	r2, r3
 80010ba:	0092      	lsls	r2, r2, #2
 80010bc:	4413      	add	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	3308      	adds	r3, #8
 80010c4:	b299      	uxth	r1, r3
			24 +((BOARD_HEIGHT/N) * game->cur.second), ST7735_RED, ST7735_WHITE);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
			DrawXO(X, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	461a      	mov	r2, r3
 80010ce:	0092      	lsls	r2, r2, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	3318      	adds	r3, #24
 80010d8:	b29a      	uxth	r2, r3
 80010da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80010e4:	4864      	ldr	r0, [pc, #400]	@ (8001278 <MoveCur+0x324>)
 80010e6:	f7ff fe59 	bl	8000d9c <DrawXO>
		else if(game->board[game->cur.first][game->cur.second] == _O)
			DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->cur.first),
			24 +((BOARD_HEIGHT/N) * game->cur.second), ST7735_BLUE, ST7735_WHITE);
		break;
 80010ea:	e282      	b.n	80015f2 <MoveCur+0x69e>
		else if(game->board[game->cur.first][game->cur.second] == _O)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4413      	add	r3, r2
 80010fc:	4403      	add	r3, r0
 80010fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001102:	2b02      	cmp	r3, #2
 8001104:	f040 8275 	bne.w	80015f2 <MoveCur+0x69e>
			DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110c:	b29b      	uxth	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	0092      	lsls	r2, r2, #2
 8001112:	4413      	add	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	b29b      	uxth	r3, r3
 8001118:	3308      	adds	r3, #8
 800111a:	b299      	uxth	r1, r3
			24 +((BOARD_HEIGHT/N) * game->cur.second), ST7735_BLUE, ST7735_WHITE);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
			DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 8001120:	b29b      	uxth	r3, r3
 8001122:	461a      	mov	r2, r3
 8001124:	0092      	lsls	r2, r2, #2
 8001126:	4413      	add	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	b29b      	uxth	r3, r3
 800112c:	3318      	adds	r3, #24
 800112e:	b29a      	uxth	r2, r3
 8001130:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	231f      	movs	r3, #31
 8001138:	4850      	ldr	r0, [pc, #320]	@ (800127c <MoveCur+0x328>)
 800113a:	f7ff fe2f 	bl	8000d9c <DrawXO>
		break;
 800113e:	e258      	b.n	80015f2 <MoveCur+0x69e>
	case DOWN:
		if(game->board[game->cur.first][game->cur.second] == _X)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	4613      	mov	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4413      	add	r3, r2
 8001150:	4403      	add	r3, r0
 8001152:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d11c      	bne.n	8001194 <MoveCur+0x240>
			DrawXO(X, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	b29b      	uxth	r3, r3
 8001160:	461a      	mov	r2, r3
 8001162:	0092      	lsls	r2, r2, #2
 8001164:	4413      	add	r3, r2
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	b29b      	uxth	r3, r3
 800116a:	3308      	adds	r3, #8
 800116c:	b299      	uxth	r1, r3
			24 +((BOARD_HEIGHT/N) * game->cur.second), ST7735_RED, ST7735_YELLOW);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
			DrawXO(X, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 8001172:	b29b      	uxth	r3, r3
 8001174:	461a      	mov	r2, r3
 8001176:	0092      	lsls	r2, r2, #2
 8001178:	4413      	add	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	b29b      	uxth	r3, r3
 800117e:	3318      	adds	r3, #24
 8001180:	b29a      	uxth	r2, r3
 8001182:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800118c:	483a      	ldr	r0, [pc, #232]	@ (8001278 <MoveCur+0x324>)
 800118e:	f7ff fe05 	bl	8000d9c <DrawXO>
 8001192:	e027      	b.n	80011e4 <MoveCur+0x290>
		else if(game->board[game->cur.first][game->cur.second] == _O)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	4403      	add	r3, r0
 80011a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d11a      	bne.n	80011e4 <MoveCur+0x290>
			DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	461a      	mov	r2, r3
 80011b6:	0092      	lsls	r2, r2, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	b29b      	uxth	r3, r3
 80011be:	3308      	adds	r3, #8
 80011c0:	b299      	uxth	r1, r3
			24 +((BOARD_HEIGHT/N) * game->cur.second), ST7735_BLUE, ST7735_YELLOW);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
			DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	461a      	mov	r2, r3
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	3318      	adds	r3, #24
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	231f      	movs	r3, #31
 80011de:	4827      	ldr	r0, [pc, #156]	@ (800127c <MoveCur+0x328>)
 80011e0:	f7ff fddc 	bl	8000d9c <DrawXO>
		game->cur.second = game->cur.second + 1;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011e8:	1c5a      	adds	r2, r3, #1
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	635a      	str	r2, [r3, #52]	@ 0x34
		St7735s_FillRectangle(6 + ((BOARD_WIDTH/N) * game->cur.first),
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	461a      	mov	r2, r3
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	3306      	adds	r3, #6
 8001200:	b298      	uxth	r0, r3
		22 + ((BOARD_HEIGHT/N) * game->cur.second), 36, 36, ST7735_WHITE);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
		St7735s_FillRectangle(6 + ((BOARD_WIDTH/N) * game->cur.first),
 8001206:	b29b      	uxth	r3, r3
 8001208:	461a      	mov	r2, r3
 800120a:	0092      	lsls	r2, r2, #2
 800120c:	4413      	add	r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	b29b      	uxth	r3, r3
 8001212:	3316      	adds	r3, #22
 8001214:	b299      	uxth	r1, r3
 8001216:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2324      	movs	r3, #36	@ 0x24
 800121e:	2224      	movs	r2, #36	@ 0x24
 8001220:	f001 f8fb 	bl	800241a <St7735s_FillRectangle>
		if(game->board[game->cur.first][game->cur.second] == _X)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800122c:	6879      	ldr	r1, [r7, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	4403      	add	r3, r0
 8001236:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d120      	bne.n	8001280 <MoveCur+0x32c>
			DrawXO(X, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	b29b      	uxth	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	0092      	lsls	r2, r2, #2
 8001248:	4413      	add	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	b29b      	uxth	r3, r3
 800124e:	3308      	adds	r3, #8
 8001250:	b299      	uxth	r1, r3
			24 +((BOARD_HEIGHT/N) * game->cur.second), ST7735_RED, ST7735_WHITE);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
			DrawXO(X, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 8001256:	b29b      	uxth	r3, r3
 8001258:	461a      	mov	r2, r3
 800125a:	0092      	lsls	r2, r2, #2
 800125c:	4413      	add	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	b29b      	uxth	r3, r3
 8001262:	3318      	adds	r3, #24
 8001264:	b29a      	uxth	r2, r3
 8001266:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001270:	4801      	ldr	r0, [pc, #4]	@ (8001278 <MoveCur+0x324>)
 8001272:	f7ff fd93 	bl	8000d9c <DrawXO>
		else if(game->board[game->cur.first][game->cur.second] == _O)
			DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->cur.first),
			24 +((BOARD_HEIGHT/N) * game->cur.second), ST7735_BLUE, ST7735_WHITE);
		break;
 8001276:	e1be      	b.n	80015f6 <MoveCur+0x6a2>
 8001278:	20000168 	.word	0x20000168
 800127c:	200001e8 	.word	0x200001e8
		else if(game->board[game->cur.first][game->cur.second] == _O)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
 8001290:	4403      	add	r3, r0
 8001292:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001296:	2b02      	cmp	r3, #2
 8001298:	f040 81ad 	bne.w	80015f6 <MoveCur+0x6a2>
			DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	461a      	mov	r2, r3
 80012a4:	0092      	lsls	r2, r2, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	3308      	adds	r3, #8
 80012ae:	b299      	uxth	r1, r3
			24 +((BOARD_HEIGHT/N) * game->cur.second), ST7735_BLUE, ST7735_WHITE);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
			DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	461a      	mov	r2, r3
 80012b8:	0092      	lsls	r2, r2, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	b29b      	uxth	r3, r3
 80012c0:	3318      	adds	r3, #24
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	231f      	movs	r3, #31
 80012cc:	4879      	ldr	r0, [pc, #484]	@ (80014b4 <MoveCur+0x560>)
 80012ce:	f7ff fd65 	bl	8000d9c <DrawXO>
		break;
 80012d2:	e190      	b.n	80015f6 <MoveCur+0x6a2>
	case RIGHT:
		if(game->board[game->cur.first][game->cur.second] == _X)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	4403      	add	r3, r0
 80012e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d11c      	bne.n	8001328 <MoveCur+0x3d4>
			DrawXO(X, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	461a      	mov	r2, r3
 80012f6:	0092      	lsls	r2, r2, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	3308      	adds	r3, #8
 8001300:	b299      	uxth	r1, r3
			24 +((BOARD_HEIGHT/N) * game->cur.second), ST7735_RED, ST7735_YELLOW);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
			DrawXO(X, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 8001306:	b29b      	uxth	r3, r3
 8001308:	461a      	mov	r2, r3
 800130a:	0092      	lsls	r2, r2, #2
 800130c:	4413      	add	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	b29b      	uxth	r3, r3
 8001312:	3318      	adds	r3, #24
 8001314:	b29a      	uxth	r2, r3
 8001316:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001320:	4865      	ldr	r0, [pc, #404]	@ (80014b8 <MoveCur+0x564>)
 8001322:	f7ff fd3b 	bl	8000d9c <DrawXO>
 8001326:	e027      	b.n	8001378 <MoveCur+0x424>
		else if(game->board[game->cur.first][game->cur.second] == _O)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	4403      	add	r3, r0
 800133a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d11a      	bne.n	8001378 <MoveCur+0x424>
			DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	b29b      	uxth	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	0092      	lsls	r2, r2, #2
 800134c:	4413      	add	r3, r2
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	b29b      	uxth	r3, r3
 8001352:	3308      	adds	r3, #8
 8001354:	b299      	uxth	r1, r3
			24 +((BOARD_HEIGHT/N) * game->cur.second), ST7735_BLUE, ST7735_YELLOW);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
			DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 800135a:	b29b      	uxth	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	0092      	lsls	r2, r2, #2
 8001360:	4413      	add	r3, r2
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	b29b      	uxth	r3, r3
 8001366:	3318      	adds	r3, #24
 8001368:	b29a      	uxth	r2, r3
 800136a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	231f      	movs	r3, #31
 8001372:	4850      	ldr	r0, [pc, #320]	@ (80014b4 <MoveCur+0x560>)
 8001374:	f7ff fd12 	bl	8000d9c <DrawXO>
		game->cur.first = game->cur.first + 1;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	631a      	str	r2, [r3, #48]	@ 0x30
		St7735s_FillRectangle(6 + ((BOARD_WIDTH/N) * game->cur.first),
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	b29b      	uxth	r3, r3
 8001388:	461a      	mov	r2, r3
 800138a:	0092      	lsls	r2, r2, #2
 800138c:	4413      	add	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	b29b      	uxth	r3, r3
 8001392:	3306      	adds	r3, #6
 8001394:	b298      	uxth	r0, r3
		22 + ((BOARD_HEIGHT/N) * game->cur.second), 36, 36, ST7735_WHITE);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
		St7735s_FillRectangle(6 + ((BOARD_WIDTH/N) * game->cur.first),
 800139a:	b29b      	uxth	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	0092      	lsls	r2, r2, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	3316      	adds	r3, #22
 80013a8:	b299      	uxth	r1, r3
 80013aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2324      	movs	r3, #36	@ 0x24
 80013b2:	2224      	movs	r2, #36	@ 0x24
 80013b4:	f001 f831 	bl	800241a <St7735s_FillRectangle>
		if(game->board[game->cur.first][game->cur.second] == _X)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	4613      	mov	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4413      	add	r3, r2
 80013c8:	4403      	add	r3, r0
 80013ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d11c      	bne.n	800140c <MoveCur+0x4b8>
			DrawXO(X, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	0092      	lsls	r2, r2, #2
 80013dc:	4413      	add	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	3308      	adds	r3, #8
 80013e4:	b299      	uxth	r1, r3
			24 +((BOARD_HEIGHT/N) * game->cur.second), ST7735_RED, ST7735_WHITE);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
			DrawXO(X, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	461a      	mov	r2, r3
 80013ee:	0092      	lsls	r2, r2, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	3318      	adds	r3, #24
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001404:	482c      	ldr	r0, [pc, #176]	@ (80014b8 <MoveCur+0x564>)
 8001406:	f7ff fcc9 	bl	8000d9c <DrawXO>
		else if(game->board[game->cur.first][game->cur.second] == _O)
			DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->cur.first),
			24 +((BOARD_HEIGHT/N) * game->cur.second), ST7735_BLUE, ST7735_WHITE);
		break;
 800140a:	e0f6      	b.n	80015fa <MoveCur+0x6a6>
		else if(game->board[game->cur.first][game->cur.second] == _O)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4413      	add	r3, r2
 800141c:	4403      	add	r3, r0
 800141e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001422:	2b02      	cmp	r3, #2
 8001424:	f040 80e9 	bne.w	80015fa <MoveCur+0x6a6>
			DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142c:	b29b      	uxth	r3, r3
 800142e:	461a      	mov	r2, r3
 8001430:	0092      	lsls	r2, r2, #2
 8001432:	4413      	add	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	b29b      	uxth	r3, r3
 8001438:	3308      	adds	r3, #8
 800143a:	b299      	uxth	r1, r3
			24 +((BOARD_HEIGHT/N) * game->cur.second), ST7735_BLUE, ST7735_WHITE);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
			DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 8001440:	b29b      	uxth	r3, r3
 8001442:	461a      	mov	r2, r3
 8001444:	0092      	lsls	r2, r2, #2
 8001446:	4413      	add	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	b29b      	uxth	r3, r3
 800144c:	3318      	adds	r3, #24
 800144e:	b29a      	uxth	r2, r3
 8001450:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	231f      	movs	r3, #31
 8001458:	4816      	ldr	r0, [pc, #88]	@ (80014b4 <MoveCur+0x560>)
 800145a:	f7ff fc9f 	bl	8000d9c <DrawXO>
		break;
 800145e:	e0cc      	b.n	80015fa <MoveCur+0x6a6>
	case LEFT:
		if(game->board[game->cur.first][game->cur.second] == _X)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4413      	add	r3, r2
 8001470:	4403      	add	r3, r0
 8001472:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d120      	bne.n	80014bc <MoveCur+0x568>
			DrawXO(X, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	b29b      	uxth	r3, r3
 8001480:	461a      	mov	r2, r3
 8001482:	0092      	lsls	r2, r2, #2
 8001484:	4413      	add	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	b29b      	uxth	r3, r3
 800148a:	3308      	adds	r3, #8
 800148c:	b299      	uxth	r1, r3
			24 +((BOARD_HEIGHT/N) * game->cur.second), ST7735_RED, ST7735_YELLOW);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
			DrawXO(X, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 8001492:	b29b      	uxth	r3, r3
 8001494:	461a      	mov	r2, r3
 8001496:	0092      	lsls	r2, r2, #2
 8001498:	4413      	add	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	b29b      	uxth	r3, r3
 800149e:	3318      	adds	r3, #24
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80014ac:	4802      	ldr	r0, [pc, #8]	@ (80014b8 <MoveCur+0x564>)
 80014ae:	f7ff fc75 	bl	8000d9c <DrawXO>
 80014b2:	e02b      	b.n	800150c <MoveCur+0x5b8>
 80014b4:	200001e8 	.word	0x200001e8
 80014b8:	20000168 	.word	0x20000168
		else if(game->board[game->cur.first][game->cur.second] == _O)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	4413      	add	r3, r2
 80014cc:	4403      	add	r3, r0
 80014ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d11a      	bne.n	800150c <MoveCur+0x5b8>
			DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	b29b      	uxth	r3, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	3308      	adds	r3, #8
 80014e8:	b299      	uxth	r1, r3
			24 +((BOARD_HEIGHT/N) * game->cur.second), ST7735_BLUE, ST7735_YELLOW);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
			DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	461a      	mov	r2, r3
 80014f2:	0092      	lsls	r2, r2, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	3318      	adds	r3, #24
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	231f      	movs	r3, #31
 8001506:	4840      	ldr	r0, [pc, #256]	@ (8001608 <MoveCur+0x6b4>)
 8001508:	f7ff fc48 	bl	8000d9c <DrawXO>
		game->cur.first = game->cur.first - 1;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001510:	1e5a      	subs	r2, r3, #1
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	631a      	str	r2, [r3, #48]	@ 0x30
		St7735s_FillRectangle(6 + ((BOARD_WIDTH/N) * game->cur.first),
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	b29b      	uxth	r3, r3
 800151c:	461a      	mov	r2, r3
 800151e:	0092      	lsls	r2, r2, #2
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	b29b      	uxth	r3, r3
 8001526:	3306      	adds	r3, #6
 8001528:	b298      	uxth	r0, r3
		22 + ((BOARD_HEIGHT/N) * game->cur.second), 36, 36, ST7735_WHITE);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
		St7735s_FillRectangle(6 + ((BOARD_WIDTH/N) * game->cur.first),
 800152e:	b29b      	uxth	r3, r3
 8001530:	461a      	mov	r2, r3
 8001532:	0092      	lsls	r2, r2, #2
 8001534:	4413      	add	r3, r2
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	b29b      	uxth	r3, r3
 800153a:	3316      	adds	r3, #22
 800153c:	b299      	uxth	r1, r3
 800153e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2324      	movs	r3, #36	@ 0x24
 8001546:	2224      	movs	r2, #36	@ 0x24
 8001548:	f000 ff67 	bl	800241a <St7735s_FillRectangle>
		if(game->board[game->cur.first][game->cur.second] == _X)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	4613      	mov	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	4403      	add	r3, r0
 800155e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d11c      	bne.n	80015a0 <MoveCur+0x64c>
			DrawXO(X, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	b29b      	uxth	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	0092      	lsls	r2, r2, #2
 8001570:	4413      	add	r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	b29b      	uxth	r3, r3
 8001576:	3308      	adds	r3, #8
 8001578:	b299      	uxth	r1, r3
			24 +((BOARD_HEIGHT/N) * game->cur.second), ST7735_RED, ST7735_WHITE);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
			DrawXO(X, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 800157e:	b29b      	uxth	r3, r3
 8001580:	461a      	mov	r2, r3
 8001582:	0092      	lsls	r2, r2, #2
 8001584:	4413      	add	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	b29b      	uxth	r3, r3
 800158a:	3318      	adds	r3, #24
 800158c:	b29a      	uxth	r2, r3
 800158e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001598:	481c      	ldr	r0, [pc, #112]	@ (800160c <MoveCur+0x6b8>)
 800159a:	f7ff fbff 	bl	8000d9c <DrawXO>
		else if(game->board[game->cur.first][game->cur.second] == _O)
			DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->cur.first),
			24 +((BOARD_HEIGHT/N) * game->cur.second), ST7735_BLUE, ST7735_WHITE);
		break;
 800159e:	e02e      	b.n	80015fe <MoveCur+0x6aa>
		else if(game->board[game->cur.first][game->cur.second] == _O)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	4403      	add	r3, r0
 80015b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d121      	bne.n	80015fe <MoveCur+0x6aa>
			DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	b29b      	uxth	r3, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	0092      	lsls	r2, r2, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	3308      	adds	r3, #8
 80015cc:	b299      	uxth	r1, r3
			24 +((BOARD_HEIGHT/N) * game->cur.second), ST7735_BLUE, ST7735_WHITE);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
			DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->cur.first),
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	461a      	mov	r2, r3
 80015d6:	0092      	lsls	r2, r2, #2
 80015d8:	4413      	add	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	b29b      	uxth	r3, r3
 80015de:	3318      	adds	r3, #24
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	231f      	movs	r3, #31
 80015ea:	4807      	ldr	r0, [pc, #28]	@ (8001608 <MoveCur+0x6b4>)
 80015ec:	f7ff fbd6 	bl	8000d9c <DrawXO>
		break;
 80015f0:	e005      	b.n	80015fe <MoveCur+0x6aa>
		break;
 80015f2:	bf00      	nop
 80015f4:	e004      	b.n	8001600 <MoveCur+0x6ac>
		break;
 80015f6:	bf00      	nop
 80015f8:	e002      	b.n	8001600 <MoveCur+0x6ac>
		break;
 80015fa:	bf00      	nop
 80015fc:	e000      	b.n	8001600 <MoveCur+0x6ac>
		break;
 80015fe:	bf00      	nop
	default :{}
	}
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200001e8 	.word	0x200001e8
 800160c:	20000168 	.word	0x20000168

08001610 <CheckWin>:

int CheckWin(int board[N][N], pair* cur){
 8001610:	b580      	push	{r7, lr}
 8001612:	b08c      	sub	sp, #48	@ 0x30
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
	// ngang
	int count = 1;
 800161a:	2301      	movs	r3, #1
 800161c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int i = cur->second - 1; i >= 0; i--) {
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001626:	e022      	b.n	800166e <CheckWin+0x5e>
		if (board[cur->first][i] == board[cur->first][cur->second]) count++;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4613      	mov	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	461a      	mov	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4413      	add	r3, r2
 800163c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800163e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4619      	mov	r1, r3
 8001648:	460b      	mov	r3, r1
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	440b      	add	r3, r1
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4619      	mov	r1, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	440b      	add	r3, r1
 8001656:	6839      	ldr	r1, [r7, #0]
 8001658:	6849      	ldr	r1, [r1, #4]
 800165a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800165e:	429a      	cmp	r2, r3
 8001660:	d109      	bne.n	8001676 <CheckWin+0x66>
 8001662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001664:	3301      	adds	r3, #1
 8001666:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int i = cur->second - 1; i >= 0; i--) {
 8001668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800166a:	3b01      	subs	r3, #1
 800166c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800166e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001670:	2b00      	cmp	r3, #0
 8001672:	dad9      	bge.n	8001628 <CheckWin+0x18>
 8001674:	e000      	b.n	8001678 <CheckWin+0x68>
		else
			break;
 8001676:	bf00      	nop
	}
	for (int i = cur->second + 1; i < N; i++) {
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	3301      	adds	r3, #1
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001680:	e022      	b.n	80016c8 <CheckWin+0xb8>
		if (board[cur->first][i] == board[cur->first][cur->second]) count++;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	4613      	mov	r3, r2
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	461a      	mov	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001698:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4619      	mov	r1, r3
 80016a2:	460b      	mov	r3, r1
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	440b      	add	r3, r1
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4619      	mov	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	440b      	add	r3, r1
 80016b0:	6839      	ldr	r1, [r7, #0]
 80016b2:	6849      	ldr	r1, [r1, #4]
 80016b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d109      	bne.n	80016d0 <CheckWin+0xc0>
 80016bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016be:	3301      	adds	r3, #1
 80016c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int i = cur->second + 1; i < N; i++) {
 80016c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c4:	3301      	adds	r3, #1
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80016c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	ddd9      	ble.n	8001682 <CheckWin+0x72>
 80016ce:	e000      	b.n	80016d2 <CheckWin+0xc2>
		else
			break;
 80016d0:	bf00      	nop
	}
	if (count == 3) return board[cur->first][cur->second];
 80016d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d10e      	bne.n	80016f6 <CheckWin+0xe6>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4613      	mov	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	461a      	mov	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4413      	add	r3, r2
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	6852      	ldr	r2, [r2, #4]
 80016f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f4:	e18b      	b.n	8001a0e <CheckWin+0x3fe>
	// doc
	count = 1;
 80016f6:	2301      	movs	r3, #1
 80016f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int i = cur->first - 1; i >= 0; i--) {
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3b01      	subs	r3, #1
 8001700:	623b      	str	r3, [r7, #32]
 8001702:	e021      	b.n	8001748 <CheckWin+0x138>
		if (board[i][cur->second] == board[cur->first][cur->second]) count++;
 8001704:	6a3a      	ldr	r2, [r7, #32]
 8001706:	4613      	mov	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	461a      	mov	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4413      	add	r3, r2
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	6852      	ldr	r2, [r2, #4]
 8001718:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4619      	mov	r1, r3
 8001722:	460b      	mov	r3, r1
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	440b      	add	r3, r1
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4619      	mov	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	440b      	add	r3, r1
 8001730:	6839      	ldr	r1, [r7, #0]
 8001732:	6849      	ldr	r1, [r1, #4]
 8001734:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001738:	429a      	cmp	r2, r3
 800173a:	d109      	bne.n	8001750 <CheckWin+0x140>
 800173c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800173e:	3301      	adds	r3, #1
 8001740:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int i = cur->first - 1; i >= 0; i--) {
 8001742:	6a3b      	ldr	r3, [r7, #32]
 8001744:	3b01      	subs	r3, #1
 8001746:	623b      	str	r3, [r7, #32]
 8001748:	6a3b      	ldr	r3, [r7, #32]
 800174a:	2b00      	cmp	r3, #0
 800174c:	dada      	bge.n	8001704 <CheckWin+0xf4>
 800174e:	e000      	b.n	8001752 <CheckWin+0x142>
		else
			break;
 8001750:	bf00      	nop
	}
	for (int i = cur->first + 1; i < N; i++) {
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	3301      	adds	r3, #1
 8001758:	61fb      	str	r3, [r7, #28]
 800175a:	e021      	b.n	80017a0 <CheckWin+0x190>
		if (board[i][cur->second] == board[cur->first][cur->second]) count++;
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	4613      	mov	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	461a      	mov	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4413      	add	r3, r2
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	6852      	ldr	r2, [r2, #4]
 8001770:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	460b      	mov	r3, r1
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	440b      	add	r3, r1
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4619      	mov	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	440b      	add	r3, r1
 8001788:	6839      	ldr	r1, [r7, #0]
 800178a:	6849      	ldr	r1, [r1, #4]
 800178c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001790:	429a      	cmp	r2, r3
 8001792:	d109      	bne.n	80017a8 <CheckWin+0x198>
 8001794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001796:	3301      	adds	r3, #1
 8001798:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int i = cur->first + 1; i < N; i++) {
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3301      	adds	r3, #1
 800179e:	61fb      	str	r3, [r7, #28]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	ddda      	ble.n	800175c <CheckWin+0x14c>
 80017a6:	e000      	b.n	80017aa <CheckWin+0x19a>
		else
			break;
 80017a8:	bf00      	nop
	}
	if (count == 3) return board[cur->first][cur->second];
 80017aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d10e      	bne.n	80017ce <CheckWin+0x1be>
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	4613      	mov	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	461a      	mov	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4413      	add	r3, r2
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	6852      	ldr	r2, [r2, #4]
 80017c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017cc:	e11f      	b.n	8001a0e <CheckWin+0x3fe>
	// cheo
	count = 1;
 80017ce:	2301      	movs	r3, #1
 80017d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int i = cur->second - 1; i >= 0; i--) {
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	61bb      	str	r3, [r7, #24]
 80017da:	e030      	b.n	800183e <CheckWin+0x22e>
		if (cur->first - (cur->second - i) < 0) break;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	6859      	ldr	r1, [r3, #4]
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	1acb      	subs	r3, r1, r3
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db2b      	blt.n	8001846 <CheckWin+0x236>
		if (board[cur->first - (cur->second - i)][i] == board[cur->first][cur->second]) count++;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	6859      	ldr	r1, [r3, #4]
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	1acb      	subs	r3, r1, r3
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	4613      	mov	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4413      	add	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	461a      	mov	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4413      	add	r3, r2
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4619      	mov	r1, r3
 8001818:	460b      	mov	r3, r1
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	440b      	add	r3, r1
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4619      	mov	r1, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	440b      	add	r3, r1
 8001826:	6839      	ldr	r1, [r7, #0]
 8001828:	6849      	ldr	r1, [r1, #4]
 800182a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800182e:	429a      	cmp	r2, r3
 8001830:	d10b      	bne.n	800184a <CheckWin+0x23a>
 8001832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001834:	3301      	adds	r3, #1
 8001836:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int i = cur->second - 1; i >= 0; i--) {
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	3b01      	subs	r3, #1
 800183c:	61bb      	str	r3, [r7, #24]
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	2b00      	cmp	r3, #0
 8001842:	dacb      	bge.n	80017dc <CheckWin+0x1cc>
 8001844:	e002      	b.n	800184c <CheckWin+0x23c>
		if (cur->first - (cur->second - i) < 0) break;
 8001846:	bf00      	nop
 8001848:	e000      	b.n	800184c <CheckWin+0x23c>
		else break;
 800184a:	bf00      	nop
	}
	for (int i = cur->second + 1; i < N; i++) {
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	3301      	adds	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	e030      	b.n	80018b8 <CheckWin+0x2a8>
		if (cur->first + (i - cur->second) >= N) break;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	6979      	ldr	r1, [r7, #20]
 8001860:	1acb      	subs	r3, r1, r3
 8001862:	4413      	add	r3, r2
 8001864:	2b02      	cmp	r3, #2
 8001866:	dc2b      	bgt.n	80018c0 <CheckWin+0x2b0>
		if (board[cur->first + (i - cur->second)][i] == board[cur->first][cur->second]) count++;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	6979      	ldr	r1, [r7, #20]
 8001872:	1acb      	subs	r3, r1, r3
 8001874:	4413      	add	r3, r2
 8001876:	461a      	mov	r2, r3
 8001878:	4613      	mov	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	461a      	mov	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	460b      	mov	r3, r1
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	440b      	add	r3, r1
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4619      	mov	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	440b      	add	r3, r1
 80018a0:	6839      	ldr	r1, [r7, #0]
 80018a2:	6849      	ldr	r1, [r1, #4]
 80018a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d10b      	bne.n	80018c4 <CheckWin+0x2b4>
 80018ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ae:	3301      	adds	r3, #1
 80018b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int i = cur->second + 1; i < N; i++) {
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3301      	adds	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	ddcb      	ble.n	8001856 <CheckWin+0x246>
 80018be:	e002      	b.n	80018c6 <CheckWin+0x2b6>
		if (cur->first + (i - cur->second) >= N) break;
 80018c0:	bf00      	nop
 80018c2:	e000      	b.n	80018c6 <CheckWin+0x2b6>
		else break;
 80018c4:	bf00      	nop
	}
	if (count == 3) return board[cur->first][cur->second];
 80018c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c8:	2b03      	cmp	r3, #3
 80018ca:	d10e      	bne.n	80018ea <CheckWin+0x2da>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	461a      	mov	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4413      	add	r3, r2
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	6852      	ldr	r2, [r2, #4]
 80018e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e8:	e091      	b.n	8001a0e <CheckWin+0x3fe>

	count = 1;
 80018ea:	2301      	movs	r3, #1
 80018ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int i = cur->second - 1; i >= 0; i--) {
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	e030      	b.n	800195a <CheckWin+0x34a>
		if (cur->first + (cur->second - i) >= N) break;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	6859      	ldr	r1, [r3, #4]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1acb      	subs	r3, r1, r3
 8001904:	4413      	add	r3, r2
 8001906:	2b02      	cmp	r3, #2
 8001908:	dc2b      	bgt.n	8001962 <CheckWin+0x352>
		if (board[cur->first + (cur->second - i)][i] == board[cur->first][cur->second]) count++;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	6859      	ldr	r1, [r3, #4]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1acb      	subs	r3, r1, r3
 8001916:	4413      	add	r3, r2
 8001918:	461a      	mov	r2, r3
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	461a      	mov	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4413      	add	r3, r2
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4619      	mov	r1, r3
 8001934:	460b      	mov	r3, r1
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	440b      	add	r3, r1
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4619      	mov	r1, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	440b      	add	r3, r1
 8001942:	6839      	ldr	r1, [r7, #0]
 8001944:	6849      	ldr	r1, [r1, #4]
 8001946:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800194a:	429a      	cmp	r2, r3
 800194c:	d10b      	bne.n	8001966 <CheckWin+0x356>
 800194e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001950:	3301      	adds	r3, #1
 8001952:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int i = cur->second - 1; i >= 0; i--) {
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	3b01      	subs	r3, #1
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	2b00      	cmp	r3, #0
 800195e:	dacb      	bge.n	80018f8 <CheckWin+0x2e8>
 8001960:	e002      	b.n	8001968 <CheckWin+0x358>
		if (cur->first + (cur->second - i) >= N) break;
 8001962:	bf00      	nop
 8001964:	e000      	b.n	8001968 <CheckWin+0x358>
		else break;
 8001966:	bf00      	nop
	}
	for (int i = cur->second + 1; i < N; i++) {
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	3301      	adds	r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	e030      	b.n	80019d4 <CheckWin+0x3c4>
		if (cur->first - (i - cur->second) < 0) break;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	68f9      	ldr	r1, [r7, #12]
 800197c:	1acb      	subs	r3, r1, r3
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	db2b      	blt.n	80019dc <CheckWin+0x3cc>
		if (board[cur->first + (i - cur->second)][i] == board[cur->first][cur->second]) count++;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	68f9      	ldr	r1, [r7, #12]
 800198e:	1acb      	subs	r3, r1, r3
 8001990:	4413      	add	r3, r2
 8001992:	461a      	mov	r2, r3
 8001994:	4613      	mov	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4413      	add	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	461a      	mov	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4619      	mov	r1, r3
 80019ae:	460b      	mov	r3, r1
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	440b      	add	r3, r1
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4619      	mov	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	440b      	add	r3, r1
 80019bc:	6839      	ldr	r1, [r7, #0]
 80019be:	6849      	ldr	r1, [r1, #4]
 80019c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d10b      	bne.n	80019e0 <CheckWin+0x3d0>
 80019c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ca:	3301      	adds	r3, #1
 80019cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int i = cur->second + 1; i < N; i++) {
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3301      	adds	r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	ddcb      	ble.n	8001972 <CheckWin+0x362>
 80019da:	e002      	b.n	80019e2 <CheckWin+0x3d2>
		if (cur->first - (i - cur->second) < 0) break;
 80019dc:	bf00      	nop
 80019de:	e000      	b.n	80019e2 <CheckWin+0x3d2>
		else break;
 80019e0:	bf00      	nop
	}
	if (count == 3) return board[cur->first][cur->second];
 80019e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d10e      	bne.n	8001a06 <CheckWin+0x3f6>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	4613      	mov	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4413      	add	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	461a      	mov	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4413      	add	r3, r2
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	6852      	ldr	r2, [r2, #4]
 8001a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a04:	e003      	b.n	8001a0e <CheckWin+0x3fe>
	return check_empty(board);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f805 	bl	8001a16 <check_empty>
 8001a0c:	4603      	mov	r3, r0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3730      	adds	r7, #48	@ 0x30
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <check_empty>:

int check_empty(int board[N][N]) {
 8001a16:	b480      	push	{r7}
 8001a18:	b085      	sub	sp, #20
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < N; i++) {
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	e01a      	b.n	8001a5a <check_empty+0x44>
		for (int j = 0; j < N; j++) {
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	e011      	b.n	8001a4e <check_empty+0x38>
			if (board[i][j] == EMPTY) {
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	461a      	mov	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <check_empty+0x32>
				return RUNNING;
 8001a44:	2300      	movs	r3, #0
 8001a46:	e00c      	b.n	8001a62 <check_empty+0x4c>
		for (int j = 0; j < N; j++) {
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	ddea      	ble.n	8001a2a <check_empty+0x14>
	for (int i = 0; i < N; i++) {
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3301      	adds	r3, #1
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	dde1      	ble.n	8001a24 <check_empty+0xe>
			}
		}
	}
	return TIE;
 8001a60:	2303      	movs	r3, #3
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <End>:

int End(int x){
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	6078      	str	r0, [r7, #4]
	if(x == RUNNING) return RUNNING;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <End+0x12>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e02d      	b.n	8001ada <End+0x6e>
	else if(x == X_WIN)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d10c      	bne.n	8001a9e <End+0x32>
	  St7735s_WriteString(39, 75, "X thang", Font7x10, ST7735_RED, ST7735_CYAN);
 8001a84:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001a88:	9301      	str	r3, [sp, #4]
 8001a8a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	4b14      	ldr	r3, [pc, #80]	@ (8001ae4 <End+0x78>)
 8001a92:	4a15      	ldr	r2, [pc, #84]	@ (8001ae8 <End+0x7c>)
 8001a94:	214b      	movs	r1, #75	@ 0x4b
 8001a96:	2027      	movs	r0, #39	@ 0x27
 8001a98:	f000 fc83 	bl	80023a2 <St7735s_WriteString>
 8001a9c:	e01c      	b.n	8001ad8 <End+0x6c>
	else if(x == O_WIN)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d10b      	bne.n	8001abc <End+0x50>
	  St7735s_WriteString(39, 75, "O thang", Font7x10, ST7735_BLUE, ST7735_CYAN);
 8001aa4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001aa8:	9301      	str	r3, [sp, #4]
 8001aaa:	231f      	movs	r3, #31
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae4 <End+0x78>)
 8001ab0:	4a0e      	ldr	r2, [pc, #56]	@ (8001aec <End+0x80>)
 8001ab2:	214b      	movs	r1, #75	@ 0x4b
 8001ab4:	2027      	movs	r0, #39	@ 0x27
 8001ab6:	f000 fc74 	bl	80023a2 <St7735s_WriteString>
 8001aba:	e00d      	b.n	8001ad8 <End+0x6c>
	else if(x == TIE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d10a      	bne.n	8001ad8 <End+0x6c>
	  St7735s_WriteString(45, 75, "Hoa", Font7x10, ST7735_BLACK, ST7735_CYAN);
 8001ac2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <End+0x78>)
 8001ace:	4a08      	ldr	r2, [pc, #32]	@ (8001af0 <End+0x84>)
 8001ad0:	214b      	movs	r1, #75	@ 0x4b
 8001ad2:	202d      	movs	r0, #45	@ 0x2d
 8001ad4:	f000 fc65 	bl	80023a2 <St7735s_WriteString>
		return END;
 8001ad8:	2305      	movs	r3, #5
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	08005510 	.word	0x08005510
 8001ae8:	080054e4 	.word	0x080054e4
 8001aec:	080054ec 	.word	0x080054ec
 8001af0:	080054f4 	.word	0x080054f4

08001af4 <BotMove>:

void BotMove(Game* game){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af02      	add	r7, sp, #8
 8001afa:	6078      	str	r0, [r7, #4]
	int x = game->cur.first;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b00:	60fb      	str	r3, [r7, #12]
	int y = game->cur.second;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b06:	60bb      	str	r3, [r7, #8]
	if (empty_cells(game->board) == N * N - 1) {
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 fab4 	bl	8002078 <empty_cells>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	f040 80bb 	bne.w	8001c8e <BotMove+0x19a>
		if ((x < N / 2) && (y < N / 2)){
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	dc2c      	bgt.n	8001b78 <BotMove+0x84>
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	dc29      	bgt.n	8001b78 <BotMove+0x84>
			x = x + 1;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	3301      	adds	r3, #1
 8001b28:	60fb      	str	r3, [r7, #12]
			y = y + 1;
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	60bb      	str	r3, [r7, #8]
			DrawXO(O, 8 + ((BOARD_WIDTH/N) * x),24 +((BOARD_HEIGHT/N) * y), ST7735_BLUE, ST7735_YELLOW);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	461a      	mov	r2, r3
 8001b36:	0092      	lsls	r2, r2, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	3308      	adds	r3, #8
 8001b40:	b299      	uxth	r1, r3
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	461a      	mov	r2, r3
 8001b48:	0092      	lsls	r2, r2, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	3318      	adds	r3, #24
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	231f      	movs	r3, #31
 8001b5c:	48a9      	ldr	r0, [pc, #676]	@ (8001e04 <BotMove+0x310>)
 8001b5e:	f7ff f91d 	bl	8000d9c <DrawXO>
			game->board[x][y] = _O;
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	68ba      	ldr	r2, [r7, #8]
 8001b6e:	4413      	add	r3, r2
 8001b70:	2202      	movs	r2, #2
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001b76:	e089      	b.n	8001c8c <BotMove+0x198>
		}
		else if ((x >= N / 2) && (y < N / 2)){
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	dd2c      	ble.n	8001bd8 <BotMove+0xe4>
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	dc29      	bgt.n	8001bd8 <BotMove+0xe4>
			x = x - 1;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
			y = y + 1;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
			DrawXO(O, 8 + ((BOARD_WIDTH/N) * x),24 +((BOARD_HEIGHT/N) * y), ST7735_BLUE, ST7735_YELLOW);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	461a      	mov	r2, r3
 8001b96:	0092      	lsls	r2, r2, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3308      	adds	r3, #8
 8001ba0:	b299      	uxth	r1, r3
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	0092      	lsls	r2, r2, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	3318      	adds	r3, #24
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	231f      	movs	r3, #31
 8001bbc:	4891      	ldr	r0, [pc, #580]	@ (8001e04 <BotMove+0x310>)
 8001bbe:	f7ff f8ed 	bl	8000d9c <DrawXO>
			game->board[x][y] = _O;
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	4413      	add	r3, r2
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001bd6:	e059      	b.n	8001c8c <BotMove+0x198>
		}
		else if ((x < N / 2) && (y >= N / 2)) {
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	dc2c      	bgt.n	8001c38 <BotMove+0x144>
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	dd29      	ble.n	8001c38 <BotMove+0x144>
			x = x + 1;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	3301      	adds	r3, #1
 8001be8:	60fb      	str	r3, [r7, #12]
			y = y - 1;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	3b01      	subs	r3, #1
 8001bee:	60bb      	str	r3, [r7, #8]
			DrawXO(O, 8 + ((BOARD_WIDTH/N) * x),24 +((BOARD_HEIGHT/N) * y), ST7735_BLUE, ST7735_YELLOW);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	0092      	lsls	r2, r2, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	3308      	adds	r3, #8
 8001c00:	b299      	uxth	r1, r3
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	0092      	lsls	r2, r2, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	3318      	adds	r3, #24
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	231f      	movs	r3, #31
 8001c1c:	4879      	ldr	r0, [pc, #484]	@ (8001e04 <BotMove+0x310>)
 8001c1e:	f7ff f8bd 	bl	8000d9c <DrawXO>
			game->board[x][y] = _O;
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	4413      	add	r3, r2
 8001c30:	2202      	movs	r2, #2
 8001c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001c36:	e029      	b.n	8001c8c <BotMove+0x198>
		}
		else {
			x = x - 1;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	60fb      	str	r3, [r7, #12]
			y = y - 1;
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	60bb      	str	r3, [r7, #8]
			DrawXO(O, 8 + ((BOARD_WIDTH/N) * x),24 +((BOARD_HEIGHT/N) * y), ST7735_BLUE, ST7735_YELLOW);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	461a      	mov	r2, r3
 8001c4a:	0092      	lsls	r2, r2, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	3308      	adds	r3, #8
 8001c54:	b299      	uxth	r1, r3
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	0092      	lsls	r2, r2, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	3318      	adds	r3, #24
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	231f      	movs	r3, #31
 8001c70:	4864      	ldr	r0, [pc, #400]	@ (8001e04 <BotMove+0x310>)
 8001c72:	f7ff f893 	bl	8000d9c <DrawXO>
			game->board[x][y] = _O;
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	4413      	add	r3, r2
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	4413      	add	r3, r2
 8001c84:	2202      	movs	r2, #2
 8001c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
	return;
 8001c8a:	e0b8      	b.n	8001dfe <BotMove+0x30a>
 8001c8c:	e0b7      	b.n	8001dfe <BotMove+0x30a>
	}else {
		for (int i = 0; i < N; i++) {
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	e091      	b.n	8001db8 <BotMove+0x2c4>
			for (int j = 0; j < N; j++) {
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	e087      	b.n	8001daa <BotMove+0x2b6>
				if (game->board[i][j] == EMPTY) {
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d179      	bne.n	8001da4 <BotMove+0x2b0>
					game->bot_cur.first = i;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	639a      	str	r2, [r3, #56]	@ 0x38
					game->bot_cur.second = j;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	63da      	str	r2, [r3, #60]	@ 0x3c
					game->board[i][j] = _O;
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4413      	add	r3, r2
 8001cca:	2202      	movs	r2, #2
 8001ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if (CheckWin(game->board, &game->bot_cur) == O_WIN) {
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3338      	adds	r3, #56	@ 0x38
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4610      	mov	r0, r2
 8001cda:	f7ff fc99 	bl	8001610 <CheckWin>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d11b      	bne.n	8001d1c <BotMove+0x228>
						DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->bot_cur.first),
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	0092      	lsls	r2, r2, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	3308      	adds	r3, #8
 8001cf6:	b299      	uxth	r1, r3
						24 +((BOARD_HEIGHT/N) * game->bot_cur.second), ST7735_BLUE, ST7735_YELLOW);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
						DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->bot_cur.first),
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	0092      	lsls	r2, r2, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	3318      	adds	r3, #24
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	231f      	movs	r3, #31
 8001d14:	483b      	ldr	r0, [pc, #236]	@ (8001e04 <BotMove+0x310>)
 8001d16:	f7ff f841 	bl	8000d9c <DrawXO>
						return;
 8001d1a:	e070      	b.n	8001dfe <BotMove+0x30a>
					}
					game->board[i][j] = _X;
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4413      	add	r3, r2
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if (CheckWin(game->board, &game->bot_cur) == X_WIN) {
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3338      	adds	r3, #56	@ 0x38
 8001d36:	4619      	mov	r1, r3
 8001d38:	4610      	mov	r0, r2
 8001d3a:	f7ff fc69 	bl	8001610 <CheckWin>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d125      	bne.n	8001d90 <BotMove+0x29c>
						game->board[i][j] = _O;
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4413      	add	r3, r2
 8001d52:	2202      	movs	r2, #2
 8001d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->bot_cur.first),
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	461a      	mov	r2, r3
 8001d60:	0092      	lsls	r2, r2, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	3308      	adds	r3, #8
 8001d6a:	b299      	uxth	r1, r3
						24 +((BOARD_HEIGHT/N) * game->bot_cur.second), ST7735_BLUE, ST7735_YELLOW);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
						DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->bot_cur.first),
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	0092      	lsls	r2, r2, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	3318      	adds	r3, #24
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	231f      	movs	r3, #31
 8001d88:	481e      	ldr	r0, [pc, #120]	@ (8001e04 <BotMove+0x310>)
 8001d8a:	f7ff f807 	bl	8000d9c <DrawXO>
						return;
 8001d8e:	e036      	b.n	8001dfe <BotMove+0x30a>
					}
					game->board[i][j] = EMPTY;
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4613      	mov	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int j = 0; j < N; j++) {
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	3301      	adds	r3, #1
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	f77f af74 	ble.w	8001c9a <BotMove+0x1a6>
		for (int i = 0; i < N; i++) {
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	3301      	adds	r3, #1
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	f77f af6a 	ble.w	8001c94 <BotMove+0x1a0>
				}
			}
		}
		FindBestMove(game);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f821 	bl	8001e08 <FindBestMove>
		DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->bot_cur.first),
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	0092      	lsls	r2, r2, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3308      	adds	r3, #8
 8001dd8:	b299      	uxth	r1, r3
		24 +((BOARD_HEIGHT/N) * game->bot_cur.second), ST7735_BLUE, ST7735_YELLOW);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
		DrawXO(O, 8 + ((BOARD_WIDTH/N) * game->bot_cur.first),
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	0092      	lsls	r2, r2, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	3318      	adds	r3, #24
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	231f      	movs	r3, #31
 8001df6:	4803      	ldr	r0, [pc, #12]	@ (8001e04 <BotMove+0x310>)
 8001df8:	f7fe ffd0 	bl	8000d9c <DrawXO>
		return;
 8001dfc:	bf00      	nop
	}
}
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200001e8 	.word	0x200001e8

08001e08 <FindBestMove>:

void FindBestMove(Game* game){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
	game->bot_cur.first = -1;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f04f 32ff 	mov.w	r2, #4294967295
 8001e16:	639a      	str	r2, [r3, #56]	@ 0x38
	game->bot_cur.second = -1;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1e:	63da      	str	r2, [r3, #60]	@ 0x3c
	int bestMove = -1000;
 8001e20:	4b2b      	ldr	r3, [pc, #172]	@ (8001ed0 <FindBestMove+0xc8>)
 8001e22:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < N; i++) {
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	e03e      	b.n	8001ea8 <FindBestMove+0xa0>
		for (int j = 0; j < N; j++) {
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	e035      	b.n	8001e9c <FindBestMove+0x94>
			if (game->board[i][j] == EMPTY) {
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4613      	mov	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d127      	bne.n	8001e96 <FindBestMove+0x8e>
				game->board[i][j] = _O;
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	4413      	add	r3, r2
 8001e54:	2202      	movs	r2, #2
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				int moveVal = minimax(game, false, -1000, 1000);
 8001e5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ed0 <FindBestMove+0xc8>)
 8001e60:	2100      	movs	r1, #0
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f836 	bl	8001ed4 <minimax>
 8001e68:	60b8      	str	r0, [r7, #8]
				game->board[i][j] = EMPTY;
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	4413      	add	r3, r2
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (moveVal > bestMove) {
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	dd07      	ble.n	8001e96 <FindBestMove+0x8e>
					bestMove = moveVal;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	617b      	str	r3, [r7, #20]
					game->bot_cur.first = i;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	639a      	str	r2, [r3, #56]	@ 0x38
					game->bot_cur.second = j;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	63da      	str	r2, [r3, #60]	@ 0x3c
		for (int j = 0; j < N; j++) {
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	ddc6      	ble.n	8001e30 <FindBestMove+0x28>
	for (int i = 0; i < N; i++) {
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	ddbd      	ble.n	8001e2a <FindBestMove+0x22>
				}
			}
		}
	}
	game->board[game->bot_cur.first][game->bot_cur.second] = _O;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	4403      	add	r3, r0
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	fffffc18 	.word	0xfffffc18

08001ed4 <minimax>:

int minimax(Game* game, bool ismax, int alpha, int beta){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08e      	sub	sp, #56	@ 0x38
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	72fb      	strb	r3, [r7, #11]
	int score = CheckWin(game->board, &game->bot_cur);
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	3338      	adds	r3, #56	@ 0x38
 8001eea:	4619      	mov	r1, r3
 8001eec:	4610      	mov	r0, r2
 8001eee:	f7ff fb8f 	bl	8001610 <CheckWin>
 8001ef2:	61f8      	str	r0, [r7, #28]
	if (score == X_WIN) return -1;
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d102      	bne.n	8001f00 <minimax+0x2c>
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
 8001efe:	e0b4      	b.n	800206a <minimax+0x196>
	if (score == O_WIN) return 1;
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d101      	bne.n	8001f0a <minimax+0x36>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e0af      	b.n	800206a <minimax+0x196>
	if (score == TIE) return 0;
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d101      	bne.n	8001f14 <minimax+0x40>
 8001f10:	2300      	movs	r3, #0
 8001f12:	e0aa      	b.n	800206a <minimax+0x196>
	if (ismax) {
 8001f14:	7afb      	ldrb	r3, [r7, #11]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d053      	beq.n	8001fc2 <minimax+0xee>
		int best = -1000;
 8001f1a:	4b56      	ldr	r3, [pc, #344]	@ (8002074 <minimax+0x1a0>)
 8001f1c:	637b      	str	r3, [r7, #52]	@ 0x34
		for (int i = 0; i < N; i++) {
 8001f1e:	2300      	movs	r3, #0
 8001f20:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f22:	e049      	b.n	8001fb8 <minimax+0xe4>
			for (int j = 0; j < N; j++) {
 8001f24:	2300      	movs	r3, #0
 8001f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f28:	e040      	b.n	8001fac <minimax+0xd8>
				if (game->board[i][j] == EMPTY) {
 8001f2a:	68f9      	ldr	r1, [r7, #12]
 8001f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f36:	4413      	add	r3, r2
 8001f38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d132      	bne.n	8001fa6 <minimax+0xd2>
					game->board[i][j] = _O;
 8001f40:	68f9      	ldr	r1, [r7, #12]
 8001f42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f44:	4613      	mov	r3, r2
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4413      	add	r3, r2
 8001f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f4c:	4413      	add	r3, r2
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					game->bot_cur.first = i;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f58:	639a      	str	r2, [r3, #56]	@ 0x38
					game->bot_cur.second = j;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f5e:	63da      	str	r2, [r3, #60]	@ 0x3c
					int a = minimax(game, false, alpha, beta);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	2100      	movs	r1, #0
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f7ff ffb4 	bl	8001ed4 <minimax>
 8001f6c:	6178      	str	r0, [r7, #20]
					best = best > a ? best : a;
 8001f6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	4293      	cmp	r3, r2
 8001f74:	bfb8      	it	lt
 8001f76:	4613      	movlt	r3, r2
 8001f78:	637b      	str	r3, [r7, #52]	@ 0x34
					game->board[i][j] = EMPTY;
 8001f7a:	68f9      	ldr	r1, [r7, #12]
 8001f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f86:	4413      	add	r3, r2
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					alpha = best > alpha ? best : alpha;
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f92:	4293      	cmp	r3, r2
 8001f94:	bfb8      	it	lt
 8001f96:	4613      	movlt	r3, r2
 8001f98:	607b      	str	r3, [r7, #4]
					if (beta <= alpha) return best;
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	dc01      	bgt.n	8001fa6 <minimax+0xd2>
 8001fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fa4:	e061      	b.n	800206a <minimax+0x196>
			for (int j = 0; j < N; j++) {
 8001fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fa8:	3301      	adds	r3, #1
 8001faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	ddbb      	ble.n	8001f2a <minimax+0x56>
		for (int i = 0; i < N; i++) {
 8001fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	ddb2      	ble.n	8001f24 <minimax+0x50>
				}
			}
		}
		return best;
 8001fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fc0:	e053      	b.n	800206a <minimax+0x196>
	}
	else {
		int best = 10000;
 8001fc2:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (int i = 0; i < N; i++) {
 8001fc8:	2300      	movs	r3, #0
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fcc:	e049      	b.n	8002062 <minimax+0x18e>
			for (int j = 0; j < N; j++) {
 8001fce:	2300      	movs	r3, #0
 8001fd0:	623b      	str	r3, [r7, #32]
 8001fd2:	e040      	b.n	8002056 <minimax+0x182>
				if (game->board[i][j] == EMPTY) {
 8001fd4:	68f9      	ldr	r1, [r7, #12]
 8001fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	6a3a      	ldr	r2, [r7, #32]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d132      	bne.n	8002050 <minimax+0x17c>
					game->board[i][j] = _X;
 8001fea:	68f9      	ldr	r1, [r7, #12]
 8001fec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fee:	4613      	mov	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	6a3a      	ldr	r2, [r7, #32]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					game->bot_cur.first = i;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002002:	639a      	str	r2, [r3, #56]	@ 0x38
					game->bot_cur.second = j;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6a3a      	ldr	r2, [r7, #32]
 8002008:	63da      	str	r2, [r3, #60]	@ 0x3c
					int a = minimax(game, true, alpha, beta);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	2101      	movs	r1, #1
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f7ff ff5f 	bl	8001ed4 <minimax>
 8002016:	61b8      	str	r0, [r7, #24]
					best = best > a ? best : a;
 8002018:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	4293      	cmp	r3, r2
 800201e:	bfb8      	it	lt
 8002020:	4613      	movlt	r3, r2
 8002022:	62bb      	str	r3, [r7, #40]	@ 0x28
					game->board[i][j] = EMPTY;
 8002024:	68f9      	ldr	r1, [r7, #12]
 8002026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	6a3a      	ldr	r2, [r7, #32]
 8002030:	4413      	add	r3, r2
 8002032:	2200      	movs	r2, #0
 8002034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					beta = best < beta ? best : beta;
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800203c:	4293      	cmp	r3, r2
 800203e:	bfa8      	it	ge
 8002040:	4613      	movge	r3, r2
 8002042:	603b      	str	r3, [r7, #0]
					if (beta <= alpha) return best;
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	429a      	cmp	r2, r3
 800204a:	dc01      	bgt.n	8002050 <minimax+0x17c>
 800204c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800204e:	e00c      	b.n	800206a <minimax+0x196>
			for (int j = 0; j < N; j++) {
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	3301      	adds	r3, #1
 8002054:	623b      	str	r3, [r7, #32]
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	2b02      	cmp	r3, #2
 800205a:	ddbb      	ble.n	8001fd4 <minimax+0x100>
		for (int i = 0; i < N; i++) {
 800205c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205e:	3301      	adds	r3, #1
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24
 8002062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002064:	2b02      	cmp	r3, #2
 8002066:	ddb2      	ble.n	8001fce <minimax+0xfa>
				}
			}
		}
		return best;
 8002068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
	}
}
 800206a:	4618      	mov	r0, r3
 800206c:	3738      	adds	r7, #56	@ 0x38
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	fffffc18 	.word	0xfffffc18

08002078 <empty_cells>:

int empty_cells(int board[N][N]){
 8002078:	b480      	push	{r7}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	int count = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < N; i++){
 8002084:	2300      	movs	r3, #0
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	e01b      	b.n	80020c2 <empty_cells+0x4a>
		for(int j = 0; j < N; j++){
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	e012      	b.n	80020b6 <empty_cells+0x3e>
			if(board[i][j] == EMPTY) count++;
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4613      	mov	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	461a      	mov	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4413      	add	r3, r2
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d102      	bne.n	80020b0 <empty_cells+0x38>
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	3301      	adds	r3, #1
 80020ae:	617b      	str	r3, [r7, #20]
		for(int j = 0; j < N; j++){
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	3301      	adds	r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	dde9      	ble.n	8002090 <empty_cells+0x18>
	for(int i = 0; i < N; i++){
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	3301      	adds	r3, #1
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	dde0      	ble.n	800208a <empty_cells+0x12>
		}
	}
	return count;
 80020c8:	697b      	ldr	r3, [r7, #20]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	371c      	adds	r7, #28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <St7735s_Select>:
#define ST7735S_DC_PORT GPIOB
#define ST7735S_DC_PIN GPIO_PIN_1
#define ST7735S_CS_PORT GPIOB
#define ST7735S_CS_PIN GPIO_PIN_10

void St7735s_Select(void){
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735S_CS_PORT, ST7735S_CS_PIN, GPIO_PIN_RESET);
 80020d8:	2200      	movs	r2, #0
 80020da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020de:	4802      	ldr	r0, [pc, #8]	@ (80020e8 <St7735s_Select+0x14>)
 80020e0:	f001 fb07 	bl	80036f2 <HAL_GPIO_WritePin>
}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40010c00 	.word	0x40010c00

080020ec <St7735s_UnSelect>:

void St7735s_UnSelect(void){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735S_CS_PORT, ST7735S_CS_PIN, GPIO_PIN_SET);
 80020f0:	2201      	movs	r2, #1
 80020f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020f6:	4802      	ldr	r0, [pc, #8]	@ (8002100 <St7735s_UnSelect+0x14>)
 80020f8:	f001 fafb 	bl	80036f2 <HAL_GPIO_WritePin>
}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40010c00 	.word	0x40010c00

08002104 <St7735s_CmdMode>:

void St7735s_CmdMode(void){
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735S_DC_PORT, ST7735S_DC_PIN, GPIO_PIN_RESET);
 8002108:	2200      	movs	r2, #0
 800210a:	2102      	movs	r1, #2
 800210c:	4802      	ldr	r0, [pc, #8]	@ (8002118 <St7735s_CmdMode+0x14>)
 800210e:	f001 faf0 	bl	80036f2 <HAL_GPIO_WritePin>
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40010c00 	.word	0x40010c00

0800211c <St7735s_DataMode>:

void St7735s_DataMode(void){
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735S_DC_PORT, ST7735S_DC_PIN, GPIO_PIN_SET);
 8002120:	2201      	movs	r2, #1
 8002122:	2102      	movs	r1, #2
 8002124:	4802      	ldr	r0, [pc, #8]	@ (8002130 <St7735s_DataMode+0x14>)
 8002126:	f001 fae4 	bl	80036f2 <HAL_GPIO_WritePin>
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40010c00 	.word	0x40010c00

08002134 <St7735s_Reset>:

void St7735s_Reset(void){
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735S_RST_PORT, ST7735S_RST_PIN, GPIO_PIN_RESET); // RESET = 0
 8002138:	2200      	movs	r2, #0
 800213a:	2101      	movs	r1, #1
 800213c:	4806      	ldr	r0, [pc, #24]	@ (8002158 <St7735s_Reset+0x24>)
 800213e:	f001 fad8 	bl	80036f2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002142:	200a      	movs	r0, #10
 8002144:	f000 fe30 	bl	8002da8 <HAL_Delay>
	HAL_GPIO_WritePin(ST7735S_RST_PORT, ST7735S_RST_PIN, GPIO_PIN_SET); // RESET = 1
 8002148:	2201      	movs	r2, #1
 800214a:	2101      	movs	r1, #1
 800214c:	4802      	ldr	r0, [pc, #8]	@ (8002158 <St7735s_Reset+0x24>)
 800214e:	f001 fad0 	bl	80036f2 <HAL_GPIO_WritePin>
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40010c00 	.word	0x40010c00

0800215c <St7735s_WriteCmd>:

void St7735s_WriteCmd(uint8_t cmd){
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
	St7735s_CmdMode();
 8002166:	f7ff ffcd 	bl	8002104 <St7735s_CmdMode>
	HAL_SPI_Transmit(&ST7735S, &cmd, 1, 100);
 800216a:	1df9      	adds	r1, r7, #7
 800216c:	2364      	movs	r3, #100	@ 0x64
 800216e:	2201      	movs	r2, #1
 8002170:	4803      	ldr	r0, [pc, #12]	@ (8002180 <St7735s_WriteCmd+0x24>)
 8002172:	f001 ff39 	bl	8003fe8 <HAL_SPI_Transmit>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	2000008c 	.word	0x2000008c

08002184 <St7735s_WriteData>:

void St7735s_WriteData(uint8_t* Data, uint16_t size){
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	807b      	strh	r3, [r7, #2]
	St7735s_DataMode();
 8002190:	f7ff ffc4 	bl	800211c <St7735s_DataMode>
	HAL_SPI_Transmit(&ST7735S, Data, size, HAL_MAX_DELAY);
 8002194:	887a      	ldrh	r2, [r7, #2]
 8002196:	f04f 33ff 	mov.w	r3, #4294967295
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4803      	ldr	r0, [pc, #12]	@ (80021ac <St7735s_WriteData+0x28>)
 800219e:	f001 ff23 	bl	8003fe8 <HAL_SPI_Transmit>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	2000008c 	.word	0x2000008c

080021b0 <St7735s_ExecuteCommandList>:
	data8[0] = data>>8 & 0xFF;
	data8[1] = data &0xFF;
	HAL_SPI_Transmit(&ST7735S, data8, 2, 100);
}

void St7735s_ExecuteCommandList(const uint8_t *addr){
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint32_t ms;
    numCommands = *addr++;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	75fb      	strb	r3, [r7, #23]
    while(numCommands--) {
 80021c2:	e033      	b.n	800222c <St7735s_ExecuteCommandList+0x7c>
        uint8_t cmd = *addr++;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	73fb      	strb	r3, [r7, #15]
        St7735s_WriteCmd(cmd);
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ffc3 	bl	800215c <St7735s_WriteCmd>
        numArgs = *addr++;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	73bb      	strb	r3, [r7, #14]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80021e0:	7bbb      	ldrb	r3, [r7, #14]
 80021e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021e6:	613b      	str	r3, [r7, #16]
        numArgs &= ~DELAY;
 80021e8:	7bbb      	ldrb	r3, [r7, #14]
 80021ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021ee:	73bb      	strb	r3, [r7, #14]
        if(numArgs) {
 80021f0:	7bbb      	ldrb	r3, [r7, #14]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d009      	beq.n	800220a <St7735s_ExecuteCommandList+0x5a>
            St7735s_WriteData((uint8_t*)addr, numArgs);
 80021f6:	7bbb      	ldrb	r3, [r7, #14]
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	4619      	mov	r1, r3
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff ffc1 	bl	8002184 <St7735s_WriteData>
            addr += numArgs;
 8002202:	7bbb      	ldrb	r3, [r7, #14]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	4413      	add	r3, r2
 8002208:	607b      	str	r3, [r7, #4]
        }
        if(ms) {
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00d      	beq.n	800222c <St7735s_ExecuteCommandList+0x7c>
            ms = *addr++;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	613b      	str	r3, [r7, #16]
            if(ms == 255) ms = 500;
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	2bff      	cmp	r3, #255	@ 0xff
 800221e:	d102      	bne.n	8002226 <St7735s_ExecuteCommandList+0x76>
 8002220:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002224:	613b      	str	r3, [r7, #16]
            HAL_Delay(ms);
 8002226:	6938      	ldr	r0, [r7, #16]
 8002228:	f000 fdbe 	bl	8002da8 <HAL_Delay>
    while(numCommands--) {
 800222c:	7dfb      	ldrb	r3, [r7, #23]
 800222e:	1e5a      	subs	r2, r3, #1
 8002230:	75fa      	strb	r2, [r7, #23]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1c6      	bne.n	80021c4 <St7735s_ExecuteCommandList+0x14>
        }
    	}
}
 8002236:	bf00      	nop
 8002238:	bf00      	nop
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <St7735s_Init>:

void St7735s_Init(void){
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
    St7735s_Select();
 8002244:	f7ff ff46 	bl	80020d4 <St7735s_Select>
    St7735s_Reset();
 8002248:	f7ff ff74 	bl	8002134 <St7735s_Reset>
    St7735s_ExecuteCommandList(init_cmds1);
 800224c:	4806      	ldr	r0, [pc, #24]	@ (8002268 <St7735s_Init+0x28>)
 800224e:	f7ff ffaf 	bl	80021b0 <St7735s_ExecuteCommandList>
    St7735s_ExecuteCommandList(init_cmds2);
 8002252:	4806      	ldr	r0, [pc, #24]	@ (800226c <St7735s_Init+0x2c>)
 8002254:	f7ff ffac 	bl	80021b0 <St7735s_ExecuteCommandList>
    St7735s_ExecuteCommandList(init_cmds3);
 8002258:	4805      	ldr	r0, [pc, #20]	@ (8002270 <St7735s_Init+0x30>)
 800225a:	f7ff ffa9 	bl	80021b0 <St7735s_ExecuteCommandList>
    St7735s_UnSelect();
 800225e:	f7ff ff45 	bl	80020ec <St7735s_UnSelect>
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	08005c7c 	.word	0x08005c7c
 800226c:	08005cb8 	.word	0x08005cb8
 8002270:	08005cc8 	.word	0x08005cc8

08002274 <St7735s_SetAddressWindow>:

void St7735s_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	4604      	mov	r4, r0
 800227c:	4608      	mov	r0, r1
 800227e:	4611      	mov	r1, r2
 8002280:	461a      	mov	r2, r3
 8002282:	4623      	mov	r3, r4
 8002284:	71fb      	strb	r3, [r7, #7]
 8002286:	4603      	mov	r3, r0
 8002288:	71bb      	strb	r3, [r7, #6]
 800228a:	460b      	mov	r3, r1
 800228c:	717b      	strb	r3, [r7, #5]
 800228e:	4613      	mov	r3, r2
 8002290:	713b      	strb	r3, [r7, #4]
	uint8_t data[4] = {0x00, x0, 0x00, x1};
 8002292:	2300      	movs	r3, #0
 8002294:	733b      	strb	r3, [r7, #12]
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	737b      	strb	r3, [r7, #13]
 800229a:	2300      	movs	r3, #0
 800229c:	73bb      	strb	r3, [r7, #14]
 800229e:	797b      	ldrb	r3, [r7, #5]
 80022a0:	73fb      	strb	r3, [r7, #15]
	St7735s_WriteCmd(CASET);
 80022a2:	202a      	movs	r0, #42	@ 0x2a
 80022a4:	f7ff ff5a 	bl	800215c <St7735s_WriteCmd>
	St7735s_WriteData(data, 4);
 80022a8:	f107 030c 	add.w	r3, r7, #12
 80022ac:	2104      	movs	r1, #4
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff ff68 	bl	8002184 <St7735s_WriteData>
	data[1] = y0;
 80022b4:	79bb      	ldrb	r3, [r7, #6]
 80022b6:	737b      	strb	r3, [r7, #13]
	data[3] = y1;
 80022b8:	793b      	ldrb	r3, [r7, #4]
 80022ba:	73fb      	strb	r3, [r7, #15]
	St7735s_WriteCmd(RASET);
 80022bc:	202b      	movs	r0, #43	@ 0x2b
 80022be:	f7ff ff4d 	bl	800215c <St7735s_WriteCmd>
	St7735s_WriteData(data, 4);
 80022c2:	f107 030c 	add.w	r3, r7, #12
 80022c6:	2104      	movs	r1, #4
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff5b 	bl	8002184 <St7735s_WriteData>
	St7735s_WriteCmd(RAMWR);
 80022ce:	202c      	movs	r0, #44	@ 0x2c
 80022d0:	f7ff ff44 	bl	800215c <St7735s_WriteCmd>
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd90      	pop	{r4, r7, pc}

080022dc <St7735s_WriteChar>:
    uint8_t data[2] = { color >> 8, color & 0xFF };
    St7735s_WriteData(data, 2);
    St7735s_UnSelect();
}

void St7735s_WriteChar(uint16_t x, uint16_t y, char ch, const uint16_t* font, uint16_t color, uint16_t bgcolor) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	@ 0x28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	607b      	str	r3, [r7, #4]
 80022e4:	4603      	mov	r3, r0
 80022e6:	81fb      	strh	r3, [r7, #14]
 80022e8:	460b      	mov	r3, r1
 80022ea:	81bb      	strh	r3, [r7, #12]
 80022ec:	4613      	mov	r3, r2
 80022ee:	72fb      	strb	r3, [r7, #11]
    uint32_t i, b, j;
    St7735s_SetAddressWindow(x, y, x+WIDTH-1, y+HEIGHT-1);
 80022f0:	89fb      	ldrh	r3, [r7, #14]
 80022f2:	b2d8      	uxtb	r0, r3
 80022f4:	89bb      	ldrh	r3, [r7, #12]
 80022f6:	b2d9      	uxtb	r1, r3
 80022f8:	89fb      	ldrh	r3, [r7, #14]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	3306      	adds	r3, #6
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	89bb      	ldrh	r3, [r7, #12]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	3309      	adds	r3, #9
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f7ff ffb4 	bl	8002274 <St7735s_SetAddressWindow>
    for(i = 0; i < HEIGHT; i++) {
 800230c:	2300      	movs	r3, #0
 800230e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002310:	e03f      	b.n	8002392 <St7735s_WriteChar+0xb6>
        b = font[(ch - 32) * HEIGHT + i];
 8002312:	7afb      	ldrb	r3, [r7, #11]
 8002314:	f1a3 0220 	sub.w	r2, r3, #32
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	461a      	mov	r2, r3
 8002322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002324:	4413      	add	r3, r2
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	4413      	add	r3, r2
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	61fb      	str	r3, [r7, #28]
        for(j = 0; j < WIDTH; j++) {
 8002330:	2300      	movs	r3, #0
 8002332:	623b      	str	r3, [r7, #32]
 8002334:	e027      	b.n	8002386 <St7735s_WriteChar+0xaa>
            if((b << j) & 0x8000)  {
 8002336:	69fa      	ldr	r2, [r7, #28]
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00e      	beq.n	8002364 <St7735s_WriteChar+0x88>
                uint8_t data[2] = { color >> 8, color & 0xFF };
 8002346:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	b29b      	uxth	r3, r3
 800234c:	b2db      	uxtb	r3, r3
 800234e:	763b      	strb	r3, [r7, #24]
 8002350:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002352:	b2db      	uxtb	r3, r3
 8002354:	767b      	strb	r3, [r7, #25]
                St7735s_WriteData(data, 2);
 8002356:	f107 0318 	add.w	r3, r7, #24
 800235a:	2102      	movs	r1, #2
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff11 	bl	8002184 <St7735s_WriteData>
 8002362:	e00d      	b.n	8002380 <St7735s_WriteChar+0xa4>
            } else {
                uint8_t data[2] = { bgcolor >> 8, bgcolor & 0xFF };
 8002364:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002366:	0a1b      	lsrs	r3, r3, #8
 8002368:	b29b      	uxth	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	753b      	strb	r3, [r7, #20]
 800236e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002370:	b2db      	uxtb	r3, r3
 8002372:	757b      	strb	r3, [r7, #21]
                St7735s_WriteData(data, 2);
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	2102      	movs	r1, #2
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff ff02 	bl	8002184 <St7735s_WriteData>
        for(j = 0; j < WIDTH; j++) {
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	3301      	adds	r3, #1
 8002384:	623b      	str	r3, [r7, #32]
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	2b06      	cmp	r3, #6
 800238a:	d9d4      	bls.n	8002336 <St7735s_WriteChar+0x5a>
    for(i = 0; i < HEIGHT; i++) {
 800238c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238e:	3301      	adds	r3, #1
 8002390:	627b      	str	r3, [r7, #36]	@ 0x24
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	2b09      	cmp	r3, #9
 8002396:	d9bc      	bls.n	8002312 <St7735s_WriteChar+0x36>
            }
        }
    }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3728      	adds	r7, #40	@ 0x28
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <St7735s_WriteString>:

void St7735s_WriteString(uint16_t x, uint16_t y, const char* str, const uint16_t* font, uint16_t color, uint16_t bgcolor){
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b086      	sub	sp, #24
 80023a6:	af02      	add	r7, sp, #8
 80023a8:	60ba      	str	r2, [r7, #8]
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	4603      	mov	r3, r0
 80023ae:	81fb      	strh	r3, [r7, #14]
 80023b0:	460b      	mov	r3, r1
 80023b2:	81bb      	strh	r3, [r7, #12]
    St7735s_Select();
 80023b4:	f7ff fe8e 	bl	80020d4 <St7735s_Select>
    while(*str) {
 80023b8:	e023      	b.n	8002402 <St7735s_WriteString+0x60>
        if(x + WIDTH >= ST7735_WIDTH) {
 80023ba:	89fb      	ldrh	r3, [r7, #14]
 80023bc:	2b78      	cmp	r3, #120	@ 0x78
 80023be:	d90f      	bls.n	80023e0 <St7735s_WriteString+0x3e>
            x = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	81fb      	strh	r3, [r7, #14]
            y += HEIGHT;
 80023c4:	89bb      	ldrh	r3, [r7, #12]
 80023c6:	330a      	adds	r3, #10
 80023c8:	81bb      	strh	r3, [r7, #12]
            if(y + HEIGHT >= ST7735_HEIGHT) {
 80023ca:	89bb      	ldrh	r3, [r7, #12]
 80023cc:	2b95      	cmp	r3, #149	@ 0x95
 80023ce:	d81d      	bhi.n	800240c <St7735s_WriteString+0x6a>
                break;
            }
            if(*str == ' ') {
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	d103      	bne.n	80023e0 <St7735s_WriteString+0x3e>
                // skip spaces in the beginning of the new line
                str++;
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	3301      	adds	r3, #1
 80023dc:	60bb      	str	r3, [r7, #8]
                continue;
 80023de:	e010      	b.n	8002402 <St7735s_WriteString+0x60>
            }
        }
        St7735s_WriteChar(x, y, *str, font, color, bgcolor);
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	781a      	ldrb	r2, [r3, #0]
 80023e4:	89b9      	ldrh	r1, [r7, #12]
 80023e6:	89f8      	ldrh	r0, [r7, #14]
 80023e8:	8bbb      	ldrh	r3, [r7, #28]
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	8b3b      	ldrh	r3, [r7, #24]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f7ff ff73 	bl	80022dc <St7735s_WriteChar>
        x += WIDTH;
 80023f6:	89fb      	ldrh	r3, [r7, #14]
 80023f8:	3307      	adds	r3, #7
 80023fa:	81fb      	strh	r3, [r7, #14]
        str++;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	3301      	adds	r3, #1
 8002400:	60bb      	str	r3, [r7, #8]
    while(*str) {
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1d7      	bne.n	80023ba <St7735s_WriteString+0x18>
 800240a:	e000      	b.n	800240e <St7735s_WriteString+0x6c>
                break;
 800240c:	bf00      	nop
    }
    St7735s_UnSelect();
 800240e:	f7ff fe6d 	bl	80020ec <St7735s_UnSelect>
}
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <St7735s_FillRectangle>:

void St7735s_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800241a:	b590      	push	{r4, r7, lr}
 800241c:	b085      	sub	sp, #20
 800241e:	af00      	add	r7, sp, #0
 8002420:	4604      	mov	r4, r0
 8002422:	4608      	mov	r0, r1
 8002424:	4611      	mov	r1, r2
 8002426:	461a      	mov	r2, r3
 8002428:	4623      	mov	r3, r4
 800242a:	80fb      	strh	r3, [r7, #6]
 800242c:	4603      	mov	r3, r0
 800242e:	80bb      	strh	r3, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	807b      	strh	r3, [r7, #2]
 8002434:	4613      	mov	r3, r2
 8002436:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	2b7f      	cmp	r3, #127	@ 0x7f
 800243c:	d850      	bhi.n	80024e0 <St7735s_FillRectangle+0xc6>
 800243e:	88bb      	ldrh	r3, [r7, #4]
 8002440:	2b9f      	cmp	r3, #159	@ 0x9f
 8002442:	d84d      	bhi.n	80024e0 <St7735s_FillRectangle+0xc6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002444:	88fa      	ldrh	r2, [r7, #6]
 8002446:	887b      	ldrh	r3, [r7, #2]
 8002448:	4413      	add	r3, r2
 800244a:	2b80      	cmp	r3, #128	@ 0x80
 800244c:	dd03      	ble.n	8002456 <St7735s_FillRectangle+0x3c>
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002454:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002456:	88ba      	ldrh	r2, [r7, #4]
 8002458:	883b      	ldrh	r3, [r7, #0]
 800245a:	4413      	add	r3, r2
 800245c:	2ba0      	cmp	r3, #160	@ 0xa0
 800245e:	dd03      	ble.n	8002468 <St7735s_FillRectangle+0x4e>
 8002460:	88bb      	ldrh	r3, [r7, #4]
 8002462:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8002466:	803b      	strh	r3, [r7, #0]

    St7735s_Select();
 8002468:	f7ff fe34 	bl	80020d4 <St7735s_Select>
    St7735s_SetAddressWindow(x, y, x+w-1, y+h-1);
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	b2d8      	uxtb	r0, r3
 8002470:	88bb      	ldrh	r3, [r7, #4]
 8002472:	b2d9      	uxtb	r1, r3
 8002474:	88fb      	ldrh	r3, [r7, #6]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	887b      	ldrh	r3, [r7, #2]
 800247a:	b2db      	uxtb	r3, r3
 800247c:	4413      	add	r3, r2
 800247e:	b2db      	uxtb	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	b2dc      	uxtb	r4, r3
 8002484:	88bb      	ldrh	r3, [r7, #4]
 8002486:	b2da      	uxtb	r2, r3
 8002488:	883b      	ldrh	r3, [r7, #0]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	4413      	add	r3, r2
 800248e:	b2db      	uxtb	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b2db      	uxtb	r3, r3
 8002494:	4622      	mov	r2, r4
 8002496:	f7ff feed 	bl	8002274 <St7735s_SetAddressWindow>

    uint8_t data[2] = { color >> 8, color & 0xFF };
 800249a:	8c3b      	ldrh	r3, [r7, #32]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	b29b      	uxth	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	733b      	strb	r3, [r7, #12]
 80024a4:	8c3b      	ldrh	r3, [r7, #32]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	737b      	strb	r3, [r7, #13]
    for(y = h; y > 0; y--) {
 80024aa:	883b      	ldrh	r3, [r7, #0]
 80024ac:	80bb      	strh	r3, [r7, #4]
 80024ae:	e011      	b.n	80024d4 <St7735s_FillRectangle+0xba>
        for(x = w; x > 0; x--) {
 80024b0:	887b      	ldrh	r3, [r7, #2]
 80024b2:	80fb      	strh	r3, [r7, #6]
 80024b4:	e008      	b.n	80024c8 <St7735s_FillRectangle+0xae>
            St7735s_WriteData(data, 2);
 80024b6:	f107 030c 	add.w	r3, r7, #12
 80024ba:	2102      	movs	r1, #2
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fe61 	bl	8002184 <St7735s_WriteData>
        for(x = w; x > 0; x--) {
 80024c2:	88fb      	ldrh	r3, [r7, #6]
 80024c4:	3b01      	subs	r3, #1
 80024c6:	80fb      	strh	r3, [r7, #6]
 80024c8:	88fb      	ldrh	r3, [r7, #6]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f3      	bne.n	80024b6 <St7735s_FillRectangle+0x9c>
    for(y = h; y > 0; y--) {
 80024ce:	88bb      	ldrh	r3, [r7, #4]
 80024d0:	3b01      	subs	r3, #1
 80024d2:	80bb      	strh	r3, [r7, #4]
 80024d4:	88bb      	ldrh	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1ea      	bne.n	80024b0 <St7735s_FillRectangle+0x96>
        }
    }
    St7735s_UnSelect();
 80024da:	f7ff fe07 	bl	80020ec <St7735s_UnSelect>
 80024de:	e000      	b.n	80024e2 <St7735s_FillRectangle+0xc8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80024e0:	bf00      	nop
}
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd90      	pop	{r4, r7, pc}

080024e8 <St7735s_FillScreen>:

void St7735s_FillScreen(uint16_t color) {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	4603      	mov	r3, r0
 80024f0:	80fb      	strh	r3, [r7, #6]
    St7735s_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	23a0      	movs	r3, #160	@ 0xa0
 80024f8:	2280      	movs	r2, #128	@ 0x80
 80024fa:	2100      	movs	r1, #0
 80024fc:	2000      	movs	r0, #0
 80024fe:	f7ff ff8c 	bl	800241a <St7735s_FillRectangle>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800250c:	b590      	push	{r4, r7, lr}
 800250e:	b085      	sub	sp, #20
 8002510:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002512:	f000 fbe7 	bl	8002ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002516:	f000 f9bb 	bl	8002890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800251a:	f000 fa53 	bl	80029c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800251e:	f000 fa33 	bl	8002988 <MX_DMA_Init>
  MX_SPI1_Init();
 8002522:	f000 f9fb 	bl	800291c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  St7735s_Init();
 8002526:	f7ff fe8b 	bl	8002240 <St7735s_Init>
  NewGame(&game);
 800252a:	48a5      	ldr	r0, [pc, #660]	@ (80027c0 <main+0x2b4>)
 800252c:	f7fe fcae 	bl	8000e8c <NewGame>
  GameMenu();
 8002530:	f7fe fcea 	bl	8000f08 <GameMenu>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  int button = Button();
 8002534:	f7fe faa0 	bl	8000a78 <Button>
 8002538:	6078      	str	r0, [r7, #4]
	  switch (button){
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3b01      	subs	r3, #1
 800253e:	2b04      	cmp	r3, #4
 8002540:	d8f8      	bhi.n	8002534 <main+0x28>
 8002542:	a201      	add	r2, pc, #4	@ (adr r2, 8002548 <main+0x3c>)
 8002544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002548:	0800255d 	.word	0x0800255d
 800254c:	08002769 	.word	0x08002769
 8002550:	080027e1 	.word	0x080027e1
 8002554:	08002837 	.word	0x08002837
 8002558:	08002851 	.word	0x08002851
	  case CLICK:
		  if(game.state == MENU){
 800255c:	4b98      	ldr	r3, [pc, #608]	@ (80027c0 <main+0x2b4>)
 800255e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002560:	2b04      	cmp	r3, #4
 8002562:	d125      	bne.n	80025b0 <main+0xa4>
			  if(game.cur.second == 0) game.mode = TWO_PLAYER;
 8002564:	4b96      	ldr	r3, [pc, #600]	@ (80027c0 <main+0x2b4>)
 8002566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <main+0x66>
 800256c:	4b94      	ldr	r3, [pc, #592]	@ (80027c0 <main+0x2b4>)
 800256e:	2201      	movs	r2, #1
 8002570:	62da      	str	r2, [r3, #44]	@ 0x2c
			  if(game.cur.second == 1) game.mode = ONE_PLAYER;
 8002572:	4b93      	ldr	r3, [pc, #588]	@ (80027c0 <main+0x2b4>)
 8002574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002576:	2b01      	cmp	r3, #1
 8002578:	d102      	bne.n	8002580 <main+0x74>
 800257a:	4b91      	ldr	r3, [pc, #580]	@ (80027c0 <main+0x2b4>)
 800257c:	2202      	movs	r2, #2
 800257e:	62da      	str	r2, [r3, #44]	@ 0x2c
			  DrawBoard();
 8002580:	f7fe fb26 	bl	8000bd0 <DrawBoard>
			  St7735s_FillRectangle(6, 22, 36, 36, ST7735_WHITE);
 8002584:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	2324      	movs	r3, #36	@ 0x24
 800258c:	2224      	movs	r2, #36	@ 0x24
 800258e:	2116      	movs	r1, #22
 8002590:	2006      	movs	r0, #6
 8002592:	f7ff ff42 	bl	800241a <St7735s_FillRectangle>
			  game.state = RUNNING;
 8002596:	4b8a      	ldr	r3, [pc, #552]	@ (80027c0 <main+0x2b4>)
 8002598:	2200      	movs	r2, #0
 800259a:	629a      	str	r2, [r3, #40]	@ 0x28
			  game.player = _X;
 800259c:	4b88      	ldr	r3, [pc, #544]	@ (80027c0 <main+0x2b4>)
 800259e:	2201      	movs	r2, #1
 80025a0:	625a      	str	r2, [r3, #36]	@ 0x24
			  game.cur.first = 0;
 80025a2:	4b87      	ldr	r3, [pc, #540]	@ (80027c0 <main+0x2b4>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	631a      	str	r2, [r3, #48]	@ 0x30
			  game.cur.second = 0;
 80025a8:	4b85      	ldr	r3, [pc, #532]	@ (80027c0 <main+0x2b4>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	635a      	str	r2, [r3, #52]	@ 0x34
						  End(game.state);
					  }
				  }
		      }
		  }
	  break;
 80025ae:	e15c      	b.n	800286a <main+0x35e>
		  }else if(game.state == RUNNING){
 80025b0:	4b83      	ldr	r3, [pc, #524]	@ (80027c0 <main+0x2b4>)
 80025b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f040 8158 	bne.w	800286a <main+0x35e>
			  if(game.board[game.cur.first][game.cur.second] == EMPTY){
 80025ba:	4b81      	ldr	r3, [pc, #516]	@ (80027c0 <main+0x2b4>)
 80025bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025be:	4b80      	ldr	r3, [pc, #512]	@ (80027c0 <main+0x2b4>)
 80025c0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025c2:	487f      	ldr	r0, [pc, #508]	@ (80027c0 <main+0x2b4>)
 80025c4:	4613      	mov	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4413      	add	r3, r2
 80025ca:	440b      	add	r3, r1
 80025cc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f040 814a 	bne.w	800286a <main+0x35e>
				  game.board[game.cur.first][game.cur.second] = game.player;
 80025d6:	4b7a      	ldr	r3, [pc, #488]	@ (80027c0 <main+0x2b4>)
 80025d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025da:	4b79      	ldr	r3, [pc, #484]	@ (80027c0 <main+0x2b4>)
 80025dc:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80025de:	4b78      	ldr	r3, [pc, #480]	@ (80027c0 <main+0x2b4>)
 80025e0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80025e2:	4c77      	ldr	r4, [pc, #476]	@ (80027c0 <main+0x2b4>)
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	4403      	add	r3, r0
 80025ec:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
				  if(game.mode == TWO_PLAYER){
 80025f0:	4b73      	ldr	r3, [pc, #460]	@ (80027c0 <main+0x2b4>)
 80025f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d153      	bne.n	80026a0 <main+0x194>
					  if(game.player == _X)
 80025f8:	4b71      	ldr	r3, [pc, #452]	@ (80027c0 <main+0x2b4>)
 80025fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d11c      	bne.n	800263a <main+0x12e>
						  DrawXO(X, 8 + ((BOARD_WIDTH/N) * game.cur.first),
 8002600:	4b6f      	ldr	r3, [pc, #444]	@ (80027c0 <main+0x2b4>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002604:	b29b      	uxth	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	0092      	lsls	r2, r2, #2
 800260a:	4413      	add	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	b29b      	uxth	r3, r3
 8002610:	3308      	adds	r3, #8
 8002612:	b299      	uxth	r1, r3
								  24 +((BOARD_HEIGHT/N) * game.cur.second), ST7735_RED, ST7735_WHITE);
 8002614:	4b6a      	ldr	r3, [pc, #424]	@ (80027c0 <main+0x2b4>)
 8002616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
						  DrawXO(X, 8 + ((BOARD_WIDTH/N) * game.cur.first),
 8002618:	b29b      	uxth	r3, r3
 800261a:	461a      	mov	r2, r3
 800261c:	0092      	lsls	r2, r2, #2
 800261e:	4413      	add	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	b29b      	uxth	r3, r3
 8002624:	3318      	adds	r3, #24
 8002626:	b29a      	uxth	r2, r3
 8002628:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002632:	4864      	ldr	r0, [pc, #400]	@ (80027c4 <main+0x2b8>)
 8002634:	f7fe fbb2 	bl	8000d9c <DrawXO>
 8002638:	e01a      	b.n	8002670 <main+0x164>
					  else DrawXO(O, 8 + ((BOARD_WIDTH/N) * game.cur.first),
 800263a:	4b61      	ldr	r3, [pc, #388]	@ (80027c0 <main+0x2b4>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263e:	b29b      	uxth	r3, r3
 8002640:	461a      	mov	r2, r3
 8002642:	0092      	lsls	r2, r2, #2
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	b29b      	uxth	r3, r3
 800264a:	3308      	adds	r3, #8
 800264c:	b299      	uxth	r1, r3
							  24 +((BOARD_HEIGHT/N) * game.cur.second), ST7735_BLUE, ST7735_WHITE);
 800264e:	4b5c      	ldr	r3, [pc, #368]	@ (80027c0 <main+0x2b4>)
 8002650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
					  else DrawXO(O, 8 + ((BOARD_WIDTH/N) * game.cur.first),
 8002652:	b29b      	uxth	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	0092      	lsls	r2, r2, #2
 8002658:	4413      	add	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	b29b      	uxth	r3, r3
 800265e:	3318      	adds	r3, #24
 8002660:	b29a      	uxth	r2, r3
 8002662:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	231f      	movs	r3, #31
 800266a:	4857      	ldr	r0, [pc, #348]	@ (80027c8 <main+0x2bc>)
 800266c:	f7fe fb96 	bl	8000d9c <DrawXO>
					  if (game.player == _X)game.player = _O;
 8002670:	4b53      	ldr	r3, [pc, #332]	@ (80027c0 <main+0x2b4>)
 8002672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002674:	2b01      	cmp	r3, #1
 8002676:	d103      	bne.n	8002680 <main+0x174>
 8002678:	4b51      	ldr	r3, [pc, #324]	@ (80027c0 <main+0x2b4>)
 800267a:	2202      	movs	r2, #2
 800267c:	625a      	str	r2, [r3, #36]	@ 0x24
 800267e:	e002      	b.n	8002686 <main+0x17a>
					  else game.player = _X;
 8002680:	4b4f      	ldr	r3, [pc, #316]	@ (80027c0 <main+0x2b4>)
 8002682:	2201      	movs	r2, #1
 8002684:	625a      	str	r2, [r3, #36]	@ 0x24
					  game.state = CheckWin(game.board, &game.cur);
 8002686:	4951      	ldr	r1, [pc, #324]	@ (80027cc <main+0x2c0>)
 8002688:	484d      	ldr	r0, [pc, #308]	@ (80027c0 <main+0x2b4>)
 800268a:	f7fe ffc1 	bl	8001610 <CheckWin>
 800268e:	4603      	mov	r3, r0
 8002690:	4a4b      	ldr	r2, [pc, #300]	@ (80027c0 <main+0x2b4>)
 8002692:	6293      	str	r3, [r2, #40]	@ 0x28
					  End(game.state);
 8002694:	4b4a      	ldr	r3, [pc, #296]	@ (80027c0 <main+0x2b4>)
 8002696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff f9e7 	bl	8001a6c <End>
	  break;
 800269e:	e0e4      	b.n	800286a <main+0x35e>
				  }else if(game.mode == ONE_PLAYER){
 80026a0:	4b47      	ldr	r3, [pc, #284]	@ (80027c0 <main+0x2b4>)
 80026a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	f040 80e0 	bne.w	800286a <main+0x35e>
					  DrawXO(X, 8 + ((BOARD_WIDTH/N) * game.cur.first),
 80026aa:	4b45      	ldr	r3, [pc, #276]	@ (80027c0 <main+0x2b4>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	0092      	lsls	r2, r2, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	3308      	adds	r3, #8
 80026bc:	b299      	uxth	r1, r3
					  24 +((BOARD_HEIGHT/N) * game.cur.second), ST7735_RED, ST7735_WHITE);
 80026be:	4b40      	ldr	r3, [pc, #256]	@ (80027c0 <main+0x2b4>)
 80026c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
					  DrawXO(X, 8 + ((BOARD_WIDTH/N) * game.cur.first),
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	461a      	mov	r2, r3
 80026c6:	0092      	lsls	r2, r2, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3318      	adds	r3, #24
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80026dc:	4839      	ldr	r0, [pc, #228]	@ (80027c4 <main+0x2b8>)
 80026de:	f7fe fb5d 	bl	8000d9c <DrawXO>
					  game.state = CheckWin(game.board, &game.cur);
 80026e2:	493a      	ldr	r1, [pc, #232]	@ (80027cc <main+0x2c0>)
 80026e4:	4836      	ldr	r0, [pc, #216]	@ (80027c0 <main+0x2b4>)
 80026e6:	f7fe ff93 	bl	8001610 <CheckWin>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4a34      	ldr	r2, [pc, #208]	@ (80027c0 <main+0x2b4>)
 80026ee:	6293      	str	r3, [r2, #40]	@ 0x28
					  End(game.state);
 80026f0:	4b33      	ldr	r3, [pc, #204]	@ (80027c0 <main+0x2b4>)
 80026f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff f9b9 	bl	8001a6c <End>
					  if (game.player == _X)game.player = _O;
 80026fa:	4b31      	ldr	r3, [pc, #196]	@ (80027c0 <main+0x2b4>)
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d103      	bne.n	800270a <main+0x1fe>
 8002702:	4b2f      	ldr	r3, [pc, #188]	@ (80027c0 <main+0x2b4>)
 8002704:	2202      	movs	r2, #2
 8002706:	625a      	str	r2, [r3, #36]	@ 0x24
 8002708:	e002      	b.n	8002710 <main+0x204>
					  else game.player = _X;
 800270a:	4b2d      	ldr	r3, [pc, #180]	@ (80027c0 <main+0x2b4>)
 800270c:	2201      	movs	r2, #1
 800270e:	625a      	str	r2, [r3, #36]	@ 0x24
					  if(game.state == RUNNING){
 8002710:	4b2b      	ldr	r3, [pc, #172]	@ (80027c0 <main+0x2b4>)
 8002712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002714:	2b00      	cmp	r3, #0
 8002716:	f040 80a8 	bne.w	800286a <main+0x35e>
						  BotMove(&game);
 800271a:	4829      	ldr	r0, [pc, #164]	@ (80027c0 <main+0x2b4>)
 800271c:	f7ff f9ea 	bl	8001af4 <BotMove>
						  game.state = CheckWin(game.board, &game.bot_cur);
 8002720:	492b      	ldr	r1, [pc, #172]	@ (80027d0 <main+0x2c4>)
 8002722:	4827      	ldr	r0, [pc, #156]	@ (80027c0 <main+0x2b4>)
 8002724:	f7fe ff74 	bl	8001610 <CheckWin>
 8002728:	4603      	mov	r3, r0
 800272a:	4a25      	ldr	r2, [pc, #148]	@ (80027c0 <main+0x2b4>)
 800272c:	6293      	str	r3, [r2, #40]	@ 0x28
						  game.board[game.bot_cur.first][game.bot_cur.second] =_O;
 800272e:	4b24      	ldr	r3, [pc, #144]	@ (80027c0 <main+0x2b4>)
 8002730:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002732:	4b23      	ldr	r3, [pc, #140]	@ (80027c0 <main+0x2b4>)
 8002734:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002736:	4822      	ldr	r0, [pc, #136]	@ (80027c0 <main+0x2b4>)
 8002738:	4613      	mov	r3, r2
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	4413      	add	r3, r2
 800273e:	440b      	add	r3, r1
 8002740:	2202      	movs	r2, #2
 8002742:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
						  if (game.player == _X)game.player = _O;
 8002746:	4b1e      	ldr	r3, [pc, #120]	@ (80027c0 <main+0x2b4>)
 8002748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274a:	2b01      	cmp	r3, #1
 800274c:	d103      	bne.n	8002756 <main+0x24a>
 800274e:	4b1c      	ldr	r3, [pc, #112]	@ (80027c0 <main+0x2b4>)
 8002750:	2202      	movs	r2, #2
 8002752:	625a      	str	r2, [r3, #36]	@ 0x24
 8002754:	e002      	b.n	800275c <main+0x250>
						  else game.player = _X;
 8002756:	4b1a      	ldr	r3, [pc, #104]	@ (80027c0 <main+0x2b4>)
 8002758:	2201      	movs	r2, #1
 800275a:	625a      	str	r2, [r3, #36]	@ 0x24
						  End(game.state);
 800275c:	4b18      	ldr	r3, [pc, #96]	@ (80027c0 <main+0x2b4>)
 800275e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff f983 	bl	8001a6c <End>
	  break;
 8002766:	e080      	b.n	800286a <main+0x35e>
	  case UP:
		  if(game.cur.second != 0){
 8002768:	4b15      	ldr	r3, [pc, #84]	@ (80027c0 <main+0x2b4>)
 800276a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800276c:	2b00      	cmp	r3, #0
 800276e:	d07e      	beq.n	800286e <main+0x362>
		  if(game.state == MENU) {
 8002770:	4b13      	ldr	r3, [pc, #76]	@ (80027c0 <main+0x2b4>)
 8002772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002774:	2b04      	cmp	r3, #4
 8002776:	d119      	bne.n	80027ac <main+0x2a0>
			  St7735s_WriteString(36, 40, "Hai nguoi", Font7x10, ST7735_RED, ST7735_WHITE);
 8002778:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800277c:	9301      	str	r3, [sp, #4]
 800277e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	4b13      	ldr	r3, [pc, #76]	@ (80027d4 <main+0x2c8>)
 8002786:	4a14      	ldr	r2, [pc, #80]	@ (80027d8 <main+0x2cc>)
 8002788:	2128      	movs	r1, #40	@ 0x28
 800278a:	2024      	movs	r0, #36	@ 0x24
 800278c:	f7ff fe09 	bl	80023a2 <St7735s_WriteString>
			  St7735s_WriteString(36, 90, "Mot nguoi", Font7x10, ST7735_RED, ST7735_BLACK);
 8002790:	2300      	movs	r3, #0
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	4b0e      	ldr	r3, [pc, #56]	@ (80027d4 <main+0x2c8>)
 800279c:	4a0f      	ldr	r2, [pc, #60]	@ (80027dc <main+0x2d0>)
 800279e:	215a      	movs	r1, #90	@ 0x5a
 80027a0:	2024      	movs	r0, #36	@ 0x24
 80027a2:	f7ff fdfe 	bl	80023a2 <St7735s_WriteString>
			  game.cur.second = 0;
 80027a6:	4b06      	ldr	r3, [pc, #24]	@ (80027c0 <main+0x2b4>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	635a      	str	r2, [r3, #52]	@ 0x34
		  }
		  if(game.state == RUNNING) MoveCur(&game, button);
 80027ac:	4b04      	ldr	r3, [pc, #16]	@ (80027c0 <main+0x2b4>)
 80027ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d15c      	bne.n	800286e <main+0x362>
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4802      	ldr	r0, [pc, #8]	@ (80027c0 <main+0x2b4>)
 80027b8:	f7fe fbcc 	bl	8000f54 <MoveCur>
		  }
	  break;
 80027bc:	e057      	b.n	800286e <main+0x362>
 80027be:	bf00      	nop
 80027c0:	20000128 	.word	0x20000128
 80027c4:	20000168 	.word	0x20000168
 80027c8:	200001e8 	.word	0x200001e8
 80027cc:	20000158 	.word	0x20000158
 80027d0:	20000160 	.word	0x20000160
 80027d4:	08005cf4 	.word	0x08005cf4
 80027d8:	080054f8 	.word	0x080054f8
 80027dc:	08005504 	.word	0x08005504
	  case DOWN:
		  if(game.cur.second != 2){
 80027e0:	4b27      	ldr	r3, [pc, #156]	@ (8002880 <main+0x374>)
 80027e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d044      	beq.n	8002872 <main+0x366>
		  if(game.state == MENU){
 80027e8:	4b25      	ldr	r3, [pc, #148]	@ (8002880 <main+0x374>)
 80027ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d119      	bne.n	8002824 <main+0x318>
			  St7735s_WriteString(36, 40, "Hai nguoi", Font7x10, ST7735_RED, ST7735_BLACK);
 80027f0:	2300      	movs	r3, #0
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	4b22      	ldr	r3, [pc, #136]	@ (8002884 <main+0x378>)
 80027fc:	4a22      	ldr	r2, [pc, #136]	@ (8002888 <main+0x37c>)
 80027fe:	2128      	movs	r1, #40	@ 0x28
 8002800:	2024      	movs	r0, #36	@ 0x24
 8002802:	f7ff fdce 	bl	80023a2 <St7735s_WriteString>
			  St7735s_WriteString(36, 90, "Mot nguoi", Font7x10, ST7735_RED, ST7735_WHITE);
 8002806:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	4b1c      	ldr	r3, [pc, #112]	@ (8002884 <main+0x378>)
 8002814:	4a1d      	ldr	r2, [pc, #116]	@ (800288c <main+0x380>)
 8002816:	215a      	movs	r1, #90	@ 0x5a
 8002818:	2024      	movs	r0, #36	@ 0x24
 800281a:	f7ff fdc2 	bl	80023a2 <St7735s_WriteString>
			  game.cur.second = 1;
 800281e:	4b18      	ldr	r3, [pc, #96]	@ (8002880 <main+0x374>)
 8002820:	2201      	movs	r2, #1
 8002822:	635a      	str	r2, [r3, #52]	@ 0x34
		  }if(game.state == RUNNING) MoveCur(&game, button);
 8002824:	4b16      	ldr	r3, [pc, #88]	@ (8002880 <main+0x374>)
 8002826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002828:	2b00      	cmp	r3, #0
 800282a:	d122      	bne.n	8002872 <main+0x366>
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4814      	ldr	r0, [pc, #80]	@ (8002880 <main+0x374>)
 8002830:	f7fe fb90 	bl	8000f54 <MoveCur>
		  }
	  break;
 8002834:	e01d      	b.n	8002872 <main+0x366>
	  case RIGHT:
		  if((game.cur.first < 2)&&(game.state == RUNNING))
 8002836:	4b12      	ldr	r3, [pc, #72]	@ (8002880 <main+0x374>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	2b01      	cmp	r3, #1
 800283c:	dc1b      	bgt.n	8002876 <main+0x36a>
 800283e:	4b10      	ldr	r3, [pc, #64]	@ (8002880 <main+0x374>)
 8002840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002842:	2b00      	cmp	r3, #0
 8002844:	d117      	bne.n	8002876 <main+0x36a>
		  MoveCur(&game, button);
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	480d      	ldr	r0, [pc, #52]	@ (8002880 <main+0x374>)
 800284a:	f7fe fb83 	bl	8000f54 <MoveCur>
	  break;
 800284e:	e012      	b.n	8002876 <main+0x36a>
	  case LEFT:
		  if((game.cur.first > 0)&&(game.state == RUNNING))
 8002850:	4b0b      	ldr	r3, [pc, #44]	@ (8002880 <main+0x374>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002854:	2b00      	cmp	r3, #0
 8002856:	dd10      	ble.n	800287a <main+0x36e>
 8002858:	4b09      	ldr	r3, [pc, #36]	@ (8002880 <main+0x374>)
 800285a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10c      	bne.n	800287a <main+0x36e>
		  MoveCur(&game, button);
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	4807      	ldr	r0, [pc, #28]	@ (8002880 <main+0x374>)
 8002864:	f7fe fb76 	bl	8000f54 <MoveCur>
	  break;
 8002868:	e007      	b.n	800287a <main+0x36e>
	  break;
 800286a:	bf00      	nop
 800286c:	e662      	b.n	8002534 <main+0x28>
	  break;
 800286e:	bf00      	nop
 8002870:	e660      	b.n	8002534 <main+0x28>
	  break;
 8002872:	bf00      	nop
 8002874:	e65e      	b.n	8002534 <main+0x28>
	  break;
 8002876:	bf00      	nop
 8002878:	e65c      	b.n	8002534 <main+0x28>
	  break;
 800287a:	bf00      	nop
 800287c:	e65a      	b.n	8002534 <main+0x28>
 800287e:	bf00      	nop
 8002880:	20000128 	.word	0x20000128
 8002884:	08005cf4 	.word	0x08005cf4
 8002888:	080054f8 	.word	0x080054f8
 800288c:	08005504 	.word	0x08005504

08002890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b090      	sub	sp, #64	@ 0x40
 8002894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002896:	f107 0318 	add.w	r3, r7, #24
 800289a:	2228      	movs	r2, #40	@ 0x28
 800289c:	2100      	movs	r1, #0
 800289e:	4618      	mov	r0, r3
 80028a0:	f001 fe9b 	bl	80045da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028a4:	1d3b      	adds	r3, r7, #4
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	609a      	str	r2, [r3, #8]
 80028ae:	60da      	str	r2, [r3, #12]
 80028b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028b2:	2301      	movs	r3, #1
 80028b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80028bc:	2300      	movs	r3, #0
 80028be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028c0:	2301      	movs	r3, #1
 80028c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028c4:	2302      	movs	r3, #2
 80028c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80028ce:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80028d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028d4:	f107 0318 	add.w	r3, r7, #24
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 ff23 	bl	8003724 <HAL_RCC_OscConfig>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80028e4:	f000 f8e8 	bl	8002ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028e8:	230f      	movs	r3, #15
 80028ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028ec:	2302      	movs	r3, #2
 80028ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	2100      	movs	r1, #0
 8002902:	4618      	mov	r0, r3
 8002904:	f001 f990 	bl	8003c28 <HAL_RCC_ClockConfig>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800290e:	f000 f8d3 	bl	8002ab8 <Error_Handler>
  }
}
 8002912:	bf00      	nop
 8002914:	3740      	adds	r7, #64	@ 0x40
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002920:	4b17      	ldr	r3, [pc, #92]	@ (8002980 <MX_SPI1_Init+0x64>)
 8002922:	4a18      	ldr	r2, [pc, #96]	@ (8002984 <MX_SPI1_Init+0x68>)
 8002924:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002926:	4b16      	ldr	r3, [pc, #88]	@ (8002980 <MX_SPI1_Init+0x64>)
 8002928:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800292c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800292e:	4b14      	ldr	r3, [pc, #80]	@ (8002980 <MX_SPI1_Init+0x64>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002934:	4b12      	ldr	r3, [pc, #72]	@ (8002980 <MX_SPI1_Init+0x64>)
 8002936:	2200      	movs	r2, #0
 8002938:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800293a:	4b11      	ldr	r3, [pc, #68]	@ (8002980 <MX_SPI1_Init+0x64>)
 800293c:	2200      	movs	r2, #0
 800293e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002940:	4b0f      	ldr	r3, [pc, #60]	@ (8002980 <MX_SPI1_Init+0x64>)
 8002942:	2200      	movs	r2, #0
 8002944:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002946:	4b0e      	ldr	r3, [pc, #56]	@ (8002980 <MX_SPI1_Init+0x64>)
 8002948:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800294c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800294e:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <MX_SPI1_Init+0x64>)
 8002950:	2200      	movs	r2, #0
 8002952:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002954:	4b0a      	ldr	r3, [pc, #40]	@ (8002980 <MX_SPI1_Init+0x64>)
 8002956:	2200      	movs	r2, #0
 8002958:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800295a:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <MX_SPI1_Init+0x64>)
 800295c:	2200      	movs	r2, #0
 800295e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002960:	4b07      	ldr	r3, [pc, #28]	@ (8002980 <MX_SPI1_Init+0x64>)
 8002962:	2200      	movs	r2, #0
 8002964:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002966:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <MX_SPI1_Init+0x64>)
 8002968:	220a      	movs	r2, #10
 800296a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800296c:	4804      	ldr	r0, [pc, #16]	@ (8002980 <MX_SPI1_Init+0x64>)
 800296e:	f001 fab7 	bl	8003ee0 <HAL_SPI_Init>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002978:	f000 f89e 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800297c:	bf00      	nop
 800297e:	bd80      	pop	{r7, pc}
 8002980:	2000008c 	.word	0x2000008c
 8002984:	40013000 	.word	0x40013000

08002988 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800298e:	4b0c      	ldr	r3, [pc, #48]	@ (80029c0 <MX_DMA_Init+0x38>)
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	4a0b      	ldr	r2, [pc, #44]	@ (80029c0 <MX_DMA_Init+0x38>)
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	6153      	str	r3, [r2, #20]
 800299a:	4b09      	ldr	r3, [pc, #36]	@ (80029c0 <MX_DMA_Init+0x38>)
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2100      	movs	r1, #0
 80029aa:	200d      	movs	r0, #13
 80029ac:	f000 faf7 	bl	8002f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80029b0:	200d      	movs	r0, #13
 80029b2:	f000 fb10 	bl	8002fd6 <HAL_NVIC_EnableIRQ>

}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000

080029c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ca:	f107 0310 	add.w	r3, r7, #16
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	605a      	str	r2, [r3, #4]
 80029d4:	609a      	str	r2, [r3, #8]
 80029d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d8:	4b34      	ldr	r3, [pc, #208]	@ (8002aac <MX_GPIO_Init+0xe8>)
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	4a33      	ldr	r2, [pc, #204]	@ (8002aac <MX_GPIO_Init+0xe8>)
 80029de:	f043 0310 	orr.w	r3, r3, #16
 80029e2:	6193      	str	r3, [r2, #24]
 80029e4:	4b31      	ldr	r3, [pc, #196]	@ (8002aac <MX_GPIO_Init+0xe8>)
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029f0:	4b2e      	ldr	r3, [pc, #184]	@ (8002aac <MX_GPIO_Init+0xe8>)
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	4a2d      	ldr	r2, [pc, #180]	@ (8002aac <MX_GPIO_Init+0xe8>)
 80029f6:	f043 0320 	orr.w	r3, r3, #32
 80029fa:	6193      	str	r3, [r2, #24]
 80029fc:	4b2b      	ldr	r3, [pc, #172]	@ (8002aac <MX_GPIO_Init+0xe8>)
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	f003 0320 	and.w	r3, r3, #32
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a08:	4b28      	ldr	r3, [pc, #160]	@ (8002aac <MX_GPIO_Init+0xe8>)
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	4a27      	ldr	r2, [pc, #156]	@ (8002aac <MX_GPIO_Init+0xe8>)
 8002a0e:	f043 0304 	orr.w	r3, r3, #4
 8002a12:	6193      	str	r3, [r2, #24]
 8002a14:	4b25      	ldr	r3, [pc, #148]	@ (8002aac <MX_GPIO_Init+0xe8>)
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	607b      	str	r3, [r7, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a20:	4b22      	ldr	r3, [pc, #136]	@ (8002aac <MX_GPIO_Init+0xe8>)
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	4a21      	ldr	r2, [pc, #132]	@ (8002aac <MX_GPIO_Init+0xe8>)
 8002a26:	f043 0308 	orr.w	r3, r3, #8
 8002a2a:	6193      	str	r3, [r2, #24]
 8002a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002aac <MX_GPIO_Init+0xe8>)
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	603b      	str	r3, [r7, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a3e:	481c      	ldr	r0, [pc, #112]	@ (8002ab0 <MX_GPIO_Init+0xec>)
 8002a40:	f000 fe57 	bl	80036f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 8002a44:	2200      	movs	r2, #0
 8002a46:	f240 4103 	movw	r1, #1027	@ 0x403
 8002a4a:	481a      	ldr	r0, [pc, #104]	@ (8002ab4 <MX_GPIO_Init+0xf0>)
 8002a4c:	f000 fe51 	bl	80036f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a56:	2301      	movs	r3, #1
 8002a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a62:	f107 0310 	add.w	r3, r7, #16
 8002a66:	4619      	mov	r1, r3
 8002a68:	4811      	ldr	r0, [pc, #68]	@ (8002ab0 <MX_GPIO_Init+0xec>)
 8002a6a:	f000 fca7 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 8002a6e:	f240 4303 	movw	r3, #1027	@ 0x403
 8002a72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a74:	2301      	movs	r3, #1
 8002a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a80:	f107 0310 	add.w	r3, r7, #16
 8002a84:	4619      	mov	r1, r3
 8002a86:	480b      	ldr	r0, [pc, #44]	@ (8002ab4 <MX_GPIO_Init+0xf0>)
 8002a88:	f000 fc98 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002a8c:	23f8      	movs	r3, #248	@ 0xf8
 8002a8e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a94:	2301      	movs	r3, #1
 8002a96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a98:	f107 0310 	add.w	r3, r7, #16
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4805      	ldr	r0, [pc, #20]	@ (8002ab4 <MX_GPIO_Init+0xf0>)
 8002aa0:	f000 fc8c 	bl	80033bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002aa4:	bf00      	nop
 8002aa6:	3720      	adds	r7, #32
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40011000 	.word	0x40011000
 8002ab4:	40010c00 	.word	0x40010c00

08002ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002abc:	b672      	cpsid	i
}
 8002abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ac0:	bf00      	nop
 8002ac2:	e7fd      	b.n	8002ac0 <Error_Handler+0x8>

08002ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002aca:	4b15      	ldr	r3, [pc, #84]	@ (8002b20 <HAL_MspInit+0x5c>)
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	4a14      	ldr	r2, [pc, #80]	@ (8002b20 <HAL_MspInit+0x5c>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6193      	str	r3, [r2, #24]
 8002ad6:	4b12      	ldr	r3, [pc, #72]	@ (8002b20 <HAL_MspInit+0x5c>)
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	60bb      	str	r3, [r7, #8]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8002b20 <HAL_MspInit+0x5c>)
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8002b20 <HAL_MspInit+0x5c>)
 8002ae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aec:	61d3      	str	r3, [r2, #28]
 8002aee:	4b0c      	ldr	r3, [pc, #48]	@ (8002b20 <HAL_MspInit+0x5c>)
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af6:	607b      	str	r3, [r7, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002afa:	4b0a      	ldr	r3, [pc, #40]	@ (8002b24 <HAL_MspInit+0x60>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	4a04      	ldr	r2, [pc, #16]	@ (8002b24 <HAL_MspInit+0x60>)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b16:	bf00      	nop
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40010000 	.word	0x40010000

08002b28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b30:	f107 0310 	add.w	r3, r7, #16
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a2d      	ldr	r2, [pc, #180]	@ (8002bf8 <HAL_SPI_MspInit+0xd0>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d153      	bne.n	8002bf0 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b48:	4b2c      	ldr	r3, [pc, #176]	@ (8002bfc <HAL_SPI_MspInit+0xd4>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	4a2b      	ldr	r2, [pc, #172]	@ (8002bfc <HAL_SPI_MspInit+0xd4>)
 8002b4e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b52:	6193      	str	r3, [r2, #24]
 8002b54:	4b29      	ldr	r3, [pc, #164]	@ (8002bfc <HAL_SPI_MspInit+0xd4>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b60:	4b26      	ldr	r3, [pc, #152]	@ (8002bfc <HAL_SPI_MspInit+0xd4>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	4a25      	ldr	r2, [pc, #148]	@ (8002bfc <HAL_SPI_MspInit+0xd4>)
 8002b66:	f043 0304 	orr.w	r3, r3, #4
 8002b6a:	6193      	str	r3, [r2, #24]
 8002b6c:	4b23      	ldr	r3, [pc, #140]	@ (8002bfc <HAL_SPI_MspInit+0xd4>)
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002b78:	23a0      	movs	r3, #160	@ 0xa0
 8002b7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b80:	2303      	movs	r3, #3
 8002b82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b84:	f107 0310 	add.w	r3, r7, #16
 8002b88:	4619      	mov	r1, r3
 8002b8a:	481d      	ldr	r0, [pc, #116]	@ (8002c00 <HAL_SPI_MspInit+0xd8>)
 8002b8c:	f000 fc16 	bl	80033bc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002b90:	4b1c      	ldr	r3, [pc, #112]	@ (8002c04 <HAL_SPI_MspInit+0xdc>)
 8002b92:	4a1d      	ldr	r2, [pc, #116]	@ (8002c08 <HAL_SPI_MspInit+0xe0>)
 8002b94:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b96:	4b1b      	ldr	r3, [pc, #108]	@ (8002c04 <HAL_SPI_MspInit+0xdc>)
 8002b98:	2210      	movs	r2, #16
 8002b9a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b9c:	4b19      	ldr	r3, [pc, #100]	@ (8002c04 <HAL_SPI_MspInit+0xdc>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ba2:	4b18      	ldr	r3, [pc, #96]	@ (8002c04 <HAL_SPI_MspInit+0xdc>)
 8002ba4:	2280      	movs	r2, #128	@ 0x80
 8002ba6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ba8:	4b16      	ldr	r3, [pc, #88]	@ (8002c04 <HAL_SPI_MspInit+0xdc>)
 8002baa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bae:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002bb0:	4b14      	ldr	r3, [pc, #80]	@ (8002c04 <HAL_SPI_MspInit+0xdc>)
 8002bb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bb6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002bb8:	4b12      	ldr	r3, [pc, #72]	@ (8002c04 <HAL_SPI_MspInit+0xdc>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bbe:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <HAL_SPI_MspInit+0xdc>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002bc4:	480f      	ldr	r0, [pc, #60]	@ (8002c04 <HAL_SPI_MspInit+0xdc>)
 8002bc6:	f000 fa21 	bl	800300c <HAL_DMA_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_SPI_MspInit+0xac>
    {
      Error_Handler();
 8002bd0:	f7ff ff72 	bl	8002ab8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a0b      	ldr	r2, [pc, #44]	@ (8002c04 <HAL_SPI_MspInit+0xdc>)
 8002bd8:	649a      	str	r2, [r3, #72]	@ 0x48
 8002bda:	4a0a      	ldr	r2, [pc, #40]	@ (8002c04 <HAL_SPI_MspInit+0xdc>)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002be0:	2200      	movs	r2, #0
 8002be2:	2100      	movs	r1, #0
 8002be4:	2023      	movs	r0, #35	@ 0x23
 8002be6:	f000 f9da 	bl	8002f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002bea:	2023      	movs	r0, #35	@ 0x23
 8002bec:	f000 f9f3 	bl	8002fd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002bf0:	bf00      	nop
 8002bf2:	3720      	adds	r7, #32
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40013000 	.word	0x40013000
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40010800 	.word	0x40010800
 8002c04:	200000e4 	.word	0x200000e4
 8002c08:	40020030 	.word	0x40020030

08002c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c10:	bf00      	nop
 8002c12:	e7fd      	b.n	8002c10 <NMI_Handler+0x4>

08002c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <HardFault_Handler+0x4>

08002c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c20:	bf00      	nop
 8002c22:	e7fd      	b.n	8002c20 <MemManage_Handler+0x4>

08002c24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c28:	bf00      	nop
 8002c2a:	e7fd      	b.n	8002c28 <BusFault_Handler+0x4>

08002c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c30:	bf00      	nop
 8002c32:	e7fd      	b.n	8002c30 <UsageFault_Handler+0x4>

08002c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr

08002c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c50:	bf00      	nop
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c5c:	f000 f888 	bl	8002d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002c68:	4802      	ldr	r0, [pc, #8]	@ (8002c74 <DMA1_Channel3_IRQHandler+0x10>)
 8002c6a:	f000 faa1 	bl	80031b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	200000e4 	.word	0x200000e4

08002c78 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002c7c:	4802      	ldr	r0, [pc, #8]	@ (8002c88 <SPI1_IRQHandler+0x10>)
 8002c7e:	f001 faf7 	bl	8004270 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	2000008c 	.word	0x2000008c

08002c8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c98:	f7ff fff8 	bl	8002c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c9c:	480b      	ldr	r0, [pc, #44]	@ (8002ccc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002c9e:	490c      	ldr	r1, [pc, #48]	@ (8002cd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002ca0:	4a0c      	ldr	r2, [pc, #48]	@ (8002cd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ca4:	e002      	b.n	8002cac <LoopCopyDataInit>

08002ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002caa:	3304      	adds	r3, #4

08002cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cb0:	d3f9      	bcc.n	8002ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cb2:	4a09      	ldr	r2, [pc, #36]	@ (8002cd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002cb4:	4c09      	ldr	r4, [pc, #36]	@ (8002cdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cb8:	e001      	b.n	8002cbe <LoopFillZerobss>

08002cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cbc:	3204      	adds	r2, #4

08002cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cc0:	d3fb      	bcc.n	8002cba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cc2:	f001 fc99 	bl	80045f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cc6:	f7ff fc21 	bl	800250c <main>
  bx lr
 8002cca:	4770      	bx	lr
  ldr r0, =_sdata
 8002ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cd0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002cd4:	080064c0 	.word	0x080064c0
  ldr r2, =_sbss
 8002cd8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002cdc:	200003a4 	.word	0x200003a4

08002ce0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ce0:	e7fe      	b.n	8002ce0 <ADC1_2_IRQHandler>
	...

08002ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ce8:	4b08      	ldr	r3, [pc, #32]	@ (8002d0c <HAL_Init+0x28>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a07      	ldr	r2, [pc, #28]	@ (8002d0c <HAL_Init+0x28>)
 8002cee:	f043 0310 	orr.w	r3, r3, #16
 8002cf2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cf4:	2003      	movs	r0, #3
 8002cf6:	f000 f947 	bl	8002f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cfa:	200f      	movs	r0, #15
 8002cfc:	f000 f808 	bl	8002d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d00:	f7ff fee0 	bl	8002ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40022000 	.word	0x40022000

08002d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d18:	4b12      	ldr	r3, [pc, #72]	@ (8002d64 <HAL_InitTick+0x54>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4b12      	ldr	r3, [pc, #72]	@ (8002d68 <HAL_InitTick+0x58>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	4619      	mov	r1, r3
 8002d22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 f95f 	bl	8002ff2 <HAL_SYSTICK_Config>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e00e      	b.n	8002d5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b0f      	cmp	r3, #15
 8002d42:	d80a      	bhi.n	8002d5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d44:	2200      	movs	r2, #0
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	f04f 30ff 	mov.w	r0, #4294967295
 8002d4c:	f000 f927 	bl	8002f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d50:	4a06      	ldr	r2, [pc, #24]	@ (8002d6c <HAL_InitTick+0x5c>)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	e000      	b.n	8002d5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20000000 	.word	0x20000000
 8002d68:	20000008 	.word	0x20000008
 8002d6c:	20000004 	.word	0x20000004

08002d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d74:	4b05      	ldr	r3, [pc, #20]	@ (8002d8c <HAL_IncTick+0x1c>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <HAL_IncTick+0x20>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4413      	add	r3, r2
 8002d80:	4a03      	ldr	r2, [pc, #12]	@ (8002d90 <HAL_IncTick+0x20>)
 8002d82:	6013      	str	r3, [r2, #0]
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr
 8002d8c:	20000008 	.word	0x20000008
 8002d90:	20000268 	.word	0x20000268

08002d94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return uwTick;
 8002d98:	4b02      	ldr	r3, [pc, #8]	@ (8002da4 <HAL_GetTick+0x10>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr
 8002da4:	20000268 	.word	0x20000268

08002da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002db0:	f7ff fff0 	bl	8002d94 <HAL_GetTick>
 8002db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc0:	d005      	beq.n	8002dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8002dec <HAL_Delay+0x44>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4413      	add	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dce:	bf00      	nop
 8002dd0:	f7ff ffe0 	bl	8002d94 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d8f7      	bhi.n	8002dd0 <HAL_Delay+0x28>
  {
  }
}
 8002de0:	bf00      	nop
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000008 	.word	0x20000008

08002df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e00:	4b0c      	ldr	r3, [pc, #48]	@ (8002e34 <__NVIC_SetPriorityGrouping+0x44>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e22:	4a04      	ldr	r2, [pc, #16]	@ (8002e34 <__NVIC_SetPriorityGrouping+0x44>)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	60d3      	str	r3, [r2, #12]
}
 8002e28:	bf00      	nop
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e3c:	4b04      	ldr	r3, [pc, #16]	@ (8002e50 <__NVIC_GetPriorityGrouping+0x18>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	0a1b      	lsrs	r3, r3, #8
 8002e42:	f003 0307 	and.w	r3, r3, #7
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	db0b      	blt.n	8002e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	f003 021f 	and.w	r2, r3, #31
 8002e6c:	4906      	ldr	r1, [pc, #24]	@ (8002e88 <__NVIC_EnableIRQ+0x34>)
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	2001      	movs	r0, #1
 8002e76:	fa00 f202 	lsl.w	r2, r0, r2
 8002e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr
 8002e88:	e000e100 	.word	0xe000e100

08002e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	6039      	str	r1, [r7, #0]
 8002e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	db0a      	blt.n	8002eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	490c      	ldr	r1, [pc, #48]	@ (8002ed8 <__NVIC_SetPriority+0x4c>)
 8002ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eaa:	0112      	lsls	r2, r2, #4
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	440b      	add	r3, r1
 8002eb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eb4:	e00a      	b.n	8002ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	4908      	ldr	r1, [pc, #32]	@ (8002edc <__NVIC_SetPriority+0x50>)
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	3b04      	subs	r3, #4
 8002ec4:	0112      	lsls	r2, r2, #4
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	440b      	add	r3, r1
 8002eca:	761a      	strb	r2, [r3, #24]
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	e000e100 	.word	0xe000e100
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b089      	sub	sp, #36	@ 0x24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f1c3 0307 	rsb	r3, r3, #7
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	bf28      	it	cs
 8002efe:	2304      	movcs	r3, #4
 8002f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	3304      	adds	r3, #4
 8002f06:	2b06      	cmp	r3, #6
 8002f08:	d902      	bls.n	8002f10 <NVIC_EncodePriority+0x30>
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3b03      	subs	r3, #3
 8002f0e:	e000      	b.n	8002f12 <NVIC_EncodePriority+0x32>
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f14:	f04f 32ff 	mov.w	r2, #4294967295
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43da      	mvns	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	401a      	ands	r2, r3
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f28:	f04f 31ff 	mov.w	r1, #4294967295
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f32:	43d9      	mvns	r1, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f38:	4313      	orrs	r3, r2
         );
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3724      	adds	r7, #36	@ 0x24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr

08002f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f54:	d301      	bcc.n	8002f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f56:	2301      	movs	r3, #1
 8002f58:	e00f      	b.n	8002f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f84 <SysTick_Config+0x40>)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f62:	210f      	movs	r1, #15
 8002f64:	f04f 30ff 	mov.w	r0, #4294967295
 8002f68:	f7ff ff90 	bl	8002e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f6c:	4b05      	ldr	r3, [pc, #20]	@ (8002f84 <SysTick_Config+0x40>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f72:	4b04      	ldr	r3, [pc, #16]	@ (8002f84 <SysTick_Config+0x40>)
 8002f74:	2207      	movs	r2, #7
 8002f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	e000e010 	.word	0xe000e010

08002f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff ff2d 	bl	8002df0 <__NVIC_SetPriorityGrouping>
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b086      	sub	sp, #24
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fb0:	f7ff ff42 	bl	8002e38 <__NVIC_GetPriorityGrouping>
 8002fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	6978      	ldr	r0, [r7, #20]
 8002fbc:	f7ff ff90 	bl	8002ee0 <NVIC_EncodePriority>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff ff5f 	bl	8002e8c <__NVIC_SetPriority>
}
 8002fce:	bf00      	nop
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	4603      	mov	r3, r0
 8002fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff ff35 	bl	8002e54 <__NVIC_EnableIRQ>
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff ffa2 	bl	8002f44 <SysTick_Config>
 8003000:	4603      	mov	r3, r0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e043      	b.n	80030aa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	4b22      	ldr	r3, [pc, #136]	@ (80030b4 <HAL_DMA_Init+0xa8>)
 800302a:	4413      	add	r3, r2
 800302c:	4a22      	ldr	r2, [pc, #136]	@ (80030b8 <HAL_DMA_Init+0xac>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	009a      	lsls	r2, r3, #2
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a1f      	ldr	r2, [pc, #124]	@ (80030bc <HAL_DMA_Init+0xb0>)
 800303e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003056:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800305a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003064:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003070:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800307c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr
 80030b4:	bffdfff8 	.word	0xbffdfff8
 80030b8:	cccccccd 	.word	0xcccccccd
 80030bc:	40020000 	.word	0x40020000

080030c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c8:	2300      	movs	r3, #0
 80030ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d005      	beq.n	80030e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2204      	movs	r2, #4
 80030dc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	73fb      	strb	r3, [r7, #15]
 80030e2:	e051      	b.n	8003188 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 020e 	bic.w	r2, r2, #14
 80030f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0201 	bic.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a22      	ldr	r2, [pc, #136]	@ (8003194 <HAL_DMA_Abort_IT+0xd4>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d029      	beq.n	8003162 <HAL_DMA_Abort_IT+0xa2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a21      	ldr	r2, [pc, #132]	@ (8003198 <HAL_DMA_Abort_IT+0xd8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d022      	beq.n	800315e <HAL_DMA_Abort_IT+0x9e>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1f      	ldr	r2, [pc, #124]	@ (800319c <HAL_DMA_Abort_IT+0xdc>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d01a      	beq.n	8003158 <HAL_DMA_Abort_IT+0x98>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1e      	ldr	r2, [pc, #120]	@ (80031a0 <HAL_DMA_Abort_IT+0xe0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d012      	beq.n	8003152 <HAL_DMA_Abort_IT+0x92>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1c      	ldr	r2, [pc, #112]	@ (80031a4 <HAL_DMA_Abort_IT+0xe4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00a      	beq.n	800314c <HAL_DMA_Abort_IT+0x8c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a1b      	ldr	r2, [pc, #108]	@ (80031a8 <HAL_DMA_Abort_IT+0xe8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d102      	bne.n	8003146 <HAL_DMA_Abort_IT+0x86>
 8003140:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003144:	e00e      	b.n	8003164 <HAL_DMA_Abort_IT+0xa4>
 8003146:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800314a:	e00b      	b.n	8003164 <HAL_DMA_Abort_IT+0xa4>
 800314c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003150:	e008      	b.n	8003164 <HAL_DMA_Abort_IT+0xa4>
 8003152:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003156:	e005      	b.n	8003164 <HAL_DMA_Abort_IT+0xa4>
 8003158:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800315c:	e002      	b.n	8003164 <HAL_DMA_Abort_IT+0xa4>
 800315e:	2310      	movs	r3, #16
 8003160:	e000      	b.n	8003164 <HAL_DMA_Abort_IT+0xa4>
 8003162:	2301      	movs	r3, #1
 8003164:	4a11      	ldr	r2, [pc, #68]	@ (80031ac <HAL_DMA_Abort_IT+0xec>)
 8003166:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	4798      	blx	r3
    } 
  }
  return status;
 8003188:	7bfb      	ldrb	r3, [r7, #15]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40020008 	.word	0x40020008
 8003198:	4002001c 	.word	0x4002001c
 800319c:	40020030 	.word	0x40020030
 80031a0:	40020044 	.word	0x40020044
 80031a4:	40020058 	.word	0x40020058
 80031a8:	4002006c 	.word	0x4002006c
 80031ac:	40020000 	.word	0x40020000

080031b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031cc:	2204      	movs	r2, #4
 80031ce:	409a      	lsls	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d04f      	beq.n	8003278 <HAL_DMA_IRQHandler+0xc8>
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d04a      	beq.n	8003278 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d107      	bne.n	8003200 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0204 	bic.w	r2, r2, #4
 80031fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a66      	ldr	r2, [pc, #408]	@ (80033a0 <HAL_DMA_IRQHandler+0x1f0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d029      	beq.n	800325e <HAL_DMA_IRQHandler+0xae>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a65      	ldr	r2, [pc, #404]	@ (80033a4 <HAL_DMA_IRQHandler+0x1f4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d022      	beq.n	800325a <HAL_DMA_IRQHandler+0xaa>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a63      	ldr	r2, [pc, #396]	@ (80033a8 <HAL_DMA_IRQHandler+0x1f8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d01a      	beq.n	8003254 <HAL_DMA_IRQHandler+0xa4>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a62      	ldr	r2, [pc, #392]	@ (80033ac <HAL_DMA_IRQHandler+0x1fc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d012      	beq.n	800324e <HAL_DMA_IRQHandler+0x9e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a60      	ldr	r2, [pc, #384]	@ (80033b0 <HAL_DMA_IRQHandler+0x200>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00a      	beq.n	8003248 <HAL_DMA_IRQHandler+0x98>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a5f      	ldr	r2, [pc, #380]	@ (80033b4 <HAL_DMA_IRQHandler+0x204>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d102      	bne.n	8003242 <HAL_DMA_IRQHandler+0x92>
 800323c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003240:	e00e      	b.n	8003260 <HAL_DMA_IRQHandler+0xb0>
 8003242:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003246:	e00b      	b.n	8003260 <HAL_DMA_IRQHandler+0xb0>
 8003248:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800324c:	e008      	b.n	8003260 <HAL_DMA_IRQHandler+0xb0>
 800324e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003252:	e005      	b.n	8003260 <HAL_DMA_IRQHandler+0xb0>
 8003254:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003258:	e002      	b.n	8003260 <HAL_DMA_IRQHandler+0xb0>
 800325a:	2340      	movs	r3, #64	@ 0x40
 800325c:	e000      	b.n	8003260 <HAL_DMA_IRQHandler+0xb0>
 800325e:	2304      	movs	r3, #4
 8003260:	4a55      	ldr	r2, [pc, #340]	@ (80033b8 <HAL_DMA_IRQHandler+0x208>)
 8003262:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 8094 	beq.w	8003396 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003276:	e08e      	b.n	8003396 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	2202      	movs	r2, #2
 800327e:	409a      	lsls	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4013      	ands	r3, r2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d056      	beq.n	8003336 <HAL_DMA_IRQHandler+0x186>
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d051      	beq.n	8003336 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10b      	bne.n	80032b8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 020a 	bic.w	r2, r2, #10
 80032ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a38      	ldr	r2, [pc, #224]	@ (80033a0 <HAL_DMA_IRQHandler+0x1f0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d029      	beq.n	8003316 <HAL_DMA_IRQHandler+0x166>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a37      	ldr	r2, [pc, #220]	@ (80033a4 <HAL_DMA_IRQHandler+0x1f4>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d022      	beq.n	8003312 <HAL_DMA_IRQHandler+0x162>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a35      	ldr	r2, [pc, #212]	@ (80033a8 <HAL_DMA_IRQHandler+0x1f8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d01a      	beq.n	800330c <HAL_DMA_IRQHandler+0x15c>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a34      	ldr	r2, [pc, #208]	@ (80033ac <HAL_DMA_IRQHandler+0x1fc>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d012      	beq.n	8003306 <HAL_DMA_IRQHandler+0x156>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a32      	ldr	r2, [pc, #200]	@ (80033b0 <HAL_DMA_IRQHandler+0x200>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00a      	beq.n	8003300 <HAL_DMA_IRQHandler+0x150>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a31      	ldr	r2, [pc, #196]	@ (80033b4 <HAL_DMA_IRQHandler+0x204>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d102      	bne.n	80032fa <HAL_DMA_IRQHandler+0x14a>
 80032f4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80032f8:	e00e      	b.n	8003318 <HAL_DMA_IRQHandler+0x168>
 80032fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032fe:	e00b      	b.n	8003318 <HAL_DMA_IRQHandler+0x168>
 8003300:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003304:	e008      	b.n	8003318 <HAL_DMA_IRQHandler+0x168>
 8003306:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800330a:	e005      	b.n	8003318 <HAL_DMA_IRQHandler+0x168>
 800330c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003310:	e002      	b.n	8003318 <HAL_DMA_IRQHandler+0x168>
 8003312:	2320      	movs	r3, #32
 8003314:	e000      	b.n	8003318 <HAL_DMA_IRQHandler+0x168>
 8003316:	2302      	movs	r3, #2
 8003318:	4a27      	ldr	r2, [pc, #156]	@ (80033b8 <HAL_DMA_IRQHandler+0x208>)
 800331a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003328:	2b00      	cmp	r3, #0
 800332a:	d034      	beq.n	8003396 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003334:	e02f      	b.n	8003396 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	2208      	movs	r2, #8
 800333c:	409a      	lsls	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4013      	ands	r3, r2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d028      	beq.n	8003398 <HAL_DMA_IRQHandler+0x1e8>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d023      	beq.n	8003398 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 020e 	bic.w	r2, r2, #14
 800335e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003368:	2101      	movs	r1, #1
 800336a:	fa01 f202 	lsl.w	r2, r1, r2
 800336e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338a:	2b00      	cmp	r3, #0
 800338c:	d004      	beq.n	8003398 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	4798      	blx	r3
    }
  }
  return;
 8003396:	bf00      	nop
 8003398:	bf00      	nop
}
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40020008 	.word	0x40020008
 80033a4:	4002001c 	.word	0x4002001c
 80033a8:	40020030 	.word	0x40020030
 80033ac:	40020044 	.word	0x40020044
 80033b0:	40020058 	.word	0x40020058
 80033b4:	4002006c 	.word	0x4002006c
 80033b8:	40020000 	.word	0x40020000

080033bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033bc:	b480      	push	{r7}
 80033be:	b08b      	sub	sp, #44	@ 0x2c
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033c6:	2300      	movs	r3, #0
 80033c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80033ca:	2300      	movs	r3, #0
 80033cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ce:	e169      	b.n	80036a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033d0:	2201      	movs	r2, #1
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	69fa      	ldr	r2, [r7, #28]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	f040 8158 	bne.w	800369e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	4a9a      	ldr	r2, [pc, #616]	@ (800365c <HAL_GPIO_Init+0x2a0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d05e      	beq.n	80034b6 <HAL_GPIO_Init+0xfa>
 80033f8:	4a98      	ldr	r2, [pc, #608]	@ (800365c <HAL_GPIO_Init+0x2a0>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d875      	bhi.n	80034ea <HAL_GPIO_Init+0x12e>
 80033fe:	4a98      	ldr	r2, [pc, #608]	@ (8003660 <HAL_GPIO_Init+0x2a4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d058      	beq.n	80034b6 <HAL_GPIO_Init+0xfa>
 8003404:	4a96      	ldr	r2, [pc, #600]	@ (8003660 <HAL_GPIO_Init+0x2a4>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d86f      	bhi.n	80034ea <HAL_GPIO_Init+0x12e>
 800340a:	4a96      	ldr	r2, [pc, #600]	@ (8003664 <HAL_GPIO_Init+0x2a8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d052      	beq.n	80034b6 <HAL_GPIO_Init+0xfa>
 8003410:	4a94      	ldr	r2, [pc, #592]	@ (8003664 <HAL_GPIO_Init+0x2a8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d869      	bhi.n	80034ea <HAL_GPIO_Init+0x12e>
 8003416:	4a94      	ldr	r2, [pc, #592]	@ (8003668 <HAL_GPIO_Init+0x2ac>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d04c      	beq.n	80034b6 <HAL_GPIO_Init+0xfa>
 800341c:	4a92      	ldr	r2, [pc, #584]	@ (8003668 <HAL_GPIO_Init+0x2ac>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d863      	bhi.n	80034ea <HAL_GPIO_Init+0x12e>
 8003422:	4a92      	ldr	r2, [pc, #584]	@ (800366c <HAL_GPIO_Init+0x2b0>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d046      	beq.n	80034b6 <HAL_GPIO_Init+0xfa>
 8003428:	4a90      	ldr	r2, [pc, #576]	@ (800366c <HAL_GPIO_Init+0x2b0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d85d      	bhi.n	80034ea <HAL_GPIO_Init+0x12e>
 800342e:	2b12      	cmp	r3, #18
 8003430:	d82a      	bhi.n	8003488 <HAL_GPIO_Init+0xcc>
 8003432:	2b12      	cmp	r3, #18
 8003434:	d859      	bhi.n	80034ea <HAL_GPIO_Init+0x12e>
 8003436:	a201      	add	r2, pc, #4	@ (adr r2, 800343c <HAL_GPIO_Init+0x80>)
 8003438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343c:	080034b7 	.word	0x080034b7
 8003440:	08003491 	.word	0x08003491
 8003444:	080034a3 	.word	0x080034a3
 8003448:	080034e5 	.word	0x080034e5
 800344c:	080034eb 	.word	0x080034eb
 8003450:	080034eb 	.word	0x080034eb
 8003454:	080034eb 	.word	0x080034eb
 8003458:	080034eb 	.word	0x080034eb
 800345c:	080034eb 	.word	0x080034eb
 8003460:	080034eb 	.word	0x080034eb
 8003464:	080034eb 	.word	0x080034eb
 8003468:	080034eb 	.word	0x080034eb
 800346c:	080034eb 	.word	0x080034eb
 8003470:	080034eb 	.word	0x080034eb
 8003474:	080034eb 	.word	0x080034eb
 8003478:	080034eb 	.word	0x080034eb
 800347c:	080034eb 	.word	0x080034eb
 8003480:	08003499 	.word	0x08003499
 8003484:	080034ad 	.word	0x080034ad
 8003488:	4a79      	ldr	r2, [pc, #484]	@ (8003670 <HAL_GPIO_Init+0x2b4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d013      	beq.n	80034b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800348e:	e02c      	b.n	80034ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	623b      	str	r3, [r7, #32]
          break;
 8003496:	e029      	b.n	80034ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	3304      	adds	r3, #4
 800349e:	623b      	str	r3, [r7, #32]
          break;
 80034a0:	e024      	b.n	80034ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	3308      	adds	r3, #8
 80034a8:	623b      	str	r3, [r7, #32]
          break;
 80034aa:	e01f      	b.n	80034ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	330c      	adds	r3, #12
 80034b2:	623b      	str	r3, [r7, #32]
          break;
 80034b4:	e01a      	b.n	80034ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d102      	bne.n	80034c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034be:	2304      	movs	r3, #4
 80034c0:	623b      	str	r3, [r7, #32]
          break;
 80034c2:	e013      	b.n	80034ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d105      	bne.n	80034d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034cc:	2308      	movs	r3, #8
 80034ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69fa      	ldr	r2, [r7, #28]
 80034d4:	611a      	str	r2, [r3, #16]
          break;
 80034d6:	e009      	b.n	80034ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034d8:	2308      	movs	r3, #8
 80034da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69fa      	ldr	r2, [r7, #28]
 80034e0:	615a      	str	r2, [r3, #20]
          break;
 80034e2:	e003      	b.n	80034ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80034e4:	2300      	movs	r3, #0
 80034e6:	623b      	str	r3, [r7, #32]
          break;
 80034e8:	e000      	b.n	80034ec <HAL_GPIO_Init+0x130>
          break;
 80034ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	2bff      	cmp	r3, #255	@ 0xff
 80034f0:	d801      	bhi.n	80034f6 <HAL_GPIO_Init+0x13a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	e001      	b.n	80034fa <HAL_GPIO_Init+0x13e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3304      	adds	r3, #4
 80034fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	2bff      	cmp	r3, #255	@ 0xff
 8003500:	d802      	bhi.n	8003508 <HAL_GPIO_Init+0x14c>
 8003502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	e002      	b.n	800350e <HAL_GPIO_Init+0x152>
 8003508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350a:	3b08      	subs	r3, #8
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	210f      	movs	r1, #15
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	fa01 f303 	lsl.w	r3, r1, r3
 800351c:	43db      	mvns	r3, r3
 800351e:	401a      	ands	r2, r3
 8003520:	6a39      	ldr	r1, [r7, #32]
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	fa01 f303 	lsl.w	r3, r1, r3
 8003528:	431a      	orrs	r2, r3
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 80b1 	beq.w	800369e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800353c:	4b4d      	ldr	r3, [pc, #308]	@ (8003674 <HAL_GPIO_Init+0x2b8>)
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	4a4c      	ldr	r2, [pc, #304]	@ (8003674 <HAL_GPIO_Init+0x2b8>)
 8003542:	f043 0301 	orr.w	r3, r3, #1
 8003546:	6193      	str	r3, [r2, #24]
 8003548:	4b4a      	ldr	r3, [pc, #296]	@ (8003674 <HAL_GPIO_Init+0x2b8>)
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003554:	4a48      	ldr	r2, [pc, #288]	@ (8003678 <HAL_GPIO_Init+0x2bc>)
 8003556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003558:	089b      	lsrs	r3, r3, #2
 800355a:	3302      	adds	r3, #2
 800355c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003560:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	220f      	movs	r2, #15
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4013      	ands	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a40      	ldr	r2, [pc, #256]	@ (800367c <HAL_GPIO_Init+0x2c0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d013      	beq.n	80035a8 <HAL_GPIO_Init+0x1ec>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a3f      	ldr	r2, [pc, #252]	@ (8003680 <HAL_GPIO_Init+0x2c4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00d      	beq.n	80035a4 <HAL_GPIO_Init+0x1e8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a3e      	ldr	r2, [pc, #248]	@ (8003684 <HAL_GPIO_Init+0x2c8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d007      	beq.n	80035a0 <HAL_GPIO_Init+0x1e4>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a3d      	ldr	r2, [pc, #244]	@ (8003688 <HAL_GPIO_Init+0x2cc>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d101      	bne.n	800359c <HAL_GPIO_Init+0x1e0>
 8003598:	2303      	movs	r3, #3
 800359a:	e006      	b.n	80035aa <HAL_GPIO_Init+0x1ee>
 800359c:	2304      	movs	r3, #4
 800359e:	e004      	b.n	80035aa <HAL_GPIO_Init+0x1ee>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e002      	b.n	80035aa <HAL_GPIO_Init+0x1ee>
 80035a4:	2301      	movs	r3, #1
 80035a6:	e000      	b.n	80035aa <HAL_GPIO_Init+0x1ee>
 80035a8:	2300      	movs	r3, #0
 80035aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ac:	f002 0203 	and.w	r2, r2, #3
 80035b0:	0092      	lsls	r2, r2, #2
 80035b2:	4093      	lsls	r3, r2
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80035ba:	492f      	ldr	r1, [pc, #188]	@ (8003678 <HAL_GPIO_Init+0x2bc>)
 80035bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035be:	089b      	lsrs	r3, r3, #2
 80035c0:	3302      	adds	r3, #2
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d006      	beq.n	80035e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035d4:	4b2d      	ldr	r3, [pc, #180]	@ (800368c <HAL_GPIO_Init+0x2d0>)
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	492c      	ldr	r1, [pc, #176]	@ (800368c <HAL_GPIO_Init+0x2d0>)
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	4313      	orrs	r3, r2
 80035de:	608b      	str	r3, [r1, #8]
 80035e0:	e006      	b.n	80035f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035e2:	4b2a      	ldr	r3, [pc, #168]	@ (800368c <HAL_GPIO_Init+0x2d0>)
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	43db      	mvns	r3, r3
 80035ea:	4928      	ldr	r1, [pc, #160]	@ (800368c <HAL_GPIO_Init+0x2d0>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d006      	beq.n	800360a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80035fc:	4b23      	ldr	r3, [pc, #140]	@ (800368c <HAL_GPIO_Init+0x2d0>)
 80035fe:	68da      	ldr	r2, [r3, #12]
 8003600:	4922      	ldr	r1, [pc, #136]	@ (800368c <HAL_GPIO_Init+0x2d0>)
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	4313      	orrs	r3, r2
 8003606:	60cb      	str	r3, [r1, #12]
 8003608:	e006      	b.n	8003618 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800360a:	4b20      	ldr	r3, [pc, #128]	@ (800368c <HAL_GPIO_Init+0x2d0>)
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	43db      	mvns	r3, r3
 8003612:	491e      	ldr	r1, [pc, #120]	@ (800368c <HAL_GPIO_Init+0x2d0>)
 8003614:	4013      	ands	r3, r2
 8003616:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d006      	beq.n	8003632 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003624:	4b19      	ldr	r3, [pc, #100]	@ (800368c <HAL_GPIO_Init+0x2d0>)
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	4918      	ldr	r1, [pc, #96]	@ (800368c <HAL_GPIO_Init+0x2d0>)
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	4313      	orrs	r3, r2
 800362e:	604b      	str	r3, [r1, #4]
 8003630:	e006      	b.n	8003640 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003632:	4b16      	ldr	r3, [pc, #88]	@ (800368c <HAL_GPIO_Init+0x2d0>)
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	43db      	mvns	r3, r3
 800363a:	4914      	ldr	r1, [pc, #80]	@ (800368c <HAL_GPIO_Init+0x2d0>)
 800363c:	4013      	ands	r3, r2
 800363e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d021      	beq.n	8003690 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800364c:	4b0f      	ldr	r3, [pc, #60]	@ (800368c <HAL_GPIO_Init+0x2d0>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	490e      	ldr	r1, [pc, #56]	@ (800368c <HAL_GPIO_Init+0x2d0>)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	4313      	orrs	r3, r2
 8003656:	600b      	str	r3, [r1, #0]
 8003658:	e021      	b.n	800369e <HAL_GPIO_Init+0x2e2>
 800365a:	bf00      	nop
 800365c:	10320000 	.word	0x10320000
 8003660:	10310000 	.word	0x10310000
 8003664:	10220000 	.word	0x10220000
 8003668:	10210000 	.word	0x10210000
 800366c:	10120000 	.word	0x10120000
 8003670:	10110000 	.word	0x10110000
 8003674:	40021000 	.word	0x40021000
 8003678:	40010000 	.word	0x40010000
 800367c:	40010800 	.word	0x40010800
 8003680:	40010c00 	.word	0x40010c00
 8003684:	40011000 	.word	0x40011000
 8003688:	40011400 	.word	0x40011400
 800368c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003690:	4b0b      	ldr	r3, [pc, #44]	@ (80036c0 <HAL_GPIO_Init+0x304>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	43db      	mvns	r3, r3
 8003698:	4909      	ldr	r1, [pc, #36]	@ (80036c0 <HAL_GPIO_Init+0x304>)
 800369a:	4013      	ands	r3, r2
 800369c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800369e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a0:	3301      	adds	r3, #1
 80036a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036aa:	fa22 f303 	lsr.w	r3, r2, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f47f ae8e 	bne.w	80033d0 <HAL_GPIO_Init+0x14>
  }
}
 80036b4:	bf00      	nop
 80036b6:	bf00      	nop
 80036b8:	372c      	adds	r7, #44	@ 0x2c
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr
 80036c0:	40010400 	.word	0x40010400

080036c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	887b      	ldrh	r3, [r7, #2]
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
 80036e0:	e001      	b.n	80036e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036e2:	2300      	movs	r3, #0
 80036e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr

080036f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	460b      	mov	r3, r1
 80036fc:	807b      	strh	r3, [r7, #2]
 80036fe:	4613      	mov	r3, r2
 8003700:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003702:	787b      	ldrb	r3, [r7, #1]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003708:	887a      	ldrh	r2, [r7, #2]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800370e:	e003      	b.n	8003718 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003710:	887b      	ldrh	r3, [r7, #2]
 8003712:	041a      	lsls	r2, r3, #16
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	611a      	str	r2, [r3, #16]
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	bc80      	pop	{r7}
 8003720:	4770      	bx	lr
	...

08003724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e272      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 8087 	beq.w	8003852 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003744:	4b92      	ldr	r3, [pc, #584]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 030c 	and.w	r3, r3, #12
 800374c:	2b04      	cmp	r3, #4
 800374e:	d00c      	beq.n	800376a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003750:	4b8f      	ldr	r3, [pc, #572]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 030c 	and.w	r3, r3, #12
 8003758:	2b08      	cmp	r3, #8
 800375a:	d112      	bne.n	8003782 <HAL_RCC_OscConfig+0x5e>
 800375c:	4b8c      	ldr	r3, [pc, #560]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003768:	d10b      	bne.n	8003782 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376a:	4b89      	ldr	r3, [pc, #548]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d06c      	beq.n	8003850 <HAL_RCC_OscConfig+0x12c>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d168      	bne.n	8003850 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e24c      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800378a:	d106      	bne.n	800379a <HAL_RCC_OscConfig+0x76>
 800378c:	4b80      	ldr	r3, [pc, #512]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a7f      	ldr	r2, [pc, #508]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 8003792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	e02e      	b.n	80037f8 <HAL_RCC_OscConfig+0xd4>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10c      	bne.n	80037bc <HAL_RCC_OscConfig+0x98>
 80037a2:	4b7b      	ldr	r3, [pc, #492]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a7a      	ldr	r2, [pc, #488]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	4b78      	ldr	r3, [pc, #480]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a77      	ldr	r2, [pc, #476]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e01d      	b.n	80037f8 <HAL_RCC_OscConfig+0xd4>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCC_OscConfig+0xbc>
 80037c6:	4b72      	ldr	r3, [pc, #456]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a71      	ldr	r2, [pc, #452]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	4b6f      	ldr	r3, [pc, #444]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a6e      	ldr	r2, [pc, #440]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e00b      	b.n	80037f8 <HAL_RCC_OscConfig+0xd4>
 80037e0:	4b6b      	ldr	r3, [pc, #428]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a6a      	ldr	r2, [pc, #424]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	4b68      	ldr	r3, [pc, #416]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a67      	ldr	r2, [pc, #412]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d013      	beq.n	8003828 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003800:	f7ff fac8 	bl	8002d94 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003808:	f7ff fac4 	bl	8002d94 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	@ 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e200      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	4b5d      	ldr	r3, [pc, #372]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0xe4>
 8003826:	e014      	b.n	8003852 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003828:	f7ff fab4 	bl	8002d94 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003830:	f7ff fab0 	bl	8002d94 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	@ 0x64
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e1ec      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003842:	4b53      	ldr	r3, [pc, #332]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x10c>
 800384e:	e000      	b.n	8003852 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d063      	beq.n	8003926 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800385e:	4b4c      	ldr	r3, [pc, #304]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00b      	beq.n	8003882 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800386a:	4b49      	ldr	r3, [pc, #292]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 030c 	and.w	r3, r3, #12
 8003872:	2b08      	cmp	r3, #8
 8003874:	d11c      	bne.n	80038b0 <HAL_RCC_OscConfig+0x18c>
 8003876:	4b46      	ldr	r3, [pc, #280]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d116      	bne.n	80038b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003882:	4b43      	ldr	r3, [pc, #268]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d005      	beq.n	800389a <HAL_RCC_OscConfig+0x176>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d001      	beq.n	800389a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e1c0      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389a:	4b3d      	ldr	r3, [pc, #244]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4939      	ldr	r1, [pc, #228]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ae:	e03a      	b.n	8003926 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d020      	beq.n	80038fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038b8:	4b36      	ldr	r3, [pc, #216]	@ (8003994 <HAL_RCC_OscConfig+0x270>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038be:	f7ff fa69 	bl	8002d94 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038c6:	f7ff fa65 	bl	8002d94 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e1a1      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0f0      	beq.n	80038c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	4927      	ldr	r1, [pc, #156]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	600b      	str	r3, [r1, #0]
 80038f8:	e015      	b.n	8003926 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038fa:	4b26      	ldr	r3, [pc, #152]	@ (8003994 <HAL_RCC_OscConfig+0x270>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003900:	f7ff fa48 	bl	8002d94 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003908:	f7ff fa44 	bl	8002d94 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e180      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391a:	4b1d      	ldr	r3, [pc, #116]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d03a      	beq.n	80039a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d019      	beq.n	800396e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800393a:	4b17      	ldr	r3, [pc, #92]	@ (8003998 <HAL_RCC_OscConfig+0x274>)
 800393c:	2201      	movs	r2, #1
 800393e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003940:	f7ff fa28 	bl	8002d94 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003948:	f7ff fa24 	bl	8002d94 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e160      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800395a:	4b0d      	ldr	r3, [pc, #52]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003966:	2001      	movs	r0, #1
 8003968:	f000 fa9c 	bl	8003ea4 <RCC_Delay>
 800396c:	e01c      	b.n	80039a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800396e:	4b0a      	ldr	r3, [pc, #40]	@ (8003998 <HAL_RCC_OscConfig+0x274>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003974:	f7ff fa0e 	bl	8002d94 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800397a:	e00f      	b.n	800399c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800397c:	f7ff fa0a 	bl	8002d94 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d908      	bls.n	800399c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e146      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
 800398e:	bf00      	nop
 8003990:	40021000 	.word	0x40021000
 8003994:	42420000 	.word	0x42420000
 8003998:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800399c:	4b92      	ldr	r3, [pc, #584]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 800399e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e9      	bne.n	800397c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 80a6 	beq.w	8003b02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039b6:	2300      	movs	r3, #0
 80039b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ba:	4b8b      	ldr	r3, [pc, #556]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10d      	bne.n	80039e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c6:	4b88      	ldr	r3, [pc, #544]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	4a87      	ldr	r2, [pc, #540]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 80039cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039d0:	61d3      	str	r3, [r2, #28]
 80039d2:	4b85      	ldr	r3, [pc, #532]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039de:	2301      	movs	r3, #1
 80039e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e2:	4b82      	ldr	r3, [pc, #520]	@ (8003bec <HAL_RCC_OscConfig+0x4c8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d118      	bne.n	8003a20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ee:	4b7f      	ldr	r3, [pc, #508]	@ (8003bec <HAL_RCC_OscConfig+0x4c8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a7e      	ldr	r2, [pc, #504]	@ (8003bec <HAL_RCC_OscConfig+0x4c8>)
 80039f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039fa:	f7ff f9cb 	bl	8002d94 <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a02:	f7ff f9c7 	bl	8002d94 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b64      	cmp	r3, #100	@ 0x64
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e103      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a14:	4b75      	ldr	r3, [pc, #468]	@ (8003bec <HAL_RCC_OscConfig+0x4c8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0f0      	beq.n	8003a02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d106      	bne.n	8003a36 <HAL_RCC_OscConfig+0x312>
 8003a28:	4b6f      	ldr	r3, [pc, #444]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	4a6e      	ldr	r2, [pc, #440]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	6213      	str	r3, [r2, #32]
 8003a34:	e02d      	b.n	8003a92 <HAL_RCC_OscConfig+0x36e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10c      	bne.n	8003a58 <HAL_RCC_OscConfig+0x334>
 8003a3e:	4b6a      	ldr	r3, [pc, #424]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	4a69      	ldr	r2, [pc, #420]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	6213      	str	r3, [r2, #32]
 8003a4a:	4b67      	ldr	r3, [pc, #412]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	4a66      	ldr	r2, [pc, #408]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a50:	f023 0304 	bic.w	r3, r3, #4
 8003a54:	6213      	str	r3, [r2, #32]
 8003a56:	e01c      	b.n	8003a92 <HAL_RCC_OscConfig+0x36e>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	2b05      	cmp	r3, #5
 8003a5e:	d10c      	bne.n	8003a7a <HAL_RCC_OscConfig+0x356>
 8003a60:	4b61      	ldr	r3, [pc, #388]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	4a60      	ldr	r2, [pc, #384]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a66:	f043 0304 	orr.w	r3, r3, #4
 8003a6a:	6213      	str	r3, [r2, #32]
 8003a6c:	4b5e      	ldr	r3, [pc, #376]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	4a5d      	ldr	r2, [pc, #372]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	6213      	str	r3, [r2, #32]
 8003a78:	e00b      	b.n	8003a92 <HAL_RCC_OscConfig+0x36e>
 8003a7a:	4b5b      	ldr	r3, [pc, #364]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	4a5a      	ldr	r2, [pc, #360]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a80:	f023 0301 	bic.w	r3, r3, #1
 8003a84:	6213      	str	r3, [r2, #32]
 8003a86:	4b58      	ldr	r3, [pc, #352]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	4a57      	ldr	r2, [pc, #348]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a8c:	f023 0304 	bic.w	r3, r3, #4
 8003a90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d015      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9a:	f7ff f97b 	bl	8002d94 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa0:	e00a      	b.n	8003ab8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa2:	f7ff f977 	bl	8002d94 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e0b1      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab8:	4b4b      	ldr	r3, [pc, #300]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0ee      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x37e>
 8003ac4:	e014      	b.n	8003af0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac6:	f7ff f965 	bl	8002d94 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003acc:	e00a      	b.n	8003ae4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ace:	f7ff f961 	bl	8002d94 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e09b      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae4:	4b40      	ldr	r3, [pc, #256]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1ee      	bne.n	8003ace <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003af0:	7dfb      	ldrb	r3, [r7, #23]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d105      	bne.n	8003b02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af6:	4b3c      	ldr	r3, [pc, #240]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	4a3b      	ldr	r2, [pc, #236]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003afc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 8087 	beq.w	8003c1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b0c:	4b36      	ldr	r3, [pc, #216]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 030c 	and.w	r3, r3, #12
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d061      	beq.n	8003bdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d146      	bne.n	8003bae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b20:	4b33      	ldr	r3, [pc, #204]	@ (8003bf0 <HAL_RCC_OscConfig+0x4cc>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b26:	f7ff f935 	bl	8002d94 <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2e:	f7ff f931 	bl	8002d94 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e06d      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b40:	4b29      	ldr	r3, [pc, #164]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f0      	bne.n	8003b2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b54:	d108      	bne.n	8003b68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b56:	4b24      	ldr	r3, [pc, #144]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	4921      	ldr	r1, [pc, #132]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b68:	4b1f      	ldr	r3, [pc, #124]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a19      	ldr	r1, [r3, #32]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	491b      	ldr	r1, [pc, #108]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b80:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf0 <HAL_RCC_OscConfig+0x4cc>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b86:	f7ff f905 	bl	8002d94 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b8e:	f7ff f901 	bl	8002d94 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e03d      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ba0:	4b11      	ldr	r3, [pc, #68]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x46a>
 8003bac:	e035      	b.n	8003c1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bae:	4b10      	ldr	r3, [pc, #64]	@ (8003bf0 <HAL_RCC_OscConfig+0x4cc>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7ff f8ee 	bl	8002d94 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bbc:	f7ff f8ea 	bl	8002d94 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e026      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bce:	4b06      	ldr	r3, [pc, #24]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0x498>
 8003bda:	e01e      	b.n	8003c1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d107      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e019      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d106      	bne.n	8003c16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d001      	beq.n	8003c1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40021000 	.word	0x40021000

08003c28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0d0      	b.n	8003dde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c3c:	4b6a      	ldr	r3, [pc, #424]	@ (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d910      	bls.n	8003c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4a:	4b67      	ldr	r3, [pc, #412]	@ (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f023 0207 	bic.w	r2, r3, #7
 8003c52:	4965      	ldr	r1, [pc, #404]	@ (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5a:	4b63      	ldr	r3, [pc, #396]	@ (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0b8      	b.n	8003dde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d020      	beq.n	8003cba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c84:	4b59      	ldr	r3, [pc, #356]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	4a58      	ldr	r2, [pc, #352]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003c8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d005      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c9c:	4b53      	ldr	r3, [pc, #332]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	4a52      	ldr	r2, [pc, #328]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003ca2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003ca6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca8:	4b50      	ldr	r3, [pc, #320]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	494d      	ldr	r1, [pc, #308]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d040      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d107      	bne.n	8003cde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cce:	4b47      	ldr	r3, [pc, #284]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d115      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e07f      	b.n	8003dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d107      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce6:	4b41      	ldr	r3, [pc, #260]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d109      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e073      	b.n	8003dde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf6:	4b3d      	ldr	r3, [pc, #244]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e06b      	b.n	8003dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d06:	4b39      	ldr	r3, [pc, #228]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f023 0203 	bic.w	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	4936      	ldr	r1, [pc, #216]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d18:	f7ff f83c 	bl	8002d94 <HAL_GetTick>
 8003d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1e:	e00a      	b.n	8003d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d20:	f7ff f838 	bl	8002d94 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e053      	b.n	8003dde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d36:	4b2d      	ldr	r3, [pc, #180]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 020c 	and.w	r2, r3, #12
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d1eb      	bne.n	8003d20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d48:	4b27      	ldr	r3, [pc, #156]	@ (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d210      	bcs.n	8003d78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d56:	4b24      	ldr	r3, [pc, #144]	@ (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f023 0207 	bic.w	r2, r3, #7
 8003d5e:	4922      	ldr	r1, [pc, #136]	@ (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d66:	4b20      	ldr	r3, [pc, #128]	@ (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d001      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e032      	b.n	8003dde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d84:	4b19      	ldr	r3, [pc, #100]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	4916      	ldr	r1, [pc, #88]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d009      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003da2:	4b12      	ldr	r3, [pc, #72]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	490e      	ldr	r1, [pc, #56]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003db6:	f000 f821 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	091b      	lsrs	r3, r3, #4
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	490a      	ldr	r1, [pc, #40]	@ (8003df0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc8:	5ccb      	ldrb	r3, [r1, r3]
 8003dca:	fa22 f303 	lsr.w	r3, r2, r3
 8003dce:	4a09      	ldr	r2, [pc, #36]	@ (8003df4 <HAL_RCC_ClockConfig+0x1cc>)
 8003dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dd2:	4b09      	ldr	r3, [pc, #36]	@ (8003df8 <HAL_RCC_ClockConfig+0x1d0>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fe ff9a 	bl	8002d10 <HAL_InitTick>

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40022000 	.word	0x40022000
 8003dec:	40021000 	.word	0x40021000
 8003df0:	08006460 	.word	0x08006460
 8003df4:	20000000 	.word	0x20000000
 8003df8:	20000004 	.word	0x20000004

08003dfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	2300      	movs	r3, #0
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e16:	4b1e      	ldr	r3, [pc, #120]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d002      	beq.n	8003e2c <HAL_RCC_GetSysClockFreq+0x30>
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d003      	beq.n	8003e32 <HAL_RCC_GetSysClockFreq+0x36>
 8003e2a:	e027      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e2c:	4b19      	ldr	r3, [pc, #100]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e2e:	613b      	str	r3, [r7, #16]
      break;
 8003e30:	e027      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	0c9b      	lsrs	r3, r3, #18
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	4a17      	ldr	r2, [pc, #92]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e3c:	5cd3      	ldrb	r3, [r2, r3]
 8003e3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d010      	beq.n	8003e6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e4a:	4b11      	ldr	r3, [pc, #68]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	0c5b      	lsrs	r3, r3, #17
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	4a11      	ldr	r2, [pc, #68]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e56:	5cd3      	ldrb	r3, [r2, r3]
 8003e58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e5e:	fb03 f202 	mul.w	r2, r3, r2
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	e004      	b.n	8003e76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8003ea0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e70:	fb02 f303 	mul.w	r3, r2, r3
 8003e74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	613b      	str	r3, [r7, #16]
      break;
 8003e7a:	e002      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e7c:	4b05      	ldr	r3, [pc, #20]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e7e:	613b      	str	r3, [r7, #16]
      break;
 8003e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e82:	693b      	ldr	r3, [r7, #16]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	371c      	adds	r7, #28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000
 8003e94:	007a1200 	.word	0x007a1200
 8003e98:	08006470 	.word	0x08006470
 8003e9c:	08006480 	.word	0x08006480
 8003ea0:	003d0900 	.word	0x003d0900

08003ea4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003eac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed8 <RCC_Delay+0x34>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8003edc <RCC_Delay+0x38>)
 8003eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb6:	0a5b      	lsrs	r3, r3, #9
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	fb02 f303 	mul.w	r3, r2, r3
 8003ebe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ec0:	bf00      	nop
  }
  while (Delay --);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	1e5a      	subs	r2, r3, #1
 8003ec6:	60fa      	str	r2, [r7, #12]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f9      	bne.n	8003ec0 <RCC_Delay+0x1c>
}
 8003ecc:	bf00      	nop
 8003ece:	bf00      	nop
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr
 8003ed8:	20000000 	.word	0x20000000
 8003edc:	10624dd3 	.word	0x10624dd3

08003ee0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e076      	b.n	8003fe0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d108      	bne.n	8003f0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f02:	d009      	beq.n	8003f18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	61da      	str	r2, [r3, #28]
 8003f0a:	e005      	b.n	8003f18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d106      	bne.n	8003f38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fe fdf8 	bl	8002b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f9c:	ea42 0103 	orr.w	r1, r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	0c1a      	lsrs	r2, r3, #16
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f002 0204 	and.w	r2, r2, #4
 8003fbe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	69da      	ldr	r2, [r3, #28]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ff8:	f7fe fecc 	bl	8002d94 <HAL_GetTick>
 8003ffc:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003ffe:	88fb      	ldrh	r3, [r7, #6]
 8004000:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b01      	cmp	r3, #1
 800400c:	d001      	beq.n	8004012 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800400e:	2302      	movs	r3, #2
 8004010:	e12a      	b.n	8004268 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <HAL_SPI_Transmit+0x36>
 8004018:	88fb      	ldrh	r3, [r7, #6]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e122      	b.n	8004268 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_SPI_Transmit+0x48>
 800402c:	2302      	movs	r3, #2
 800402e:	e11b      	b.n	8004268 <HAL_SPI_Transmit+0x280>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2203      	movs	r2, #3
 800403c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	88fa      	ldrh	r2, [r7, #6]
 8004050:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	88fa      	ldrh	r2, [r7, #6]
 8004056:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800407e:	d10f      	bne.n	80040a0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800408e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800409e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040aa:	2b40      	cmp	r3, #64	@ 0x40
 80040ac:	d007      	beq.n	80040be <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040c6:	d152      	bne.n	800416e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <HAL_SPI_Transmit+0xee>
 80040d0:	8b7b      	ldrh	r3, [r7, #26]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d145      	bne.n	8004162 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040da:	881a      	ldrh	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e6:	1c9a      	adds	r2, r3, #2
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040fa:	e032      	b.n	8004162 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b02      	cmp	r3, #2
 8004108:	d112      	bne.n	8004130 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410e:	881a      	ldrh	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411a:	1c9a      	adds	r2, r3, #2
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800412e:	e018      	b.n	8004162 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004130:	f7fe fe30 	bl	8002d94 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d803      	bhi.n	8004148 <HAL_SPI_Transmit+0x160>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004146:	d102      	bne.n	800414e <HAL_SPI_Transmit+0x166>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e082      	b.n	8004268 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004166:	b29b      	uxth	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1c7      	bne.n	80040fc <HAL_SPI_Transmit+0x114>
 800416c:	e053      	b.n	8004216 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <HAL_SPI_Transmit+0x194>
 8004176:	8b7b      	ldrh	r3, [r7, #26]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d147      	bne.n	800420c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	330c      	adds	r3, #12
 8004186:	7812      	ldrb	r2, [r2, #0]
 8004188:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004198:	b29b      	uxth	r3, r3
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041a2:	e033      	b.n	800420c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d113      	bne.n	80041da <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	330c      	adds	r3, #12
 80041bc:	7812      	ldrb	r2, [r2, #0]
 80041be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80041d8:	e018      	b.n	800420c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041da:	f7fe fddb 	bl	8002d94 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d803      	bhi.n	80041f2 <HAL_SPI_Transmit+0x20a>
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d102      	bne.n	80041f8 <HAL_SPI_Transmit+0x210>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d109      	bne.n	800420c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e02d      	b.n	8004268 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1c6      	bne.n	80041a4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004216:	69fa      	ldr	r2, [r7, #28]
 8004218:	6839      	ldr	r1, [r7, #0]
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 f9ac 	bl	8004578 <SPI_EndRxTxTransaction>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2220      	movs	r2, #32
 800422a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10a      	bne.n	800424a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004266:	2300      	movs	r3, #0
  }
}
 8004268:	4618      	mov	r0, r3
 800426a:	3720      	adds	r7, #32
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10e      	bne.n	80042b0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004298:	2b00      	cmp	r3, #0
 800429a:	d009      	beq.n	80042b0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d004      	beq.n	80042b0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	4798      	blx	r3
    return;
 80042ae:	e0b7      	b.n	8004420 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d009      	beq.n	80042ce <HAL_SPI_IRQHandler+0x5e>
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d004      	beq.n	80042ce <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	4798      	blx	r3
    return;
 80042cc:	e0a8      	b.n	8004420 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	f003 0320 	and.w	r3, r3, #32
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d105      	bne.n	80042e4 <HAL_SPI_IRQHandler+0x74>
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 809e 	beq.w	8004420 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 8098 	beq.w	8004420 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d023      	beq.n	8004342 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b03      	cmp	r3, #3
 8004304:	d011      	beq.n	800432a <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800430a:	f043 0204 	orr.w	r2, r3, #4
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	e00b      	b.n	8004342 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800432a:	2300      	movs	r3, #0
 800432c:	613b      	str	r3, [r7, #16]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	693b      	ldr	r3, [r7, #16]
        return;
 8004340:	e06e      	b.n	8004420 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	f003 0320 	and.w	r3, r3, #32
 8004348:	2b00      	cmp	r3, #0
 800434a:	d014      	beq.n	8004376 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004350:	f043 0201 	orr.w	r2, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800437a:	2b00      	cmp	r3, #0
 800437c:	d04f      	beq.n	800441e <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800438c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d104      	bne.n	80043aa <HAL_SPI_IRQHandler+0x13a>
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d034      	beq.n	8004414 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0203 	bic.w	r2, r2, #3
 80043b8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d011      	beq.n	80043e6 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c6:	4a18      	ldr	r2, [pc, #96]	@ (8004428 <HAL_SPI_IRQHandler+0x1b8>)
 80043c8:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fe fe76 	bl	80030c0 <HAL_DMA_Abort_IT>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d005      	beq.n	80043e6 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d016      	beq.n	800441c <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043f2:	4a0d      	ldr	r2, [pc, #52]	@ (8004428 <HAL_SPI_IRQHandler+0x1b8>)
 80043f4:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fe fe60 	bl	80030c0 <HAL_DMA_Abort_IT>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800440a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8004412:	e003      	b.n	800441c <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f809 	bl	800442c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800441a:	e000      	b.n	800441e <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 800441c:	bf00      	nop
    return;
 800441e:	bf00      	nop
  }
}
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	0800443f 	.word	0x0800443f

0800442c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	bc80      	pop	{r7}
 800443c:	4770      	bx	lr

0800443e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b084      	sub	sp, #16
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f7ff ffe7 	bl	800442c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800445e:	bf00      	nop
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	4613      	mov	r3, r2
 8004476:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004478:	f7fe fc8c 	bl	8002d94 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004480:	1a9b      	subs	r3, r3, r2
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	4413      	add	r3, r2
 8004486:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004488:	f7fe fc84 	bl	8002d94 <HAL_GetTick>
 800448c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800448e:	4b39      	ldr	r3, [pc, #228]	@ (8004574 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	015b      	lsls	r3, r3, #5
 8004494:	0d1b      	lsrs	r3, r3, #20
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	fb02 f303 	mul.w	r3, r2, r3
 800449c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800449e:	e054      	b.n	800454a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a6:	d050      	beq.n	800454a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044a8:	f7fe fc74 	bl	8002d94 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d902      	bls.n	80044be <SPI_WaitFlagStateUntilTimeout+0x56>
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d13d      	bne.n	800453a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80044cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044d6:	d111      	bne.n	80044fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044e0:	d004      	beq.n	80044ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ea:	d107      	bne.n	80044fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004500:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004504:	d10f      	bne.n	8004526 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004524:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e017      	b.n	800456a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	3b01      	subs	r3, #1
 8004548:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4013      	ands	r3, r2
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	429a      	cmp	r2, r3
 8004558:	bf0c      	ite	eq
 800455a:	2301      	moveq	r3, #1
 800455c:	2300      	movne	r3, #0
 800455e:	b2db      	uxtb	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	429a      	cmp	r2, r3
 8004566:	d19b      	bne.n	80044a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3720      	adds	r7, #32
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20000000 	.word	0x20000000

08004578 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af02      	add	r7, sp, #8
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2201      	movs	r2, #1
 800458c:	2102      	movs	r1, #2
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f7ff ff6a 	bl	8004468 <SPI_WaitFlagStateUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d007      	beq.n	80045aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800459e:	f043 0220 	orr.w	r2, r3, #32
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e013      	b.n	80045d2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2200      	movs	r2, #0
 80045b2:	2180      	movs	r1, #128	@ 0x80
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f7ff ff57 	bl	8004468 <SPI_WaitFlagStateUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d007      	beq.n	80045d0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c4:	f043 0220 	orr.w	r2, r3, #32
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e000      	b.n	80045d2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <memset>:
 80045da:	4603      	mov	r3, r0
 80045dc:	4402      	add	r2, r0
 80045de:	4293      	cmp	r3, r2
 80045e0:	d100      	bne.n	80045e4 <memset+0xa>
 80045e2:	4770      	bx	lr
 80045e4:	f803 1b01 	strb.w	r1, [r3], #1
 80045e8:	e7f9      	b.n	80045de <memset+0x4>
	...

080045ec <__errno>:
 80045ec:	4b01      	ldr	r3, [pc, #4]	@ (80045f4 <__errno+0x8>)
 80045ee:	6818      	ldr	r0, [r3, #0]
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	2000000c 	.word	0x2000000c

080045f8 <__libc_init_array>:
 80045f8:	b570      	push	{r4, r5, r6, lr}
 80045fa:	2600      	movs	r6, #0
 80045fc:	4d0c      	ldr	r5, [pc, #48]	@ (8004630 <__libc_init_array+0x38>)
 80045fe:	4c0d      	ldr	r4, [pc, #52]	@ (8004634 <__libc_init_array+0x3c>)
 8004600:	1b64      	subs	r4, r4, r5
 8004602:	10a4      	asrs	r4, r4, #2
 8004604:	42a6      	cmp	r6, r4
 8004606:	d109      	bne.n	800461c <__libc_init_array+0x24>
 8004608:	f000 ff4c 	bl	80054a4 <_init>
 800460c:	2600      	movs	r6, #0
 800460e:	4d0a      	ldr	r5, [pc, #40]	@ (8004638 <__libc_init_array+0x40>)
 8004610:	4c0a      	ldr	r4, [pc, #40]	@ (800463c <__libc_init_array+0x44>)
 8004612:	1b64      	subs	r4, r4, r5
 8004614:	10a4      	asrs	r4, r4, #2
 8004616:	42a6      	cmp	r6, r4
 8004618:	d105      	bne.n	8004626 <__libc_init_array+0x2e>
 800461a:	bd70      	pop	{r4, r5, r6, pc}
 800461c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004620:	4798      	blx	r3
 8004622:	3601      	adds	r6, #1
 8004624:	e7ee      	b.n	8004604 <__libc_init_array+0xc>
 8004626:	f855 3b04 	ldr.w	r3, [r5], #4
 800462a:	4798      	blx	r3
 800462c:	3601      	adds	r6, #1
 800462e:	e7f2      	b.n	8004616 <__libc_init_array+0x1e>
 8004630:	080064b8 	.word	0x080064b8
 8004634:	080064b8 	.word	0x080064b8
 8004638:	080064b8 	.word	0x080064b8
 800463c:	080064bc 	.word	0x080064bc

08004640 <pow>:
 8004640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004644:	4614      	mov	r4, r2
 8004646:	461d      	mov	r5, r3
 8004648:	4680      	mov	r8, r0
 800464a:	4689      	mov	r9, r1
 800464c:	f000 f960 	bl	8004910 <__ieee754_pow>
 8004650:	4622      	mov	r2, r4
 8004652:	4606      	mov	r6, r0
 8004654:	460f      	mov	r7, r1
 8004656:	462b      	mov	r3, r5
 8004658:	4620      	mov	r0, r4
 800465a:	4629      	mov	r1, r5
 800465c:	f7fc f9ce 	bl	80009fc <__aeabi_dcmpun>
 8004660:	bbc8      	cbnz	r0, 80046d6 <pow+0x96>
 8004662:	2200      	movs	r2, #0
 8004664:	2300      	movs	r3, #0
 8004666:	4640      	mov	r0, r8
 8004668:	4649      	mov	r1, r9
 800466a:	f7fc f995 	bl	8000998 <__aeabi_dcmpeq>
 800466e:	b1b8      	cbz	r0, 80046a0 <pow+0x60>
 8004670:	2200      	movs	r2, #0
 8004672:	2300      	movs	r3, #0
 8004674:	4620      	mov	r0, r4
 8004676:	4629      	mov	r1, r5
 8004678:	f7fc f98e 	bl	8000998 <__aeabi_dcmpeq>
 800467c:	2800      	cmp	r0, #0
 800467e:	d141      	bne.n	8004704 <pow+0xc4>
 8004680:	4620      	mov	r0, r4
 8004682:	4629      	mov	r1, r5
 8004684:	f000 f868 	bl	8004758 <finite>
 8004688:	b328      	cbz	r0, 80046d6 <pow+0x96>
 800468a:	2200      	movs	r2, #0
 800468c:	2300      	movs	r3, #0
 800468e:	4620      	mov	r0, r4
 8004690:	4629      	mov	r1, r5
 8004692:	f7fc f98b 	bl	80009ac <__aeabi_dcmplt>
 8004696:	b1f0      	cbz	r0, 80046d6 <pow+0x96>
 8004698:	f7ff ffa8 	bl	80045ec <__errno>
 800469c:	2322      	movs	r3, #34	@ 0x22
 800469e:	e019      	b.n	80046d4 <pow+0x94>
 80046a0:	4630      	mov	r0, r6
 80046a2:	4639      	mov	r1, r7
 80046a4:	f000 f858 	bl	8004758 <finite>
 80046a8:	b9c8      	cbnz	r0, 80046de <pow+0x9e>
 80046aa:	4640      	mov	r0, r8
 80046ac:	4649      	mov	r1, r9
 80046ae:	f000 f853 	bl	8004758 <finite>
 80046b2:	b1a0      	cbz	r0, 80046de <pow+0x9e>
 80046b4:	4620      	mov	r0, r4
 80046b6:	4629      	mov	r1, r5
 80046b8:	f000 f84e 	bl	8004758 <finite>
 80046bc:	b178      	cbz	r0, 80046de <pow+0x9e>
 80046be:	4632      	mov	r2, r6
 80046c0:	463b      	mov	r3, r7
 80046c2:	4630      	mov	r0, r6
 80046c4:	4639      	mov	r1, r7
 80046c6:	f7fc f999 	bl	80009fc <__aeabi_dcmpun>
 80046ca:	2800      	cmp	r0, #0
 80046cc:	d0e4      	beq.n	8004698 <pow+0x58>
 80046ce:	f7ff ff8d 	bl	80045ec <__errno>
 80046d2:	2321      	movs	r3, #33	@ 0x21
 80046d4:	6003      	str	r3, [r0, #0]
 80046d6:	4630      	mov	r0, r6
 80046d8:	4639      	mov	r1, r7
 80046da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046de:	2200      	movs	r2, #0
 80046e0:	2300      	movs	r3, #0
 80046e2:	4630      	mov	r0, r6
 80046e4:	4639      	mov	r1, r7
 80046e6:	f7fc f957 	bl	8000998 <__aeabi_dcmpeq>
 80046ea:	2800      	cmp	r0, #0
 80046ec:	d0f3      	beq.n	80046d6 <pow+0x96>
 80046ee:	4640      	mov	r0, r8
 80046f0:	4649      	mov	r1, r9
 80046f2:	f000 f831 	bl	8004758 <finite>
 80046f6:	2800      	cmp	r0, #0
 80046f8:	d0ed      	beq.n	80046d6 <pow+0x96>
 80046fa:	4620      	mov	r0, r4
 80046fc:	4629      	mov	r1, r5
 80046fe:	f000 f82b 	bl	8004758 <finite>
 8004702:	e7c8      	b.n	8004696 <pow+0x56>
 8004704:	2600      	movs	r6, #0
 8004706:	4f01      	ldr	r7, [pc, #4]	@ (800470c <pow+0xcc>)
 8004708:	e7e5      	b.n	80046d6 <pow+0x96>
 800470a:	bf00      	nop
 800470c:	3ff00000 	.word	0x3ff00000

08004710 <sqrt>:
 8004710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004712:	4606      	mov	r6, r0
 8004714:	460f      	mov	r7, r1
 8004716:	f000 f825 	bl	8004764 <__ieee754_sqrt>
 800471a:	4632      	mov	r2, r6
 800471c:	4604      	mov	r4, r0
 800471e:	460d      	mov	r5, r1
 8004720:	463b      	mov	r3, r7
 8004722:	4630      	mov	r0, r6
 8004724:	4639      	mov	r1, r7
 8004726:	f7fc f969 	bl	80009fc <__aeabi_dcmpun>
 800472a:	b990      	cbnz	r0, 8004752 <sqrt+0x42>
 800472c:	2200      	movs	r2, #0
 800472e:	2300      	movs	r3, #0
 8004730:	4630      	mov	r0, r6
 8004732:	4639      	mov	r1, r7
 8004734:	f7fc f93a 	bl	80009ac <__aeabi_dcmplt>
 8004738:	b158      	cbz	r0, 8004752 <sqrt+0x42>
 800473a:	f7ff ff57 	bl	80045ec <__errno>
 800473e:	2321      	movs	r3, #33	@ 0x21
 8004740:	2200      	movs	r2, #0
 8004742:	6003      	str	r3, [r0, #0]
 8004744:	2300      	movs	r3, #0
 8004746:	4610      	mov	r0, r2
 8004748:	4619      	mov	r1, r3
 800474a:	f7fb ffe7 	bl	800071c <__aeabi_ddiv>
 800474e:	4604      	mov	r4, r0
 8004750:	460d      	mov	r5, r1
 8004752:	4620      	mov	r0, r4
 8004754:	4629      	mov	r1, r5
 8004756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004758 <finite>:
 8004758:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800475c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8004760:	0fc0      	lsrs	r0, r0, #31
 8004762:	4770      	bx	lr

08004764 <__ieee754_sqrt>:
 8004764:	4a67      	ldr	r2, [pc, #412]	@ (8004904 <__ieee754_sqrt+0x1a0>)
 8004766:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800476a:	438a      	bics	r2, r1
 800476c:	4606      	mov	r6, r0
 800476e:	460f      	mov	r7, r1
 8004770:	460b      	mov	r3, r1
 8004772:	4604      	mov	r4, r0
 8004774:	d10e      	bne.n	8004794 <__ieee754_sqrt+0x30>
 8004776:	4602      	mov	r2, r0
 8004778:	f7fb fea6 	bl	80004c8 <__aeabi_dmul>
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	4630      	mov	r0, r6
 8004782:	4639      	mov	r1, r7
 8004784:	f7fb fcea 	bl	800015c <__adddf3>
 8004788:	4606      	mov	r6, r0
 800478a:	460f      	mov	r7, r1
 800478c:	4630      	mov	r0, r6
 800478e:	4639      	mov	r1, r7
 8004790:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004794:	2900      	cmp	r1, #0
 8004796:	dc0c      	bgt.n	80047b2 <__ieee754_sqrt+0x4e>
 8004798:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800479c:	4302      	orrs	r2, r0
 800479e:	d0f5      	beq.n	800478c <__ieee754_sqrt+0x28>
 80047a0:	b189      	cbz	r1, 80047c6 <__ieee754_sqrt+0x62>
 80047a2:	4602      	mov	r2, r0
 80047a4:	f7fb fcd8 	bl	8000158 <__aeabi_dsub>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	f7fb ffb6 	bl	800071c <__aeabi_ddiv>
 80047b0:	e7ea      	b.n	8004788 <__ieee754_sqrt+0x24>
 80047b2:	150a      	asrs	r2, r1, #20
 80047b4:	d115      	bne.n	80047e2 <__ieee754_sqrt+0x7e>
 80047b6:	2100      	movs	r1, #0
 80047b8:	e009      	b.n	80047ce <__ieee754_sqrt+0x6a>
 80047ba:	0ae3      	lsrs	r3, r4, #11
 80047bc:	3a15      	subs	r2, #21
 80047be:	0564      	lsls	r4, r4, #21
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0fa      	beq.n	80047ba <__ieee754_sqrt+0x56>
 80047c4:	e7f7      	b.n	80047b6 <__ieee754_sqrt+0x52>
 80047c6:	460a      	mov	r2, r1
 80047c8:	e7fa      	b.n	80047c0 <__ieee754_sqrt+0x5c>
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	3101      	adds	r1, #1
 80047ce:	02d8      	lsls	r0, r3, #11
 80047d0:	d5fb      	bpl.n	80047ca <__ieee754_sqrt+0x66>
 80047d2:	1e48      	subs	r0, r1, #1
 80047d4:	1a12      	subs	r2, r2, r0
 80047d6:	f1c1 0020 	rsb	r0, r1, #32
 80047da:	fa24 f000 	lsr.w	r0, r4, r0
 80047de:	4303      	orrs	r3, r0
 80047e0:	408c      	lsls	r4, r1
 80047e2:	2600      	movs	r6, #0
 80047e4:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80047e8:	2116      	movs	r1, #22
 80047ea:	07d2      	lsls	r2, r2, #31
 80047ec:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80047f0:	4632      	mov	r2, r6
 80047f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047fa:	bf5c      	itt	pl
 80047fc:	005b      	lslpl	r3, r3, #1
 80047fe:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8004802:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004806:	bf58      	it	pl
 8004808:	0064      	lslpl	r4, r4, #1
 800480a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800480e:	107f      	asrs	r7, r7, #1
 8004810:	0064      	lsls	r4, r4, #1
 8004812:	1815      	adds	r5, r2, r0
 8004814:	429d      	cmp	r5, r3
 8004816:	bfde      	ittt	le
 8004818:	182a      	addle	r2, r5, r0
 800481a:	1b5b      	suble	r3, r3, r5
 800481c:	1836      	addle	r6, r6, r0
 800481e:	0fe5      	lsrs	r5, r4, #31
 8004820:	3901      	subs	r1, #1
 8004822:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8004826:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800482a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800482e:	d1f0      	bne.n	8004812 <__ieee754_sqrt+0xae>
 8004830:	460d      	mov	r5, r1
 8004832:	f04f 0a20 	mov.w	sl, #32
 8004836:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800483a:	429a      	cmp	r2, r3
 800483c:	eb01 0c00 	add.w	ip, r1, r0
 8004840:	db02      	blt.n	8004848 <__ieee754_sqrt+0xe4>
 8004842:	d113      	bne.n	800486c <__ieee754_sqrt+0x108>
 8004844:	45a4      	cmp	ip, r4
 8004846:	d811      	bhi.n	800486c <__ieee754_sqrt+0x108>
 8004848:	f1bc 0f00 	cmp.w	ip, #0
 800484c:	eb0c 0100 	add.w	r1, ip, r0
 8004850:	da42      	bge.n	80048d8 <__ieee754_sqrt+0x174>
 8004852:	2900      	cmp	r1, #0
 8004854:	db40      	blt.n	80048d8 <__ieee754_sqrt+0x174>
 8004856:	f102 0e01 	add.w	lr, r2, #1
 800485a:	1a9b      	subs	r3, r3, r2
 800485c:	4672      	mov	r2, lr
 800485e:	45a4      	cmp	ip, r4
 8004860:	bf88      	it	hi
 8004862:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004866:	eba4 040c 	sub.w	r4, r4, ip
 800486a:	4405      	add	r5, r0
 800486c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8004870:	f1ba 0a01 	subs.w	sl, sl, #1
 8004874:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8004878:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800487c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8004880:	d1db      	bne.n	800483a <__ieee754_sqrt+0xd6>
 8004882:	431c      	orrs	r4, r3
 8004884:	d01a      	beq.n	80048bc <__ieee754_sqrt+0x158>
 8004886:	4c20      	ldr	r4, [pc, #128]	@ (8004908 <__ieee754_sqrt+0x1a4>)
 8004888:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800490c <__ieee754_sqrt+0x1a8>
 800488c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004890:	e9db 2300 	ldrd	r2, r3, [fp]
 8004894:	f7fb fc60 	bl	8000158 <__aeabi_dsub>
 8004898:	e9d4 8900 	ldrd	r8, r9, [r4]
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4640      	mov	r0, r8
 80048a2:	4649      	mov	r1, r9
 80048a4:	f7fc f88c 	bl	80009c0 <__aeabi_dcmple>
 80048a8:	b140      	cbz	r0, 80048bc <__ieee754_sqrt+0x158>
 80048aa:	e9d4 0100 	ldrd	r0, r1, [r4]
 80048ae:	e9db 2300 	ldrd	r2, r3, [fp]
 80048b2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80048b6:	d111      	bne.n	80048dc <__ieee754_sqrt+0x178>
 80048b8:	4655      	mov	r5, sl
 80048ba:	3601      	adds	r6, #1
 80048bc:	1072      	asrs	r2, r6, #1
 80048be:	086b      	lsrs	r3, r5, #1
 80048c0:	07f1      	lsls	r1, r6, #31
 80048c2:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80048c6:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80048ca:	bf48      	it	mi
 80048cc:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80048d0:	4618      	mov	r0, r3
 80048d2:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 80048d6:	e757      	b.n	8004788 <__ieee754_sqrt+0x24>
 80048d8:	4696      	mov	lr, r2
 80048da:	e7be      	b.n	800485a <__ieee754_sqrt+0xf6>
 80048dc:	f7fb fc3e 	bl	800015c <__adddf3>
 80048e0:	e9d4 8900 	ldrd	r8, r9, [r4]
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	4640      	mov	r0, r8
 80048ea:	4649      	mov	r1, r9
 80048ec:	f7fc f85e 	bl	80009ac <__aeabi_dcmplt>
 80048f0:	b120      	cbz	r0, 80048fc <__ieee754_sqrt+0x198>
 80048f2:	1ca8      	adds	r0, r5, #2
 80048f4:	bf08      	it	eq
 80048f6:	3601      	addeq	r6, #1
 80048f8:	3502      	adds	r5, #2
 80048fa:	e7df      	b.n	80048bc <__ieee754_sqrt+0x158>
 80048fc:	1c6b      	adds	r3, r5, #1
 80048fe:	f023 0501 	bic.w	r5, r3, #1
 8004902:	e7db      	b.n	80048bc <__ieee754_sqrt+0x158>
 8004904:	7ff00000 	.word	0x7ff00000
 8004908:	20000068 	.word	0x20000068
 800490c:	20000060 	.word	0x20000060

08004910 <__ieee754_pow>:
 8004910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004914:	b091      	sub	sp, #68	@ 0x44
 8004916:	e9cd 2300 	strd	r2, r3, [sp]
 800491a:	468b      	mov	fp, r1
 800491c:	e9dd 1800 	ldrd	r1, r8, [sp]
 8004920:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8004924:	4682      	mov	sl, r0
 8004926:	ea57 0001 	orrs.w	r0, r7, r1
 800492a:	d112      	bne.n	8004952 <__ieee754_pow+0x42>
 800492c:	4653      	mov	r3, sl
 800492e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8004932:	18db      	adds	r3, r3, r3
 8004934:	4152      	adcs	r2, r2
 8004936:	4298      	cmp	r0, r3
 8004938:	4b91      	ldr	r3, [pc, #580]	@ (8004b80 <__ieee754_pow+0x270>)
 800493a:	4193      	sbcs	r3, r2
 800493c:	f080 84ce 	bcs.w	80052dc <__ieee754_pow+0x9cc>
 8004940:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004944:	4650      	mov	r0, sl
 8004946:	4659      	mov	r1, fp
 8004948:	f7fb fc08 	bl	800015c <__adddf3>
 800494c:	b011      	add	sp, #68	@ 0x44
 800494e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004952:	4b8c      	ldr	r3, [pc, #560]	@ (8004b84 <__ieee754_pow+0x274>)
 8004954:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8004958:	429e      	cmp	r6, r3
 800495a:	465d      	mov	r5, fp
 800495c:	46d1      	mov	r9, sl
 800495e:	d807      	bhi.n	8004970 <__ieee754_pow+0x60>
 8004960:	d102      	bne.n	8004968 <__ieee754_pow+0x58>
 8004962:	f1ba 0f00 	cmp.w	sl, #0
 8004966:	d1eb      	bne.n	8004940 <__ieee754_pow+0x30>
 8004968:	429f      	cmp	r7, r3
 800496a:	d801      	bhi.n	8004970 <__ieee754_pow+0x60>
 800496c:	d10f      	bne.n	800498e <__ieee754_pow+0x7e>
 800496e:	b171      	cbz	r1, 800498e <__ieee754_pow+0x7e>
 8004970:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8004974:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8004978:	ea55 0509 	orrs.w	r5, r5, r9
 800497c:	d1e0      	bne.n	8004940 <__ieee754_pow+0x30>
 800497e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004982:	18db      	adds	r3, r3, r3
 8004984:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8004988:	4152      	adcs	r2, r2
 800498a:	429d      	cmp	r5, r3
 800498c:	e7d4      	b.n	8004938 <__ieee754_pow+0x28>
 800498e:	2d00      	cmp	r5, #0
 8004990:	4633      	mov	r3, r6
 8004992:	da39      	bge.n	8004a08 <__ieee754_pow+0xf8>
 8004994:	4a7c      	ldr	r2, [pc, #496]	@ (8004b88 <__ieee754_pow+0x278>)
 8004996:	4297      	cmp	r7, r2
 8004998:	d84e      	bhi.n	8004a38 <__ieee754_pow+0x128>
 800499a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800499e:	4297      	cmp	r7, r2
 80049a0:	f240 84ab 	bls.w	80052fa <__ieee754_pow+0x9ea>
 80049a4:	153a      	asrs	r2, r7, #20
 80049a6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80049aa:	2a14      	cmp	r2, #20
 80049ac:	dd0f      	ble.n	80049ce <__ieee754_pow+0xbe>
 80049ae:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80049b2:	fa21 f402 	lsr.w	r4, r1, r2
 80049b6:	fa04 f202 	lsl.w	r2, r4, r2
 80049ba:	428a      	cmp	r2, r1
 80049bc:	f040 849d 	bne.w	80052fa <__ieee754_pow+0x9ea>
 80049c0:	f004 0401 	and.w	r4, r4, #1
 80049c4:	f1c4 0402 	rsb	r4, r4, #2
 80049c8:	2900      	cmp	r1, #0
 80049ca:	d15a      	bne.n	8004a82 <__ieee754_pow+0x172>
 80049cc:	e00e      	b.n	80049ec <__ieee754_pow+0xdc>
 80049ce:	2900      	cmp	r1, #0
 80049d0:	d156      	bne.n	8004a80 <__ieee754_pow+0x170>
 80049d2:	f1c2 0214 	rsb	r2, r2, #20
 80049d6:	fa47 f402 	asr.w	r4, r7, r2
 80049da:	fa04 f202 	lsl.w	r2, r4, r2
 80049de:	42ba      	cmp	r2, r7
 80049e0:	f040 8488 	bne.w	80052f4 <__ieee754_pow+0x9e4>
 80049e4:	f004 0401 	and.w	r4, r4, #1
 80049e8:	f1c4 0402 	rsb	r4, r4, #2
 80049ec:	4a67      	ldr	r2, [pc, #412]	@ (8004b8c <__ieee754_pow+0x27c>)
 80049ee:	4297      	cmp	r7, r2
 80049f0:	d130      	bne.n	8004a54 <__ieee754_pow+0x144>
 80049f2:	f1b8 0f00 	cmp.w	r8, #0
 80049f6:	f280 8479 	bge.w	80052ec <__ieee754_pow+0x9dc>
 80049fa:	4652      	mov	r2, sl
 80049fc:	465b      	mov	r3, fp
 80049fe:	2000      	movs	r0, #0
 8004a00:	4962      	ldr	r1, [pc, #392]	@ (8004b8c <__ieee754_pow+0x27c>)
 8004a02:	f7fb fe8b 	bl	800071c <__aeabi_ddiv>
 8004a06:	e7a1      	b.n	800494c <__ieee754_pow+0x3c>
 8004a08:	2400      	movs	r4, #0
 8004a0a:	2900      	cmp	r1, #0
 8004a0c:	d139      	bne.n	8004a82 <__ieee754_pow+0x172>
 8004a0e:	4a5d      	ldr	r2, [pc, #372]	@ (8004b84 <__ieee754_pow+0x274>)
 8004a10:	4297      	cmp	r7, r2
 8004a12:	d1eb      	bne.n	80049ec <__ieee754_pow+0xdc>
 8004a14:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8004a18:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8004a1c:	ea53 0309 	orrs.w	r3, r3, r9
 8004a20:	f000 845c 	beq.w	80052dc <__ieee754_pow+0x9cc>
 8004a24:	4b5a      	ldr	r3, [pc, #360]	@ (8004b90 <__ieee754_pow+0x280>)
 8004a26:	429e      	cmp	r6, r3
 8004a28:	d908      	bls.n	8004a3c <__ieee754_pow+0x12c>
 8004a2a:	f1b8 0f00 	cmp.w	r8, #0
 8004a2e:	f2c0 8459 	blt.w	80052e4 <__ieee754_pow+0x9d4>
 8004a32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a36:	e789      	b.n	800494c <__ieee754_pow+0x3c>
 8004a38:	2402      	movs	r4, #2
 8004a3a:	e7e6      	b.n	8004a0a <__ieee754_pow+0xfa>
 8004a3c:	f1b8 0f00 	cmp.w	r8, #0
 8004a40:	f04f 0000 	mov.w	r0, #0
 8004a44:	f04f 0100 	mov.w	r1, #0
 8004a48:	da80      	bge.n	800494c <__ieee754_pow+0x3c>
 8004a4a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004a4e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8004a52:	e77b      	b.n	800494c <__ieee754_pow+0x3c>
 8004a54:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8004a58:	d106      	bne.n	8004a68 <__ieee754_pow+0x158>
 8004a5a:	4652      	mov	r2, sl
 8004a5c:	465b      	mov	r3, fp
 8004a5e:	4650      	mov	r0, sl
 8004a60:	4659      	mov	r1, fp
 8004a62:	f7fb fd31 	bl	80004c8 <__aeabi_dmul>
 8004a66:	e771      	b.n	800494c <__ieee754_pow+0x3c>
 8004a68:	4a4a      	ldr	r2, [pc, #296]	@ (8004b94 <__ieee754_pow+0x284>)
 8004a6a:	4590      	cmp	r8, r2
 8004a6c:	d109      	bne.n	8004a82 <__ieee754_pow+0x172>
 8004a6e:	2d00      	cmp	r5, #0
 8004a70:	db07      	blt.n	8004a82 <__ieee754_pow+0x172>
 8004a72:	4650      	mov	r0, sl
 8004a74:	4659      	mov	r1, fp
 8004a76:	b011      	add	sp, #68	@ 0x44
 8004a78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a7c:	f7ff be72 	b.w	8004764 <__ieee754_sqrt>
 8004a80:	2400      	movs	r4, #0
 8004a82:	4650      	mov	r0, sl
 8004a84:	4659      	mov	r1, fp
 8004a86:	9302      	str	r3, [sp, #8]
 8004a88:	f000 fc6a 	bl	8005360 <fabs>
 8004a8c:	9b02      	ldr	r3, [sp, #8]
 8004a8e:	f1b9 0f00 	cmp.w	r9, #0
 8004a92:	d127      	bne.n	8004ae4 <__ieee754_pow+0x1d4>
 8004a94:	4a3d      	ldr	r2, [pc, #244]	@ (8004b8c <__ieee754_pow+0x27c>)
 8004a96:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8004a9a:	4594      	cmp	ip, r2
 8004a9c:	d000      	beq.n	8004aa0 <__ieee754_pow+0x190>
 8004a9e:	bb0e      	cbnz	r6, 8004ae4 <__ieee754_pow+0x1d4>
 8004aa0:	f1b8 0f00 	cmp.w	r8, #0
 8004aa4:	da05      	bge.n	8004ab2 <__ieee754_pow+0x1a2>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	2000      	movs	r0, #0
 8004aac:	4937      	ldr	r1, [pc, #220]	@ (8004b8c <__ieee754_pow+0x27c>)
 8004aae:	f7fb fe35 	bl	800071c <__aeabi_ddiv>
 8004ab2:	2d00      	cmp	r5, #0
 8004ab4:	f6bf af4a 	bge.w	800494c <__ieee754_pow+0x3c>
 8004ab8:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8004abc:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8004ac0:	4326      	orrs	r6, r4
 8004ac2:	d108      	bne.n	8004ad6 <__ieee754_pow+0x1c6>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4610      	mov	r0, r2
 8004aca:	4619      	mov	r1, r3
 8004acc:	f7fb fb44 	bl	8000158 <__aeabi_dsub>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	e795      	b.n	8004a02 <__ieee754_pow+0xf2>
 8004ad6:	2c01      	cmp	r4, #1
 8004ad8:	f47f af38 	bne.w	800494c <__ieee754_pow+0x3c>
 8004adc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	e733      	b.n	800494c <__ieee754_pow+0x3c>
 8004ae4:	0fea      	lsrs	r2, r5, #31
 8004ae6:	3a01      	subs	r2, #1
 8004ae8:	ea52 0c04 	orrs.w	ip, r2, r4
 8004aec:	d102      	bne.n	8004af4 <__ieee754_pow+0x1e4>
 8004aee:	4652      	mov	r2, sl
 8004af0:	465b      	mov	r3, fp
 8004af2:	e7e9      	b.n	8004ac8 <__ieee754_pow+0x1b8>
 8004af4:	f04f 0900 	mov.w	r9, #0
 8004af8:	3c01      	subs	r4, #1
 8004afa:	4314      	orrs	r4, r2
 8004afc:	bf14      	ite	ne
 8004afe:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8004b8c <__ieee754_pow+0x27c>
 8004b02:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8004b98 <__ieee754_pow+0x288>
 8004b06:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8004b0a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8004b0e:	f240 8107 	bls.w	8004d20 <__ieee754_pow+0x410>
 8004b12:	4b22      	ldr	r3, [pc, #136]	@ (8004b9c <__ieee754_pow+0x28c>)
 8004b14:	429f      	cmp	r7, r3
 8004b16:	4b1e      	ldr	r3, [pc, #120]	@ (8004b90 <__ieee754_pow+0x280>)
 8004b18:	d913      	bls.n	8004b42 <__ieee754_pow+0x232>
 8004b1a:	429e      	cmp	r6, r3
 8004b1c:	d808      	bhi.n	8004b30 <__ieee754_pow+0x220>
 8004b1e:	f1b8 0f00 	cmp.w	r8, #0
 8004b22:	da08      	bge.n	8004b36 <__ieee754_pow+0x226>
 8004b24:	2000      	movs	r0, #0
 8004b26:	b011      	add	sp, #68	@ 0x44
 8004b28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b2c:	f000 bcb4 	b.w	8005498 <__math_oflow>
 8004b30:	f1b8 0f00 	cmp.w	r8, #0
 8004b34:	dcf6      	bgt.n	8004b24 <__ieee754_pow+0x214>
 8004b36:	2000      	movs	r0, #0
 8004b38:	b011      	add	sp, #68	@ 0x44
 8004b3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b3e:	f000 bca6 	b.w	800548e <__math_uflow>
 8004b42:	429e      	cmp	r6, r3
 8004b44:	d20c      	bcs.n	8004b60 <__ieee754_pow+0x250>
 8004b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f7fb ff2d 	bl	80009ac <__aeabi_dcmplt>
 8004b52:	3800      	subs	r0, #0
 8004b54:	bf18      	it	ne
 8004b56:	2001      	movne	r0, #1
 8004b58:	f1b8 0f00 	cmp.w	r8, #0
 8004b5c:	daec      	bge.n	8004b38 <__ieee754_pow+0x228>
 8004b5e:	e7e2      	b.n	8004b26 <__ieee754_pow+0x216>
 8004b60:	4b0a      	ldr	r3, [pc, #40]	@ (8004b8c <__ieee754_pow+0x27c>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	429e      	cmp	r6, r3
 8004b66:	d91b      	bls.n	8004ba0 <__ieee754_pow+0x290>
 8004b68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f7fb ff1d 	bl	80009ac <__aeabi_dcmplt>
 8004b72:	3800      	subs	r0, #0
 8004b74:	bf18      	it	ne
 8004b76:	2001      	movne	r0, #1
 8004b78:	f1b8 0f00 	cmp.w	r8, #0
 8004b7c:	dcd3      	bgt.n	8004b26 <__ieee754_pow+0x216>
 8004b7e:	e7db      	b.n	8004b38 <__ieee754_pow+0x228>
 8004b80:	fff00000 	.word	0xfff00000
 8004b84:	7ff00000 	.word	0x7ff00000
 8004b88:	433fffff 	.word	0x433fffff
 8004b8c:	3ff00000 	.word	0x3ff00000
 8004b90:	3fefffff 	.word	0x3fefffff
 8004b94:	3fe00000 	.word	0x3fe00000
 8004b98:	bff00000 	.word	0xbff00000
 8004b9c:	43f00000 	.word	0x43f00000
 8004ba0:	4b5b      	ldr	r3, [pc, #364]	@ (8004d10 <__ieee754_pow+0x400>)
 8004ba2:	f7fb fad9 	bl	8000158 <__aeabi_dsub>
 8004ba6:	a352      	add	r3, pc, #328	@ (adr r3, 8004cf0 <__ieee754_pow+0x3e0>)
 8004ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bac:	4604      	mov	r4, r0
 8004bae:	460d      	mov	r5, r1
 8004bb0:	f7fb fc8a 	bl	80004c8 <__aeabi_dmul>
 8004bb4:	a350      	add	r3, pc, #320	@ (adr r3, 8004cf8 <__ieee754_pow+0x3e8>)
 8004bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bba:	4606      	mov	r6, r0
 8004bbc:	460f      	mov	r7, r1
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	f7fb fc81 	bl	80004c8 <__aeabi_dmul>
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	4682      	mov	sl, r0
 8004bca:	468b      	mov	fp, r1
 8004bcc:	4620      	mov	r0, r4
 8004bce:	4629      	mov	r1, r5
 8004bd0:	4b50      	ldr	r3, [pc, #320]	@ (8004d14 <__ieee754_pow+0x404>)
 8004bd2:	f7fb fc79 	bl	80004c8 <__aeabi_dmul>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	a149      	add	r1, pc, #292	@ (adr r1, 8004d00 <__ieee754_pow+0x3f0>)
 8004bdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004be0:	f7fb faba 	bl	8000158 <__aeabi_dsub>
 8004be4:	4622      	mov	r2, r4
 8004be6:	462b      	mov	r3, r5
 8004be8:	f7fb fc6e 	bl	80004c8 <__aeabi_dmul>
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	4949      	ldr	r1, [pc, #292]	@ (8004d18 <__ieee754_pow+0x408>)
 8004bf4:	f7fb fab0 	bl	8000158 <__aeabi_dsub>
 8004bf8:	4622      	mov	r2, r4
 8004bfa:	4680      	mov	r8, r0
 8004bfc:	4689      	mov	r9, r1
 8004bfe:	462b      	mov	r3, r5
 8004c00:	4620      	mov	r0, r4
 8004c02:	4629      	mov	r1, r5
 8004c04:	f7fb fc60 	bl	80004c8 <__aeabi_dmul>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4640      	mov	r0, r8
 8004c0e:	4649      	mov	r1, r9
 8004c10:	f7fb fc5a 	bl	80004c8 <__aeabi_dmul>
 8004c14:	a33c      	add	r3, pc, #240	@ (adr r3, 8004d08 <__ieee754_pow+0x3f8>)
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	f7fb fc55 	bl	80004c8 <__aeabi_dmul>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4650      	mov	r0, sl
 8004c24:	4659      	mov	r1, fp
 8004c26:	f7fb fa97 	bl	8000158 <__aeabi_dsub>
 8004c2a:	2400      	movs	r4, #0
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4680      	mov	r8, r0
 8004c32:	4689      	mov	r9, r1
 8004c34:	4630      	mov	r0, r6
 8004c36:	4639      	mov	r1, r7
 8004c38:	f7fb fa90 	bl	800015c <__adddf3>
 8004c3c:	4632      	mov	r2, r6
 8004c3e:	463b      	mov	r3, r7
 8004c40:	4620      	mov	r0, r4
 8004c42:	460d      	mov	r5, r1
 8004c44:	f7fb fa88 	bl	8000158 <__aeabi_dsub>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4640      	mov	r0, r8
 8004c4e:	4649      	mov	r1, r9
 8004c50:	f7fb fa82 	bl	8000158 <__aeabi_dsub>
 8004c54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	9304      	str	r3, [sp, #16]
 8004c60:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004c64:	4606      	mov	r6, r0
 8004c66:	460f      	mov	r7, r1
 8004c68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c6c:	4652      	mov	r2, sl
 8004c6e:	465b      	mov	r3, fp
 8004c70:	f7fb fa72 	bl	8000158 <__aeabi_dsub>
 8004c74:	4622      	mov	r2, r4
 8004c76:	462b      	mov	r3, r5
 8004c78:	f7fb fc26 	bl	80004c8 <__aeabi_dmul>
 8004c7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c80:	4680      	mov	r8, r0
 8004c82:	4689      	mov	r9, r1
 8004c84:	4630      	mov	r0, r6
 8004c86:	4639      	mov	r1, r7
 8004c88:	f7fb fc1e 	bl	80004c8 <__aeabi_dmul>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	4640      	mov	r0, r8
 8004c92:	4649      	mov	r1, r9
 8004c94:	f7fb fa62 	bl	800015c <__adddf3>
 8004c98:	4652      	mov	r2, sl
 8004c9a:	465b      	mov	r3, fp
 8004c9c:	4606      	mov	r6, r0
 8004c9e:	460f      	mov	r7, r1
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	f7fb fc10 	bl	80004c8 <__aeabi_dmul>
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4602      	mov	r2, r0
 8004cac:	4680      	mov	r8, r0
 8004cae:	4689      	mov	r9, r1
 8004cb0:	4630      	mov	r0, r6
 8004cb2:	4639      	mov	r1, r7
 8004cb4:	f7fb fa52 	bl	800015c <__adddf3>
 8004cb8:	4b18      	ldr	r3, [pc, #96]	@ (8004d1c <__ieee754_pow+0x40c>)
 8004cba:	4604      	mov	r4, r0
 8004cbc:	4299      	cmp	r1, r3
 8004cbe:	460d      	mov	r5, r1
 8004cc0:	468a      	mov	sl, r1
 8004cc2:	468b      	mov	fp, r1
 8004cc4:	f340 82e0 	ble.w	8005288 <__ieee754_pow+0x978>
 8004cc8:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8004ccc:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8004cd0:	4303      	orrs	r3, r0
 8004cd2:	f000 81df 	beq.w	8005094 <__ieee754_pow+0x784>
 8004cd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f7fb fe65 	bl	80009ac <__aeabi_dcmplt>
 8004ce2:	3800      	subs	r0, #0
 8004ce4:	bf18      	it	ne
 8004ce6:	2001      	movne	r0, #1
 8004ce8:	e71d      	b.n	8004b26 <__ieee754_pow+0x216>
 8004cea:	bf00      	nop
 8004cec:	f3af 8000 	nop.w
 8004cf0:	60000000 	.word	0x60000000
 8004cf4:	3ff71547 	.word	0x3ff71547
 8004cf8:	f85ddf44 	.word	0xf85ddf44
 8004cfc:	3e54ae0b 	.word	0x3e54ae0b
 8004d00:	55555555 	.word	0x55555555
 8004d04:	3fd55555 	.word	0x3fd55555
 8004d08:	652b82fe 	.word	0x652b82fe
 8004d0c:	3ff71547 	.word	0x3ff71547
 8004d10:	3ff00000 	.word	0x3ff00000
 8004d14:	3fd00000 	.word	0x3fd00000
 8004d18:	3fe00000 	.word	0x3fe00000
 8004d1c:	408fffff 	.word	0x408fffff
 8004d20:	4ad3      	ldr	r2, [pc, #844]	@ (8005070 <__ieee754_pow+0x760>)
 8004d22:	402a      	ands	r2, r5
 8004d24:	2a00      	cmp	r2, #0
 8004d26:	f040 817a 	bne.w	800501e <__ieee754_pow+0x70e>
 8004d2a:	4bd2      	ldr	r3, [pc, #840]	@ (8005074 <__ieee754_pow+0x764>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f7fb fbcb 	bl	80004c8 <__aeabi_dmul>
 8004d32:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8004d36:	460b      	mov	r3, r1
 8004d38:	151a      	asrs	r2, r3, #20
 8004d3a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8004d3e:	4422      	add	r2, r4
 8004d40:	920a      	str	r2, [sp, #40]	@ 0x28
 8004d42:	4acd      	ldr	r2, [pc, #820]	@ (8005078 <__ieee754_pow+0x768>)
 8004d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d48:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8004d52:	dd08      	ble.n	8004d66 <__ieee754_pow+0x456>
 8004d54:	4ac9      	ldr	r2, [pc, #804]	@ (800507c <__ieee754_pow+0x76c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	f340 8163 	ble.w	8005022 <__ieee754_pow+0x712>
 8004d5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d5e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8004d62:	3301      	adds	r3, #1
 8004d64:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d66:	2600      	movs	r6, #0
 8004d68:	00f3      	lsls	r3, r6, #3
 8004d6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d6c:	4bc4      	ldr	r3, [pc, #784]	@ (8005080 <__ieee754_pow+0x770>)
 8004d6e:	4629      	mov	r1, r5
 8004d70:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004d74:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004d7e:	4623      	mov	r3, r4
 8004d80:	4682      	mov	sl, r0
 8004d82:	f7fb f9e9 	bl	8000158 <__aeabi_dsub>
 8004d86:	4652      	mov	r2, sl
 8004d88:	462b      	mov	r3, r5
 8004d8a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8004d8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004d92:	f7fb f9e3 	bl	800015c <__adddf3>
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	49b9      	ldr	r1, [pc, #740]	@ (8005084 <__ieee754_pow+0x774>)
 8004d9e:	f7fb fcbd 	bl	800071c <__aeabi_ddiv>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004daa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004dae:	f7fb fb8b 	bl	80004c8 <__aeabi_dmul>
 8004db2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004db6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004dba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	46ab      	mov	fp, r5
 8004dc4:	106d      	asrs	r5, r5, #1
 8004dc6:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8004dca:	9304      	str	r3, [sp, #16]
 8004dcc:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8004dd0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004dd4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8004dd8:	4640      	mov	r0, r8
 8004dda:	4649      	mov	r1, r9
 8004ddc:	4614      	mov	r4, r2
 8004dde:	461d      	mov	r5, r3
 8004de0:	f7fb fb72 	bl	80004c8 <__aeabi_dmul>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004dec:	f7fb f9b4 	bl	8000158 <__aeabi_dsub>
 8004df0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004df4:	4606      	mov	r6, r0
 8004df6:	460f      	mov	r7, r1
 8004df8:	4620      	mov	r0, r4
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	f7fb f9ac 	bl	8000158 <__aeabi_dsub>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4650      	mov	r0, sl
 8004e06:	4659      	mov	r1, fp
 8004e08:	f7fb f9a6 	bl	8000158 <__aeabi_dsub>
 8004e0c:	4642      	mov	r2, r8
 8004e0e:	464b      	mov	r3, r9
 8004e10:	f7fb fb5a 	bl	80004c8 <__aeabi_dmul>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4630      	mov	r0, r6
 8004e1a:	4639      	mov	r1, r7
 8004e1c:	f7fb f99c 	bl	8000158 <__aeabi_dsub>
 8004e20:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004e24:	f7fb fb50 	bl	80004c8 <__aeabi_dmul>
 8004e28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e2c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004e30:	4610      	mov	r0, r2
 8004e32:	4619      	mov	r1, r3
 8004e34:	f7fb fb48 	bl	80004c8 <__aeabi_dmul>
 8004e38:	a37b      	add	r3, pc, #492	@ (adr r3, 8005028 <__ieee754_pow+0x718>)
 8004e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3e:	4604      	mov	r4, r0
 8004e40:	460d      	mov	r5, r1
 8004e42:	f7fb fb41 	bl	80004c8 <__aeabi_dmul>
 8004e46:	a37a      	add	r3, pc, #488	@ (adr r3, 8005030 <__ieee754_pow+0x720>)
 8004e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4c:	f7fb f986 	bl	800015c <__adddf3>
 8004e50:	4622      	mov	r2, r4
 8004e52:	462b      	mov	r3, r5
 8004e54:	f7fb fb38 	bl	80004c8 <__aeabi_dmul>
 8004e58:	a377      	add	r3, pc, #476	@ (adr r3, 8005038 <__ieee754_pow+0x728>)
 8004e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5e:	f7fb f97d 	bl	800015c <__adddf3>
 8004e62:	4622      	mov	r2, r4
 8004e64:	462b      	mov	r3, r5
 8004e66:	f7fb fb2f 	bl	80004c8 <__aeabi_dmul>
 8004e6a:	a375      	add	r3, pc, #468	@ (adr r3, 8005040 <__ieee754_pow+0x730>)
 8004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e70:	f7fb f974 	bl	800015c <__adddf3>
 8004e74:	4622      	mov	r2, r4
 8004e76:	462b      	mov	r3, r5
 8004e78:	f7fb fb26 	bl	80004c8 <__aeabi_dmul>
 8004e7c:	a372      	add	r3, pc, #456	@ (adr r3, 8005048 <__ieee754_pow+0x738>)
 8004e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e82:	f7fb f96b 	bl	800015c <__adddf3>
 8004e86:	4622      	mov	r2, r4
 8004e88:	462b      	mov	r3, r5
 8004e8a:	f7fb fb1d 	bl	80004c8 <__aeabi_dmul>
 8004e8e:	a370      	add	r3, pc, #448	@ (adr r3, 8005050 <__ieee754_pow+0x740>)
 8004e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e94:	f7fb f962 	bl	800015c <__adddf3>
 8004e98:	4622      	mov	r2, r4
 8004e9a:	4606      	mov	r6, r0
 8004e9c:	460f      	mov	r7, r1
 8004e9e:	462b      	mov	r3, r5
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	f7fb fb10 	bl	80004c8 <__aeabi_dmul>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4630      	mov	r0, r6
 8004eae:	4639      	mov	r1, r7
 8004eb0:	f7fb fb0a 	bl	80004c8 <__aeabi_dmul>
 8004eb4:	4604      	mov	r4, r0
 8004eb6:	460d      	mov	r5, r1
 8004eb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ebc:	4642      	mov	r2, r8
 8004ebe:	464b      	mov	r3, r9
 8004ec0:	f7fb f94c 	bl	800015c <__adddf3>
 8004ec4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004ec8:	f7fb fafe 	bl	80004c8 <__aeabi_dmul>
 8004ecc:	4622      	mov	r2, r4
 8004ece:	462b      	mov	r3, r5
 8004ed0:	f7fb f944 	bl	800015c <__adddf3>
 8004ed4:	4642      	mov	r2, r8
 8004ed6:	4682      	mov	sl, r0
 8004ed8:	468b      	mov	fp, r1
 8004eda:	464b      	mov	r3, r9
 8004edc:	4640      	mov	r0, r8
 8004ede:	4649      	mov	r1, r9
 8004ee0:	f7fb faf2 	bl	80004c8 <__aeabi_dmul>
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	4b68      	ldr	r3, [pc, #416]	@ (8005088 <__ieee754_pow+0x778>)
 8004ee8:	4606      	mov	r6, r0
 8004eea:	460f      	mov	r7, r1
 8004eec:	f7fb f936 	bl	800015c <__adddf3>
 8004ef0:	4652      	mov	r2, sl
 8004ef2:	465b      	mov	r3, fp
 8004ef4:	f7fb f932 	bl	800015c <__adddf3>
 8004ef8:	2400      	movs	r4, #0
 8004efa:	460d      	mov	r5, r1
 8004efc:	4622      	mov	r2, r4
 8004efe:	460b      	mov	r3, r1
 8004f00:	4640      	mov	r0, r8
 8004f02:	4649      	mov	r1, r9
 8004f04:	f7fb fae0 	bl	80004c8 <__aeabi_dmul>
 8004f08:	2200      	movs	r2, #0
 8004f0a:	4680      	mov	r8, r0
 8004f0c:	4689      	mov	r9, r1
 8004f0e:	4620      	mov	r0, r4
 8004f10:	4629      	mov	r1, r5
 8004f12:	4b5d      	ldr	r3, [pc, #372]	@ (8005088 <__ieee754_pow+0x778>)
 8004f14:	f7fb f920 	bl	8000158 <__aeabi_dsub>
 8004f18:	4632      	mov	r2, r6
 8004f1a:	463b      	mov	r3, r7
 8004f1c:	f7fb f91c 	bl	8000158 <__aeabi_dsub>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4650      	mov	r0, sl
 8004f26:	4659      	mov	r1, fp
 8004f28:	f7fb f916 	bl	8000158 <__aeabi_dsub>
 8004f2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f30:	f7fb faca 	bl	80004c8 <__aeabi_dmul>
 8004f34:	4622      	mov	r2, r4
 8004f36:	4606      	mov	r6, r0
 8004f38:	460f      	mov	r7, r1
 8004f3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004f3e:	462b      	mov	r3, r5
 8004f40:	f7fb fac2 	bl	80004c8 <__aeabi_dmul>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4630      	mov	r0, r6
 8004f4a:	4639      	mov	r1, r7
 8004f4c:	f7fb f906 	bl	800015c <__adddf3>
 8004f50:	2400      	movs	r4, #0
 8004f52:	4606      	mov	r6, r0
 8004f54:	460f      	mov	r7, r1
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4640      	mov	r0, r8
 8004f5c:	4649      	mov	r1, r9
 8004f5e:	f7fb f8fd 	bl	800015c <__adddf3>
 8004f62:	a33d      	add	r3, pc, #244	@ (adr r3, 8005058 <__ieee754_pow+0x748>)
 8004f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f68:	4620      	mov	r0, r4
 8004f6a:	460d      	mov	r5, r1
 8004f6c:	f7fb faac 	bl	80004c8 <__aeabi_dmul>
 8004f70:	4642      	mov	r2, r8
 8004f72:	464b      	mov	r3, r9
 8004f74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004f78:	4620      	mov	r0, r4
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	f7fb f8ec 	bl	8000158 <__aeabi_dsub>
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	4630      	mov	r0, r6
 8004f86:	4639      	mov	r1, r7
 8004f88:	f7fb f8e6 	bl	8000158 <__aeabi_dsub>
 8004f8c:	a334      	add	r3, pc, #208	@ (adr r3, 8005060 <__ieee754_pow+0x750>)
 8004f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f92:	f7fb fa99 	bl	80004c8 <__aeabi_dmul>
 8004f96:	a334      	add	r3, pc, #208	@ (adr r3, 8005068 <__ieee754_pow+0x758>)
 8004f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9c:	4606      	mov	r6, r0
 8004f9e:	460f      	mov	r7, r1
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	f7fb fa90 	bl	80004c8 <__aeabi_dmul>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
 8004fac:	4630      	mov	r0, r6
 8004fae:	4639      	mov	r1, r7
 8004fb0:	f7fb f8d4 	bl	800015c <__adddf3>
 8004fb4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004fb6:	4b35      	ldr	r3, [pc, #212]	@ (800508c <__ieee754_pow+0x77c>)
 8004fb8:	2400      	movs	r4, #0
 8004fba:	4413      	add	r3, r2
 8004fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc0:	f7fb f8cc 	bl	800015c <__adddf3>
 8004fc4:	4682      	mov	sl, r0
 8004fc6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004fc8:	468b      	mov	fp, r1
 8004fca:	f7fb fa13 	bl	80003f4 <__aeabi_i2d>
 8004fce:	4606      	mov	r6, r0
 8004fd0:	460f      	mov	r7, r1
 8004fd2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004fd4:	4b2e      	ldr	r3, [pc, #184]	@ (8005090 <__ieee754_pow+0x780>)
 8004fd6:	4413      	add	r3, r2
 8004fd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004fdc:	4652      	mov	r2, sl
 8004fde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fe2:	465b      	mov	r3, fp
 8004fe4:	f7fb f8ba 	bl	800015c <__adddf3>
 8004fe8:	4642      	mov	r2, r8
 8004fea:	464b      	mov	r3, r9
 8004fec:	f7fb f8b6 	bl	800015c <__adddf3>
 8004ff0:	4632      	mov	r2, r6
 8004ff2:	463b      	mov	r3, r7
 8004ff4:	f7fb f8b2 	bl	800015c <__adddf3>
 8004ff8:	4632      	mov	r2, r6
 8004ffa:	463b      	mov	r3, r7
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	460d      	mov	r5, r1
 8005000:	f7fb f8aa 	bl	8000158 <__aeabi_dsub>
 8005004:	4642      	mov	r2, r8
 8005006:	464b      	mov	r3, r9
 8005008:	f7fb f8a6 	bl	8000158 <__aeabi_dsub>
 800500c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005010:	f7fb f8a2 	bl	8000158 <__aeabi_dsub>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4650      	mov	r0, sl
 800501a:	4659      	mov	r1, fp
 800501c:	e618      	b.n	8004c50 <__ieee754_pow+0x340>
 800501e:	2400      	movs	r4, #0
 8005020:	e68a      	b.n	8004d38 <__ieee754_pow+0x428>
 8005022:	2601      	movs	r6, #1
 8005024:	e6a0      	b.n	8004d68 <__ieee754_pow+0x458>
 8005026:	bf00      	nop
 8005028:	4a454eef 	.word	0x4a454eef
 800502c:	3fca7e28 	.word	0x3fca7e28
 8005030:	93c9db65 	.word	0x93c9db65
 8005034:	3fcd864a 	.word	0x3fcd864a
 8005038:	a91d4101 	.word	0xa91d4101
 800503c:	3fd17460 	.word	0x3fd17460
 8005040:	518f264d 	.word	0x518f264d
 8005044:	3fd55555 	.word	0x3fd55555
 8005048:	db6fabff 	.word	0xdb6fabff
 800504c:	3fdb6db6 	.word	0x3fdb6db6
 8005050:	33333303 	.word	0x33333303
 8005054:	3fe33333 	.word	0x3fe33333
 8005058:	e0000000 	.word	0xe0000000
 800505c:	3feec709 	.word	0x3feec709
 8005060:	dc3a03fd 	.word	0xdc3a03fd
 8005064:	3feec709 	.word	0x3feec709
 8005068:	145b01f5 	.word	0x145b01f5
 800506c:	be3e2fe0 	.word	0xbe3e2fe0
 8005070:	7ff00000 	.word	0x7ff00000
 8005074:	43400000 	.word	0x43400000
 8005078:	0003988e 	.word	0x0003988e
 800507c:	000bb679 	.word	0x000bb679
 8005080:	080064a8 	.word	0x080064a8
 8005084:	3ff00000 	.word	0x3ff00000
 8005088:	40080000 	.word	0x40080000
 800508c:	08006488 	.word	0x08006488
 8005090:	08006498 	.word	0x08006498
 8005094:	a39a      	add	r3, pc, #616	@ (adr r3, 8005300 <__ieee754_pow+0x9f0>)
 8005096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509a:	4630      	mov	r0, r6
 800509c:	4639      	mov	r1, r7
 800509e:	f7fb f85d 	bl	800015c <__adddf3>
 80050a2:	4642      	mov	r2, r8
 80050a4:	e9cd 0100 	strd	r0, r1, [sp]
 80050a8:	464b      	mov	r3, r9
 80050aa:	4620      	mov	r0, r4
 80050ac:	4629      	mov	r1, r5
 80050ae:	f7fb f853 	bl	8000158 <__aeabi_dsub>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050ba:	f7fb fc95 	bl	80009e8 <__aeabi_dcmpgt>
 80050be:	2800      	cmp	r0, #0
 80050c0:	f47f ae09 	bne.w	8004cd6 <__ieee754_pow+0x3c6>
 80050c4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80050c8:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80050cc:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80050d0:	fa43 fa0a 	asr.w	sl, r3, sl
 80050d4:	44da      	add	sl, fp
 80050d6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80050da:	489b      	ldr	r0, [pc, #620]	@ (8005348 <__ieee754_pow+0xa38>)
 80050dc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80050e0:	4108      	asrs	r0, r1
 80050e2:	ea00 030a 	and.w	r3, r0, sl
 80050e6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80050ea:	f1c1 0114 	rsb	r1, r1, #20
 80050ee:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80050f2:	4640      	mov	r0, r8
 80050f4:	fa4a fa01 	asr.w	sl, sl, r1
 80050f8:	f1bb 0f00 	cmp.w	fp, #0
 80050fc:	4649      	mov	r1, r9
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	bfb8      	it	lt
 8005104:	f1ca 0a00 	rsblt	sl, sl, #0
 8005108:	f7fb f826 	bl	8000158 <__aeabi_dsub>
 800510c:	4680      	mov	r8, r0
 800510e:	4689      	mov	r9, r1
 8005110:	2400      	movs	r4, #0
 8005112:	4632      	mov	r2, r6
 8005114:	463b      	mov	r3, r7
 8005116:	4640      	mov	r0, r8
 8005118:	4649      	mov	r1, r9
 800511a:	f7fb f81f 	bl	800015c <__adddf3>
 800511e:	a37a      	add	r3, pc, #488	@ (adr r3, 8005308 <__ieee754_pow+0x9f8>)
 8005120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005124:	4620      	mov	r0, r4
 8005126:	460d      	mov	r5, r1
 8005128:	f7fb f9ce 	bl	80004c8 <__aeabi_dmul>
 800512c:	4642      	mov	r2, r8
 800512e:	464b      	mov	r3, r9
 8005130:	e9cd 0100 	strd	r0, r1, [sp]
 8005134:	4620      	mov	r0, r4
 8005136:	4629      	mov	r1, r5
 8005138:	f7fb f80e 	bl	8000158 <__aeabi_dsub>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4630      	mov	r0, r6
 8005142:	4639      	mov	r1, r7
 8005144:	f7fb f808 	bl	8000158 <__aeabi_dsub>
 8005148:	a371      	add	r3, pc, #452	@ (adr r3, 8005310 <__ieee754_pow+0xa00>)
 800514a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514e:	f7fb f9bb 	bl	80004c8 <__aeabi_dmul>
 8005152:	a371      	add	r3, pc, #452	@ (adr r3, 8005318 <__ieee754_pow+0xa08>)
 8005154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005158:	4680      	mov	r8, r0
 800515a:	4689      	mov	r9, r1
 800515c:	4620      	mov	r0, r4
 800515e:	4629      	mov	r1, r5
 8005160:	f7fb f9b2 	bl	80004c8 <__aeabi_dmul>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4640      	mov	r0, r8
 800516a:	4649      	mov	r1, r9
 800516c:	f7fa fff6 	bl	800015c <__adddf3>
 8005170:	4604      	mov	r4, r0
 8005172:	460d      	mov	r5, r1
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	e9dd 0100 	ldrd	r0, r1, [sp]
 800517c:	f7fa ffee 	bl	800015c <__adddf3>
 8005180:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005184:	4680      	mov	r8, r0
 8005186:	4689      	mov	r9, r1
 8005188:	f7fa ffe6 	bl	8000158 <__aeabi_dsub>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4620      	mov	r0, r4
 8005192:	4629      	mov	r1, r5
 8005194:	f7fa ffe0 	bl	8000158 <__aeabi_dsub>
 8005198:	4642      	mov	r2, r8
 800519a:	4606      	mov	r6, r0
 800519c:	460f      	mov	r7, r1
 800519e:	464b      	mov	r3, r9
 80051a0:	4640      	mov	r0, r8
 80051a2:	4649      	mov	r1, r9
 80051a4:	f7fb f990 	bl	80004c8 <__aeabi_dmul>
 80051a8:	a35d      	add	r3, pc, #372	@ (adr r3, 8005320 <__ieee754_pow+0xa10>)
 80051aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ae:	4604      	mov	r4, r0
 80051b0:	460d      	mov	r5, r1
 80051b2:	f7fb f989 	bl	80004c8 <__aeabi_dmul>
 80051b6:	a35c      	add	r3, pc, #368	@ (adr r3, 8005328 <__ieee754_pow+0xa18>)
 80051b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051bc:	f7fa ffcc 	bl	8000158 <__aeabi_dsub>
 80051c0:	4622      	mov	r2, r4
 80051c2:	462b      	mov	r3, r5
 80051c4:	f7fb f980 	bl	80004c8 <__aeabi_dmul>
 80051c8:	a359      	add	r3, pc, #356	@ (adr r3, 8005330 <__ieee754_pow+0xa20>)
 80051ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ce:	f7fa ffc5 	bl	800015c <__adddf3>
 80051d2:	4622      	mov	r2, r4
 80051d4:	462b      	mov	r3, r5
 80051d6:	f7fb f977 	bl	80004c8 <__aeabi_dmul>
 80051da:	a357      	add	r3, pc, #348	@ (adr r3, 8005338 <__ieee754_pow+0xa28>)
 80051dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e0:	f7fa ffba 	bl	8000158 <__aeabi_dsub>
 80051e4:	4622      	mov	r2, r4
 80051e6:	462b      	mov	r3, r5
 80051e8:	f7fb f96e 	bl	80004c8 <__aeabi_dmul>
 80051ec:	a354      	add	r3, pc, #336	@ (adr r3, 8005340 <__ieee754_pow+0xa30>)
 80051ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f2:	f7fa ffb3 	bl	800015c <__adddf3>
 80051f6:	4622      	mov	r2, r4
 80051f8:	462b      	mov	r3, r5
 80051fa:	f7fb f965 	bl	80004c8 <__aeabi_dmul>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	4640      	mov	r0, r8
 8005204:	4649      	mov	r1, r9
 8005206:	f7fa ffa7 	bl	8000158 <__aeabi_dsub>
 800520a:	4604      	mov	r4, r0
 800520c:	460d      	mov	r5, r1
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4640      	mov	r0, r8
 8005214:	4649      	mov	r1, r9
 8005216:	f7fb f957 	bl	80004c8 <__aeabi_dmul>
 800521a:	2200      	movs	r2, #0
 800521c:	e9cd 0100 	strd	r0, r1, [sp]
 8005220:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005224:	4620      	mov	r0, r4
 8005226:	4629      	mov	r1, r5
 8005228:	f7fa ff96 	bl	8000158 <__aeabi_dsub>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005234:	f7fb fa72 	bl	800071c <__aeabi_ddiv>
 8005238:	4632      	mov	r2, r6
 800523a:	4604      	mov	r4, r0
 800523c:	460d      	mov	r5, r1
 800523e:	463b      	mov	r3, r7
 8005240:	4640      	mov	r0, r8
 8005242:	4649      	mov	r1, r9
 8005244:	f7fb f940 	bl	80004c8 <__aeabi_dmul>
 8005248:	4632      	mov	r2, r6
 800524a:	463b      	mov	r3, r7
 800524c:	f7fa ff86 	bl	800015c <__adddf3>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	4620      	mov	r0, r4
 8005256:	4629      	mov	r1, r5
 8005258:	f7fa ff7e 	bl	8000158 <__aeabi_dsub>
 800525c:	4642      	mov	r2, r8
 800525e:	464b      	mov	r3, r9
 8005260:	f7fa ff7a 	bl	8000158 <__aeabi_dsub>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	2000      	movs	r0, #0
 800526a:	4938      	ldr	r1, [pc, #224]	@ (800534c <__ieee754_pow+0xa3c>)
 800526c:	f7fa ff74 	bl	8000158 <__aeabi_dsub>
 8005270:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005274:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8005278:	da2e      	bge.n	80052d8 <__ieee754_pow+0x9c8>
 800527a:	4652      	mov	r2, sl
 800527c:	f000 f874 	bl	8005368 <scalbn>
 8005280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005284:	f7ff bbed 	b.w	8004a62 <__ieee754_pow+0x152>
 8005288:	4c31      	ldr	r4, [pc, #196]	@ (8005350 <__ieee754_pow+0xa40>)
 800528a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800528e:	42a3      	cmp	r3, r4
 8005290:	d91a      	bls.n	80052c8 <__ieee754_pow+0x9b8>
 8005292:	4b30      	ldr	r3, [pc, #192]	@ (8005354 <__ieee754_pow+0xa44>)
 8005294:	440b      	add	r3, r1
 8005296:	4303      	orrs	r3, r0
 8005298:	d009      	beq.n	80052ae <__ieee754_pow+0x99e>
 800529a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800529e:	2200      	movs	r2, #0
 80052a0:	2300      	movs	r3, #0
 80052a2:	f7fb fb83 	bl	80009ac <__aeabi_dcmplt>
 80052a6:	3800      	subs	r0, #0
 80052a8:	bf18      	it	ne
 80052aa:	2001      	movne	r0, #1
 80052ac:	e444      	b.n	8004b38 <__ieee754_pow+0x228>
 80052ae:	4642      	mov	r2, r8
 80052b0:	464b      	mov	r3, r9
 80052b2:	f7fa ff51 	bl	8000158 <__aeabi_dsub>
 80052b6:	4632      	mov	r2, r6
 80052b8:	463b      	mov	r3, r7
 80052ba:	f7fb fb8b 	bl	80009d4 <__aeabi_dcmpge>
 80052be:	2800      	cmp	r0, #0
 80052c0:	d1eb      	bne.n	800529a <__ieee754_pow+0x98a>
 80052c2:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8005358 <__ieee754_pow+0xa48>
 80052c6:	e6fd      	b.n	80050c4 <__ieee754_pow+0x7b4>
 80052c8:	469a      	mov	sl, r3
 80052ca:	4b24      	ldr	r3, [pc, #144]	@ (800535c <__ieee754_pow+0xa4c>)
 80052cc:	459a      	cmp	sl, r3
 80052ce:	f63f aef9 	bhi.w	80050c4 <__ieee754_pow+0x7b4>
 80052d2:	f8dd a010 	ldr.w	sl, [sp, #16]
 80052d6:	e71b      	b.n	8005110 <__ieee754_pow+0x800>
 80052d8:	4621      	mov	r1, r4
 80052da:	e7d1      	b.n	8005280 <__ieee754_pow+0x970>
 80052dc:	2000      	movs	r0, #0
 80052de:	491b      	ldr	r1, [pc, #108]	@ (800534c <__ieee754_pow+0xa3c>)
 80052e0:	f7ff bb34 	b.w	800494c <__ieee754_pow+0x3c>
 80052e4:	2000      	movs	r0, #0
 80052e6:	2100      	movs	r1, #0
 80052e8:	f7ff bb30 	b.w	800494c <__ieee754_pow+0x3c>
 80052ec:	4650      	mov	r0, sl
 80052ee:	4659      	mov	r1, fp
 80052f0:	f7ff bb2c 	b.w	800494c <__ieee754_pow+0x3c>
 80052f4:	460c      	mov	r4, r1
 80052f6:	f7ff bb79 	b.w	80049ec <__ieee754_pow+0xdc>
 80052fa:	2400      	movs	r4, #0
 80052fc:	f7ff bb64 	b.w	80049c8 <__ieee754_pow+0xb8>
 8005300:	652b82fe 	.word	0x652b82fe
 8005304:	3c971547 	.word	0x3c971547
 8005308:	00000000 	.word	0x00000000
 800530c:	3fe62e43 	.word	0x3fe62e43
 8005310:	fefa39ef 	.word	0xfefa39ef
 8005314:	3fe62e42 	.word	0x3fe62e42
 8005318:	0ca86c39 	.word	0x0ca86c39
 800531c:	be205c61 	.word	0xbe205c61
 8005320:	72bea4d0 	.word	0x72bea4d0
 8005324:	3e663769 	.word	0x3e663769
 8005328:	c5d26bf1 	.word	0xc5d26bf1
 800532c:	3ebbbd41 	.word	0x3ebbbd41
 8005330:	af25de2c 	.word	0xaf25de2c
 8005334:	3f11566a 	.word	0x3f11566a
 8005338:	16bebd93 	.word	0x16bebd93
 800533c:	3f66c16c 	.word	0x3f66c16c
 8005340:	5555553e 	.word	0x5555553e
 8005344:	3fc55555 	.word	0x3fc55555
 8005348:	fff00000 	.word	0xfff00000
 800534c:	3ff00000 	.word	0x3ff00000
 8005350:	4090cbff 	.word	0x4090cbff
 8005354:	3f6f3400 	.word	0x3f6f3400
 8005358:	4090cc00 	.word	0x4090cc00
 800535c:	3fe00000 	.word	0x3fe00000

08005360 <fabs>:
 8005360:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005364:	4619      	mov	r1, r3
 8005366:	4770      	bx	lr

08005368 <scalbn>:
 8005368:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800536c:	4616      	mov	r6, r2
 800536e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005372:	4683      	mov	fp, r0
 8005374:	468c      	mov	ip, r1
 8005376:	460b      	mov	r3, r1
 8005378:	b982      	cbnz	r2, 800539c <scalbn+0x34>
 800537a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800537e:	4303      	orrs	r3, r0
 8005380:	d039      	beq.n	80053f6 <scalbn+0x8e>
 8005382:	4b2f      	ldr	r3, [pc, #188]	@ (8005440 <scalbn+0xd8>)
 8005384:	2200      	movs	r2, #0
 8005386:	f7fb f89f 	bl	80004c8 <__aeabi_dmul>
 800538a:	4b2e      	ldr	r3, [pc, #184]	@ (8005444 <scalbn+0xdc>)
 800538c:	4683      	mov	fp, r0
 800538e:	429e      	cmp	r6, r3
 8005390:	468c      	mov	ip, r1
 8005392:	da0d      	bge.n	80053b0 <scalbn+0x48>
 8005394:	a326      	add	r3, pc, #152	@ (adr r3, 8005430 <scalbn+0xc8>)
 8005396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539a:	e01b      	b.n	80053d4 <scalbn+0x6c>
 800539c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 80053a0:	42ba      	cmp	r2, r7
 80053a2:	d109      	bne.n	80053b8 <scalbn+0x50>
 80053a4:	4602      	mov	r2, r0
 80053a6:	f7fa fed9 	bl	800015c <__adddf3>
 80053aa:	4683      	mov	fp, r0
 80053ac:	468c      	mov	ip, r1
 80053ae:	e022      	b.n	80053f6 <scalbn+0x8e>
 80053b0:	460b      	mov	r3, r1
 80053b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80053b6:	3a36      	subs	r2, #54	@ 0x36
 80053b8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80053bc:	428e      	cmp	r6, r1
 80053be:	dd0c      	ble.n	80053da <scalbn+0x72>
 80053c0:	a31d      	add	r3, pc, #116	@ (adr r3, 8005438 <scalbn+0xd0>)
 80053c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c6:	461c      	mov	r4, r3
 80053c8:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 80053cc:	f361 74df 	bfi	r4, r1, #31, #1
 80053d0:	4621      	mov	r1, r4
 80053d2:	481d      	ldr	r0, [pc, #116]	@ (8005448 <scalbn+0xe0>)
 80053d4:	f7fb f878 	bl	80004c8 <__aeabi_dmul>
 80053d8:	e7e7      	b.n	80053aa <scalbn+0x42>
 80053da:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80053de:	4432      	add	r2, r6
 80053e0:	428a      	cmp	r2, r1
 80053e2:	dced      	bgt.n	80053c0 <scalbn+0x58>
 80053e4:	2a00      	cmp	r2, #0
 80053e6:	dd0a      	ble.n	80053fe <scalbn+0x96>
 80053e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80053ec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80053f0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80053f4:	46ac      	mov	ip, r5
 80053f6:	4658      	mov	r0, fp
 80053f8:	4661      	mov	r1, ip
 80053fa:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80053fe:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005402:	da09      	bge.n	8005418 <scalbn+0xb0>
 8005404:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8005408:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800540c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8005410:	480e      	ldr	r0, [pc, #56]	@ (800544c <scalbn+0xe4>)
 8005412:	f041 011f 	orr.w	r1, r1, #31
 8005416:	e7bd      	b.n	8005394 <scalbn+0x2c>
 8005418:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800541c:	3236      	adds	r2, #54	@ 0x36
 800541e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005422:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005426:	4658      	mov	r0, fp
 8005428:	4629      	mov	r1, r5
 800542a:	2200      	movs	r2, #0
 800542c:	4b08      	ldr	r3, [pc, #32]	@ (8005450 <scalbn+0xe8>)
 800542e:	e7d1      	b.n	80053d4 <scalbn+0x6c>
 8005430:	c2f8f359 	.word	0xc2f8f359
 8005434:	01a56e1f 	.word	0x01a56e1f
 8005438:	8800759c 	.word	0x8800759c
 800543c:	7e37e43c 	.word	0x7e37e43c
 8005440:	43500000 	.word	0x43500000
 8005444:	ffff3cb0 	.word	0xffff3cb0
 8005448:	8800759c 	.word	0x8800759c
 800544c:	c2f8f359 	.word	0xc2f8f359
 8005450:	3c900000 	.word	0x3c900000

08005454 <with_errno>:
 8005454:	b570      	push	{r4, r5, r6, lr}
 8005456:	4604      	mov	r4, r0
 8005458:	460d      	mov	r5, r1
 800545a:	4616      	mov	r6, r2
 800545c:	f7ff f8c6 	bl	80045ec <__errno>
 8005460:	4629      	mov	r1, r5
 8005462:	6006      	str	r6, [r0, #0]
 8005464:	4620      	mov	r0, r4
 8005466:	bd70      	pop	{r4, r5, r6, pc}

08005468 <xflow>:
 8005468:	b513      	push	{r0, r1, r4, lr}
 800546a:	4604      	mov	r4, r0
 800546c:	4619      	mov	r1, r3
 800546e:	4610      	mov	r0, r2
 8005470:	b10c      	cbz	r4, 8005476 <xflow+0xe>
 8005472:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005476:	e9cd 2300 	strd	r2, r3, [sp]
 800547a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800547e:	f7fb f823 	bl	80004c8 <__aeabi_dmul>
 8005482:	2222      	movs	r2, #34	@ 0x22
 8005484:	b002      	add	sp, #8
 8005486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800548a:	f7ff bfe3 	b.w	8005454 <with_errno>

0800548e <__math_uflow>:
 800548e:	2200      	movs	r2, #0
 8005490:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005494:	f7ff bfe8 	b.w	8005468 <xflow>

08005498 <__math_oflow>:
 8005498:	2200      	movs	r2, #0
 800549a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800549e:	f7ff bfe3 	b.w	8005468 <xflow>
	...

080054a4 <_init>:
 80054a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a6:	bf00      	nop
 80054a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054aa:	bc08      	pop	{r3}
 80054ac:	469e      	mov	lr, r3
 80054ae:	4770      	bx	lr

080054b0 <_fini>:
 80054b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b2:	bf00      	nop
 80054b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b6:	bc08      	pop	{r3}
 80054b8:	469e      	mov	lr, r3
 80054ba:	4770      	bx	lr
